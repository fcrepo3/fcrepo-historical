package com.rolemodelsoft.drawlet;

/**
 * @(#)PropertyChangeRevealer.java
 *
 * Copyright (c) 1998-2001 RoleModel Software, Inc. (RMS). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies.
 *
 * RMS MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. RMS SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */

import java.beans.*;
import com.rolemodelsoft.drawlet.*;

/**
 * A utility class to allow tests to access property change events.
 *
 * @version 	1.1.6, 12/30/98
 */

public class RelatedLocationRevealer implements RelatedLocationListener {
	/**
	 * the most recent property change event generated by the subject
	 */
	PropertyChangeEvent relatedLocationEvent = null;

	int eventCount = 0;
/**
 * Set the event count to 0.
 */
public void clearEventCount() {
	eventCount = 0;
}
/**
 * Get the event count.
 *
 * @return an integer representing the number of events that have occured since
 * the receiver was created or cleared.
 */
public int getEventCount() {
	return eventCount;
}
/**
 * Called when an object the receiver is registered with as a RelatedLocationListener
 * changes its location.
 * 
 * @param evt the event describing the change in location, represented by a
 * PropertyChangeEvent.
 */
public void locationChanged( PropertyChangeEvent evt ) {
	eventCount++;
	relatedLocationEvent = evt;
}
/**
 * Called when an object the receiver is registered with as a RelatedLocationListener
 * changes its relationship.
 * 
 * @param evt the event describing the change in relationship, represented by a
 * PropertyChangeEvent.
 */
public void relationChanged( PropertyChangeEvent evt ) {
	eventCount++;
	relatedLocationEvent = evt;
}
/**
 * Called when an object the receiver is registered with as a RelatedLocationListener
 * changes its shape.
 * 
 * @param evt the event describing the change in shape, represented by a
 * PropertyChangeEvent.
 */
public void shapeChanged( PropertyChangeEvent evt ) {
	eventCount++;
	relatedLocationEvent = evt;
}
/**
 * Called when an object the receiver is registered with as a RelatedLocationListener
 * changes its size.
 * 
 * @param evt the event describing the change in size, represented by a
 * PropertyChangeEvent.
 */
public void sizeChanged( PropertyChangeEvent evt ) {
	eventCount++;
	relatedLocationEvent = evt;
}
}

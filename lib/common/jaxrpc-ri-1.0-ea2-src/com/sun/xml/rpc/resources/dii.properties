#
# $Id$
#
dii.exception.nested=dynamic invocation error: {0}
service.exception.nested=service error: {0}
dii.service.doesnt.contain.port=service: {0} does not contain port: {1}
dii.required.property.not.set=property: "{0}" must be set on a Call object before it can be invoked in this configuration
dii.parameter.type.unknown=no serializer/deserializer could be found for parameter number: {0}, named: "{1}", class: {2}, type: "{3}"
dii.parameter.type.ambiguous.no.class=the serializer/deserializer for parameter number: {0}, named: "{1}", type: "{2}", is ambiguous because its class could not be determined
dii.parameter.type.ambiguous.no.typename=the serializer/deserializer for parameter number: {0}, named: "{1}", class: {2}, is ambiguous because its XML type could not be determined
dii.parameter.type.underspecified=the serializer/deserializer for parameter number: {0}, named: "{1}" cannot be found because no class or XML type could be determined for it
dii.typeregistry.encodingstyle.unrecognized=encoding style "{0}" not found in type registry
dii.typeregistry.missing.in.call=call object cannot be created without a TypeRegistry
dii.call.property.set.unrecognized=cannot set unrecognized property: {0} on a Call object
dii.call.property.get.unrecognized=cannot get unrecognized property: {0} on a Call object
dii.service.cant.create.call.without.registry=service cannot create Call object until a TypeRegistry has been set using setTypeMappingRegistry()
dii.service.cant.create.proxy.parameter.name.type.mismatch=number of parameter types does not match number of parameter names for method: {0}
dii.parameter.invalid.type=parameter was expected to be of type: {0} but was of type: {1} instead
dii.outparameters.not.available=output parameters are only available after Invoke() has been called
dii.parameterandreturntypespec.not.allowed=cannot set parameter or return types on this Call object

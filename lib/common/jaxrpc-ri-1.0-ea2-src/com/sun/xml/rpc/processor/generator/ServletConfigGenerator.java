// NMI's Java Code Viewer 5.1 © 1997-2001 B. Lemaire
// http://njcv.htmlplanet.com - info@njcv.htmlplanet.com

// Copy registered to Evaluation Copy                                   

// Source File Name:   ServletConfigGenerator.java

package com.sun.xml.rpc.processor.generator;

import com.sun.xml.rpc.processor.config.Configuration;
import com.sun.xml.rpc.processor.model.*;
import com.sun.xml.rpc.processor.model.java.JavaInterface;
import com.sun.xml.rpc.processor.util.*;
import java.io.*;
import java.util.*;
import javax.xml.rpc.namespace.QName;
import sun.tools.java.Environment;

// Referenced classes of package com.sun.xml.rpc.processor.generator:
//            GeneratorBase, Names

public class ServletConfigGenerator extends GeneratorBase {

    private File configFile;
    private Service currentService;
    private IndentingWriter out;
    private int portCount;
    private TreeSet operations;

    public ServletConfigGenerator() {
        operations = null;
        configFile = null;
        out = null;
        portCount = 0;
    }

    public GeneratorBase getGenerator(Model model, Configuration config, Properties properties) {
        return new ServletConfigGenerator(model, config, properties);
    }

    private ServletConfigGenerator(Model model, Configuration config, Properties properties) {
        super(model, config, properties);
        operations = null;
        configFile = null;
        out = null;
        portCount = 0;
    }

    protected void preVisitService(Service service) throws Exception {
        try {
            currentService = service;
            String className = service.getName().getLocalPart();
            configFile = configFileForClass(className, super.destDir, super.env);
            out = new IndentingWriter(new OutputStreamWriter(new FileOutputStream(configFile)));
            portCount = 0;
            out.pln("# This file is generated by xrpcc.");
            out.pln();
        }
        catch(IOException ioexception) {
            fail("cant.write", configFile.toString());
        }
    }

    protected void postVisitService(Service service) throws Exception {
        try {
            out.pln("portcount=" + portCount);
            closeFile();
        }
        catch(IOException ioexception) {
            fail("cant.write", configFile.toString());
        }
        finally {
            currentService = null;
        }
    }

    public void visit(Port port) throws Exception {
        int myPortNum = portCount;
        portCount = myPortNum + 1;
        this.operations = new TreeSet(new ServletConfigGenerator$StringLenComparator(null));
        for(Iterator operations = port.getOperations(); operations.hasNext(); ((Operation)operations.next()).accept(this));
        try {
            String portID = "port" + myPortNum;
            String servant = null;
            servant = port.getJavaInterface().getImpl();
            if(servant == null)
                servant = "Please specify the servant class for port:" + port.getName().getLocalPart();
            out.pln(portID + ".tie=" + Names.tieFor(port.getJavaInterface().getName()));
            out.pln(portID + ".servant=" + servant);
            out.pln(portID + ".name=" + port.getName().getLocalPart());
            out.pln(portID + ".wsdl.targetNamespace=" + super.model.getTargetNamespaceURI());
            out.pln(portID + ".wsdl.serviceName=" + currentService.getName().getLocalPart());
            out.pln(portID + ".wsdl.portName=" + getPortName(port.getName().getLocalPart()));
        }
        catch(IOException ioexception) {
            super.env.error(0L, "cant.write", configFile);
        }
    }

    protected void visitOperation(Operation operation) throws Exception {
        operations.add(operation);
    }

    private void closeFile() throws IOException {
        if(out != null) {
            out.close();
            out = null;
        }
    }

    private String getBaseName(String s) {
        if(s.endsWith("Port"))
            return s.substring(0, s.length() - 4);
        else
            return s;
    }

    private String getPortName(String s) {
        return getBaseName(s) + "Port";
    }

    protected static File configFileForClass(String className, File destDir, BatchEnvironment env) {
        File packageDir = DirectoryUtil.getOutputDirectoryFor(className, destDir, env);
        String outputName = Names.stripQualifier(Names.mangleClass(className));
        String outputFileName = outputName + "_Config.properties";
        return new File(packageDir, outputFileName);
    }
}

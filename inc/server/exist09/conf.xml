<?xml version="1.0" encoding="UTF-8"?>
<exist>
  <!-- settings for the native Java backend

       - files:   the name of the directory where database files are
                  stored.
       - buffers: size of page buffer. Each db file has an associated page
                  buffer to speed up access. Increasing this value reduces
                  disc access, but increases memory consumption.
	   - words_buffers: size of the page buffer for words.
	   - elements_buffers: size of the page buffer for elements.
	   - collection_buffers: size of the page buffer for collections.
	   - free_mem_min: amount of free memory in percent which should be available
	   	          to the JVM before eXist starts to flush internal caches.
	   - pageSize: disk page size - should be a multiple of the operating system's
				  file system page size.
       -->
       <db-connection database="native" files="data" 
		   buffers="256" words_buffers="8192" collection_buffers="512" 
		   elements_buffers="1024" free_mem_min="5" 
		   pageSize="4096">

		   <!-- Settings for the database connection pool

		   	    - idle-time: the database will try to sync its internal buffers
				with the filesystem after being idle for the specified number of
				seconds.
				- min: minimum number of connections to keep alive.
				- max: maximum number of connections allowed.
		   -->
	  	   <pool min="1" max="15" idle-time="900"/>
	   </db-connection>
	
  <!-- settings for the serializer

       - enable-xinclude: should the database expand xinclude tags?
	   - enable-xsl: should the database evaluate xsl processing instructions
	   if found in documents?
	   - indent: should the serializer pretty-print (indent) xml?
  -->
  <serializer enable-xinclude="true" enable-xsl="false"
  	indent="false"/>
  
  <!-- settings for the indexer
       Attributes:
	- batchLoad	
	        setting this to true will cause the relational backend
			to temporarily write most table-data to a file 
			instead of directly storing it into the database.
			These files will be read in using the mysql LOAD DATA
			INFILE or the respective Oracle or PostgreSQL commands. 
			This is about twice as fast as storing data directly.
	- tmpDir	
	        the temporary directory to write temporary files
			during the parsing.
	- controls
	        the directory containing the .ctl-files needed by Oracle's
			sqlldr.
	- suppress-whitespace
		should leading or trailing whitespace be removed from a text
		node? Set to "leading", "trailing", "both" or "none".
    - stemming
            eXist includes a very simple english language stemmer, based on Porter's algorithm.
            Set the "stemming"-option to "true" if you would like to use stemming. This does
            only work for english.
    - index-depth
    		defines the maximum nesting depth of nodes which will be indexed
    		in the DOM index. Nodes below the specified nesting depth will
    		not be indexed in the DOM file. This has only an effect when 
    		retrieving query results or for some types of XPath subexpressions, like
    		equality comparisons.
  -->
  <indexer batchLoad="true" tmpDir="tmp"
	  stemming="false" caseSensitive="false"
	  suppress-whitespace="none" index-depth="1"
	  tokenizer="org.exist.storage.analysis.SimpleTokenizer">

    <!-- where's the file containing a list of stopwords to be ignored
         by the parser. -->
    <stopwords file="stopwords.txt"/>
    
  </indexer>
  
  <!-- the following section configures the logging facility. 
       It is just handed over to log4j.
       For a description read the log4j documentation
	   (www.log4j.org). -->

  <log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j">

    <!-- writes log messages to the console. It outputs file name,
	     method name and line number of the caller. This is slow,
		 so just use it for debugging. -->
    <appender name="console" class="org.apache.log4j.ConsoleAppender">
      <layout class="org.apache.log4j.PatternLayout">
        <param name="ConversionPattern" value="%d{DATE} %-5p (%F [%M]:%L) - %m\n"/>
      </layout>
    </appender>

    <!-- writes simple log messages to the console. -->
    <appender name="simple" class="org.apache.log4j.ConsoleAppender">
      <layout class="org.apache.log4j.PatternLayout">
        <param name="ConversionPattern" value="%d{DATE} %-5p> %m\n"/>
      </layout>
    </appender>

    <!-- file appenders -->
    <appender name="exist.core" class="org.apache.log4j.RollingFileAppender">
	    <param name="File" value="logs/exist.log"/>
	  <param name="MaximumFileSize" value="500000"/>
      <layout class="org.apache.log4j.PatternLayout">
        <param name="ConversionPattern" value="%d [%t] %-5p (%F [%M]:%L) - %m\n"/>
      </layout>
    </appender>

    <appender name="exist.xmldb" class="org.apache.log4j.RollingFileAppender">
	    <param name="File" value="logs/xmldb.log"/>
	  <param name="MaximumFileSize" value="500000"/>
      <layout class="org.apache.log4j.PatternLayout">
        <param name="ConversionPattern" value="%d [%t] %-5p (%F [%M]:%L) - %m\n"/>
      </layout>
    </appender>

    <!-- LF5 appender -->
    <appender name="lf5" class="org.apache.log4j.lf5.LF5Appender">
	<param name="MaxNumberOfRecords" value="1000"/>
    </appender>
    
    <root>
		<appender-ref ref="exist.core"/>
		<priority value="debug"/>
    </root>

    <category name="org.exist.xmldb" additivity="false">
		<appender-ref ref="exist.xmldb"/>
		<priority value="debug"/>
    </category>
    
  </log4j:configuration>
</exist>

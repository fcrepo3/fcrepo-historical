#
# The default property values for the Fedora reference implementation.
# 
# These can be read via public static constant fedora.server.Server.CONSTANTS,
# a java ResourceBundle.  There are two types of properties:
#
# - Non-localizable
#   Properties whose values 1) must be consistent across locales,
#   and 2) may be referred to directly in all documentation.
#
# - Localizable
#   Properties whose values 1) will likely differ across locales,
#   and 2) may be referred to directly in locale-specific documentation.
#
# * NOTE *
#
# These property values are not intended to be modified by fedora server
# administrators.  Non-localizable property names and values, and localizable
# property *names* are to only be modified by fedora developers as they are 
# tightly coupled with source code and documentation.  Localizable property 
# *values* may be modified by translators or locale-knowledgeable developers.
# 

#
# NON-LOCALIZABLE (Constants)
#

# the version of this release of Fedora
version.major=1
version.minor=0

# the name of the property that tells the server where it's based
home.property=fedora.home

# the directory where server configuration is stored, relative to home
config.dir=config

# config filename
config.file=fedora.fcfg

# the prefix to all fedora-defined namespaces for this version
namespace.prefix=http://www.fedora.info/definitions/{0}/{1}/

# configuration file namespace, 0={namespace.prefix}
config.namespace={0}config/

# configuration file root element name
config.element.root=server

# configuration file "class" attribute for server and module elements
config.attribute.class=class

# the name of the domanager class (a Fedora server module "role")
domanager.class=fedora.server.storage.DOManager

#
# LOCALIZABLE (Messages)
#
# Messages are named using the following convention:
#
# execpoint.messagetype.mnemonic
#
# where execpoint is composed of phase[subphase.[subphase.(...)]]
#
# Phase is a mnemonic intended to show (in very general terms) 
# at which point in the server's execution the condition described
# by the message occurs. Subphase is a sub-categorization of a phase.  
# For example, init.config and init.server are subphases of the init phase.
#
# Phase/Subphase       Description
# --------------       -----------
# init                 Server initialization
# init.xmlparser       XML parser initialization
# init.config          Reading and validating configuration file
# init.server          Initializing the server implementation
# init.module          Initializing a module
# storage              In the storage subsystem
# api                  Server front-end
# shutdown.server      Shutting down the server
# shutdown.module      Shutting down a module
#
# MessageType          Description
# -----------          -----------
#
# fatal                Severe errors that cause the server to terminate 
#                      prematurely.
# error                Runtime errors or unexpected conditions that cannot
#                      be recovered from on a per-incident basis, but don't
#                      cause server shutdown.
# warn                 Use of deprecated APIs or runtime conditions that are
#                      undesirable but not by themselves unrecoverable.
# info                 Interesting runtime events such as server or module 
#                      startup, shutdown, and periodic server status messages.
# debug                detailed information on flow through the system. 
# trace                more detailed information.
#

init.xmlparser.fatal.missing=An XML parser is unavailable.

# 0=config file full path, 1=additional info from underlying exception
init.config.fatal.unreadable=Config file, "{0}" could not be read. {1}

# 0=config file full path, 1=additional info from underlying exception
init.config.fatal.malformedxml=Config file, "{0}" contains malformed xml. {1}

# 0=config file full path, 1={config.element.root}, 2=actual root element name
init.config.fatal.badrootelement=Config file, "{0}"'s root element must be \
"{1}" but it is "{2}".

# 0=config file full path, 1={config.namespace}
init.config.fatal.badnamespace=Config file, "{0}" must use namespace "{1}".

# 0=server class specified in config root element
init.server.fatal.classnotfound=The specified server class "{0}" could not be \
found.

# 0=server class specified in config root element
init.server.fatal.illegalaccess=The specified server class "{0}" could not be \
accessed due to security misconfiguration.

# 0=server class specified in config root element
init.server.fatal.badargs=The specified server class "{0}" was invoked \
improperly due to programmer error.

# 0=server class specified in config root element
init.server.fatal.missingconstructor=The specified server class "{0}" must \
implement Server(NodeList, File).

# 0=server class specified in config root element
init.server.fatal.isabstract=The specified server class "{0}" cannot be \
declared abstract.

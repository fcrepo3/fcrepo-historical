<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Sample Policy Guide: A Reference Collection XACML Policies for
Fedora</title>
<link rel="Stylesheet" type="text/css" media="all"
	href="../../docstyle.css">
</head>

<body lang="EN-US" link="blue" vlink="purple">

<div id="header"><a href="../index.html" id="logo"></a>
<div id="title">
<h1>Fedora XACML Policy Writing Guide</h1>
<h2>With Reference Collection of Sample Policies for Fedora</h2>
</div>
<p><b>&nbsp;</b></p>
</div>

<div class="toc">
<h2>Table of Contents</h2>
<div class="tocbox">
<ol>
	<li><a href="#INTRO">Introduction</a></li>
	<li><a href="#POLICY">Writing Fedora XACML Policies</a>
	<ul>
		<li><a href="#POLICY-VOCAB">2.1 The Fedora Policy Vocabulary</a></li>
		<li><a href="#POLICY-BASICS">2.2 Policy Basics:&nbsp; Identifier,
		Description, and Rule Combining Algorithm</a></li>
		<li><a href="#POLICY-TARGET">2.3 Defining the Policy Target</a></li>
		<li><a href="#POLICY-RULE">2.4 Defining Policy Rules</a></li>
		<li><a href="#POLICY-FUNCTIONS">2.5 XACML Functions</a></li>
		<li><a href="#POLICY-OPT-ATTRS">2.6 Required vs. Optional Attributes
		in a Policy</a></li>
		<li><a href="#POLICY-BEST">2.7 Recommended Best Practices for
		Authoring Fedora XACML Policies</a></li>
		<li><a href="#POLICY-GOTCHA">2.8 XACML Gotchas</a></li>
	</ul>
	</li>
	<li><a href="#DEFAULT-REPOWIDE">Default Repository Policies</a></li>
	<li><a href="#CUSTOM-REPO-WIDE">Custom Policies - Sample
	Repository-Wide Policies</a></li>
	<li><a href="#CUSTOM-OBJ-SPECIFIC">Custom Policies - Sample
	Object-Specific Policies</a></li>
</ol>
</div>
</div>
<br />

<div class="Section1">

<h2><a name="INTRO"></a>1 Introduction</h2>
<p>XACML provides a very flexible language for expressing access control
policies.&nbsp;&nbsp; This document offers guidance on writing a range
of useful policies for Fedora such as 1) broad repository-wide policies
for controlling access to Fedora API operations,&nbsp; 2) more detailed
repository-wide policies for controlling access to groups of digital
objects based on various attributes, and 3) more fine-grained
object-specific policies for controlling access to individual digital
objects.&nbsp;&nbsp;&nbsp; <b><i>It should be noted that to help users
who do not wish to learn native XACML, a Policy Authoring Client is
currently under development that will provide an easy graphical user
interface for creating XACML policies for Fedora.</i></b></p>
<p>This guide also provides a&nbsp; collection of sample XACML policies
is intended as reference material to help in writing custom XACML
policies for Fedora.&nbsp; The sample policies demonstrate one possible
authoring style for XACML, in recognition that there are other ways to
write XACML policies that have the same effect.&nbsp;&nbsp;&nbsp; Most
of the sample repository-wide policies are authored to have a <b><i>single
effect,</i></b> meaning that each policy has a single rule that either
permits or denies access.&nbsp;&nbsp; This style of policy writing
results in many individual policies, but each policy is atomic and
uncomplicated.&nbsp; An alternative is to have fewer policies, each with
multiple rules within.&nbsp;&nbsp; This multi-rule approach can result
in more complicated policies, but is, nevertheless, appropriate for
writing <b><i>object-specific</i></b> <b><i>policies</i></b> in Fedora
where a single policy states all the rules for a particular digital
object.&nbsp;&nbsp;&nbsp; In either case, it is essential to understand
the policy combining algorithm that is configured for your repository's
XACML-based Authorization module.&nbsp; By default, the &quot;Deny
Overrides&quot; algorithm is configured in Fedora, which means that when
multiple policies are applicable to an incoming request, deny will trump
permit.&nbsp;&nbsp; As you add new policies to the mix, you must be
aware of what kinds of policies are already active in the
repository.&nbsp;&nbsp;&nbsp; Also, when writing a policy that contains
more than one rule, you must understand the the rule combining algorithm
(which is specified in the root element of an individual XACML
policy).&nbsp; The sample policies use the &quot;first-applicable&quot;
rule combining algorithm, which means that the first applicable rule in
the policy will prevail.</p>
<p>This document is not intended to be a comprehensive tutorial on
writing XACML policies.&nbsp;&nbsp; Anyone intending to author custom
XACML policies for Fedora is encouraged to read the following
documentation provided by OASIS Technical Committee that defined the
XACML standard, and Sun who is the provider of the open source Sun XACML
engine that is used in the Fedora implementation.&nbsp;&nbsp;&nbsp; It
is very important to understand the basics of XACML to ensure that a
suite of policies works as intended.&nbsp;&nbsp; One of the most
important concepts in using XACML is understanding how multiple policies
can interact with each other (in good ways, or in ways you didn't
intend).&nbsp;&nbsp; By following the examples in this guide, you should
be able to set up many kinds of access control policies for your
repository.&nbsp;&nbsp; With additional help from the following
documents, you should be able to do more advanced policies, and change
some of the XACML settings for how sets of policies are combined.</p>
<br />
<p><b>More information on writing XACML policies:</b></p>
<p><br>
<a
	href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">OASIS
XACML Specification</a>:&nbsp; this is the official specification and a
good reference document. <br>
<br>
<a
	href="http://www.oasis-open.org/committees/download.php/2713/Brief_Introduction_to_XACML.html">A
Brief Introduction to XACML</a>:&nbsp; this is nice introduction to the
XACML concepts<br>
<br>
<a
	href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=xacml">OASIS
XACML Technical Committee</a>:&nbsp;&nbsp; this home page of the
technical committee provides access to other documents on XACML</p>
<br />
<p><b>More information on the Fedora security architecture:</b></p>
<p><a href="securingrepo.html">Securing Your Repository</a> :
documentation on security options and configuring configuring user
authentication sources for Fedora repositories</p>
<p><a href="AuthorizationXACML.htm">Fedora Authorization with XACML
Policy Enforcement</a> : documentation on configuration and
implementation of the Fedora XACML-based policy enforcement module</p>
<p><a href="AuthorizationXACML.htm#ATTR">Binding to user attributes to
policies</a> : a discussion of how to use attributes from different
sources (e.g., Tomcat, LDAP, Shibboleth) in policies</p>
<br />
<br />

</div>
<br />

<div class="Section1">
<h2><a name="POLICY">2&nbsp; Writing Fedora XACML Policies</a></h2>
<br />
<h3><a name="POLICY-VOCAB">2.1 The Fedora Policy Vocabulary</a></h3>
<p>A <a href="xacml-policies/vocabulary.txt">Fedora-specific policy
vocabulary</a> is defined to enable the creation of XACML policies for
Fedora repositories and digital objects.&nbsp;&nbsp; This vocabulary
define a set of URNs that can be used to identify specific Fedora API
operations, Fedora object attributes, and the Fedora environment within
an XACML policy.&nbsp;&nbsp; These URNs are used as attribute
designators in XACML policies, specifically within a
SubjectAttributeDesignator, ResourceAttributeDesignator,
ActionAttributeDesignator, or
EnvironmentAttributeDesignator.&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>The set of identifiers defined for the Fedora policy vocabulary is
automatically generated on Fedora build and can be found in the Fedora
software distribution at:</p>
<p>&nbsp;Under Windows:</p>

<div class="code"><pre style='line-height:15.0pt;background:#DDDDFF'>%FEDORA_HOME%\server\fedora-internal-use\vocabulary.txt</pre>
</div>

<p>&nbsp;Under Unix:</p>

<div class="code"><pre>$FEDORA_HOME\server\fedora-internal-use\vocabulary.txt</pre>
</div>

<p>This vocabulary provides a set of identifiers (URNs) that can appear
in XACML policies to refer to Fedora API operations (Actions in XACML),
any aspects of a Fedora digital object (Resources in XACML), key
attributes of the environment in which Fedora runs in (Environment in
XACML), and common subject (i.e., user) attributes.&nbsp; (Other user
attributes are named according to site-usage and so their names aren't
included in the Fedora XACML vocabulary.)</p>
<p>Please note that this vocabulary includes action identifiers for the
relatively new methods, <em>ingest</em> and <em>export</em>. Policies
written to protect these actions will protect equivalently the
deprecated methods <em>ingestObject</em> and <em>exportObject</em>,
respectively.</p>
<p>Also, exposed method <em>describeUser</em> does not have an explicit
entry in the vocabulary. Policies written to protect its underlying
method <em>adminPing</em> will protect <em>describeUser</em>
equivalently.</p>
<br />
</div>
<br />

<div class="Section1">
<h3><a name="POLICY-BASICS">2.2 Policy Basics:&nbsp; Identifier,
Description, and Rule Combining Algorithm</a></h3>
<p>Every policy has an identifier, a rule combining algorithm, and a
description.&nbsp; In the root element of an XACML policy there is an
attribute to provide the policy with a unique identifier.&nbsp;&nbsp;
Also, the &lt;Description&gt; element provides a place to put a textual
description of the purpose of the policy.</p>

<div class="code"><pre>&lt;Policy <b>PolicyId=&quot;deny-apia&quot; RuleCombiningAlgId=&quot;urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable&quot;</b>
        xmlns=&quot;urn:oasis:names:tc:xacml:1.0:policy&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
    
    
    <b>&lt;Description&gt;This policy will DENY access to THESIS datastreams.&lt;/Description&gt;</b>
    &lt;Target&gt;
        ...
    &lt;/Target&gt;
    &lt;Rule&gt;
        ...
    &lt;/Rule&gt;
&lt;/Policy&gt;</pre></div>

<p>The main body of a policy consists of a <b>Policy Target</b> and one
or more <b>Rules</b> which are described in the next sections.&nbsp;
Note that in the root element of a policy, the rule combining algorithm
(i.e., attribute &ldquo;RuleCombiningAlgID&rdquo;), specifies how the
Fedora Policy Enforcement Module will deal with multiple Rules in a
policy (how those rules are combined and evaluated together).&nbsp; This
algorithm is valid for only the specific policy containing it, and is
independent of similar algorithms in other policies. It governs how the
various effects of the potentially several rules of a policy are
combined into the single effect of the policy as a whole. It is also
independent of the policy-combining algorithm operative for all policies
collectively, which governs how the various results of all policies are
combined into a single result.</p>
<br />
</div>
<br />

<div class="Section1">
<h3><a name="POLICY-TARGET">2.3 Defining the Policy Target</a></h3>
<p>A Policy Target is the part of a policy that specifies matching
criteria for figuring out whether a particular policy is applicable to
an incoming service request.&nbsp;&nbsp; A Target contains three basic
&quot;matching&quot; components: <b>Subjects</b>, <b>Actions</b>, and <b>Resources</b>.&nbsp;
All of these components must be matched to the context of an incoming
request for the policy to be applicable.&nbsp;&nbsp; These matching
specifications can be built upon <a href="#POLICY-FUNCTIONS">XACML
Functions</a>. (A fourth matching component, Environments, is defined in
XACML and will be available in Fedora's XACML policies when it is
available in the Sun XACML version as used in Fedora.)</p>

<div class="code"><pre>&lt;Policy PolicyId=&quot;deny-apia&quot; RuleCombiningAlgId=&quot;urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable&quot;
      xmlns=&quot;urn:oasis:names:tc:xacml:1.0:policy&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
      
      
      
    &lt;Description&gt;This policy will DENY access to THESIS datastreams.&lt;/Description&gt;
    <b>&lt;Target&gt;</b>
        <b>&lt;Subjects&gt;</b>
            ...
        <b>&lt;/Subjects&gt;</b>
        
        
        <b>&lt;Resources&gt;</b>
            ...
        <b>&lt;/Resources&gt;</b>
        
        
        <b>&lt;Actions&gt;</b>
            ...
        <b>&lt;/Actions&gt;</b>
    <b>&lt;/Target&gt;</b>
    &lt;Rule/&gt;
&lt;/Policy&gt;</pre></div>

<p>A Policy Target can be specified for a Policy (or for a PolicySet,
which is an advanced way of grouping policies together).&nbsp; &nbsp;A
&lt;Target&gt; element is defined at the Policy level (as a child of the
root &lt;Policy&gt; element).&nbsp; A Policy Target applies to any
contained Rules that are expressed in that policy.&nbsp; However, a Rule
may have its own Target, in which case the Rule-level Target overrides
&mdash; for that Rule only &mdash; the Policy level Target.&nbsp;
Typically, a Target defined at the Rule level is used to replace and so
tighten a broader match specification found at the overall Policy level.
(This is described below.)</p>
<br />

<p><b>&lt;Resources&gt;</b></p>
<br />
<p><i>All Fedora resources (objects, datastreams, disseminations) have
attribute identifiers defined in the Fedora policy vocabulary (see:
dist/server/config/xacml-policies/vocabulary.txt).&nbsp; </i></p>
<p>The &lt;Resources&gt; element of a Policy Target is used to wrap one
or more descriptions of the kinds of Fedora resources (objects,
datastreams, disseminations, etc.) that the policy should apply
to.&nbsp; At runtime, the Policy Enforcement Module will compare
attributes of a requested resource against the criteria in the
&lt;Resources&gt; specification within the policy Target to determine if
the policy is applicable to the incoming request. For example, to define
a policy that is applicable to any Fedora resource, the following is
specified:</p>

<div class="code"><pre>&lt;Resources&gt;
    &lt;AnyResource/&gt;
&lt;/Resources&gt;</pre></div>

<p>Within a single &lt;Resource&gt; specification, there may be one or
more attributes that together determine whether a policy match should
occur.&nbsp; Each &lt;ResourceMatch&gt; element is used to specify the
name/value of an attribute of a Fedora resource<b>.&nbsp; </b>&nbsp;Multiple
<b>&lt;ResourceMatch&gt; </b>elements are used to specify multiple
attributes of a resource, and are <b>logically AND-ed together</b>.&nbsp;
This means that for a policy to be applicable to an incoming service
request, <b><i>all</i></b> &lt;ResourceMatch&gt; specifications must
match the attributes of the requested Fedora resource.&nbsp; The
AttributeID in the &lt;ResourceAttributeDesignator&gt; element is used
to identify a particular resource attribute by a URN, as defined in the
Fedora policy vocabulary.&nbsp; In the example below, there are two
attributes to match on: &ldquo;urn:&hellip;datastream:id&rdquo; and
&ldquo;urn:&hellip;mimeType&rdquo;.&nbsp; The snippet says that a policy
match will occur if the incoming request context indicates that the
requested resource has the datastream id of THESIS and the MIME type of
&ldquo;application/pdf.&rdquo;</p>

<div class="code"><pre>&lt;Resources&gt;
    &lt;Resource&gt;
        &lt;ResourceMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;ResourceAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:resource:<b>datastream:id</b>&quot; 
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>THESIS</b>&lt;/AttributeValue&gt;
        &lt;/ResourceMatch&gt;
        
        
        
        &lt;ResourceMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;ResourceAttributeDesignator AttributeId=&quot; urn:fedora:names:fedora:2.1:resource:datastream:<b>mimeType</b>&quot; 
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>application/pdf</b>&lt;/AttributeValue&gt;
        &lt;/ResourceMatch&gt;
    &lt;/Resource&gt;
&lt;/Resources&gt;</pre></div>

<p>To create an <b>OR</b> <b>condition</b> for resource matching,
multiple &lt;Resource&gt; elements must be specified.&nbsp;&nbsp; If
there are multiple <b>&lt;Resource&gt;</b> elements within the
&lt;Resources&gt; wrapper component, the &lt;Resource&gt; elements are <b>logically
OR-ed together</b>.&nbsp; This means that a match on only one of the
Resource specifications is necessary for the policy to apply to a
service request.&nbsp; For example, the snippet below says that a
resource match will occur if the incoming request is for a digital
object that has the content model type of either
&ldquo;UVA_STD_IMAGE&rdquo; or &ldquo;MRSID.&rdquo;</p>

<div class="code"><pre>&lt;Resources&gt;
    &lt;Resource&gt;
        &lt;ResourceMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>UVA_STD_IMAGE</b>&lt;/AttributeValue&gt;
            &lt;ResourceAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:resource:<b>object:contentModel</b>&quot;
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/ResourceMatch&gt;
    &lt;/Resource&gt;
    
    
    
    &lt;Resource&gt;
        &lt;ResourceMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>MRSID</b>&lt;/AttributeValue&gt;
            &lt;ResourceAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:resource:<b>object:contentModel</b>&quot;
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/ResourceMatch&gt;
    &lt;/Resource&gt;
&lt;/Resources&gt;</pre></div>

<br />
<p><b>&lt;Actions&gt;</b></p>
<br />
<p>All Fedora service operations have an action identifier in defined by
the Fedora policy vocabulary (see:
dist/server/config/xacml-policies/vocabulary.txt).&nbsp;</p>
<p>The &lt;Actions&gt; element of a Policy Target is used to wrap one or
more service operations that this policy should apply to.&nbsp; At
runtime, the Policy Enforcement Module will compare the identity of an
incoming request against the criteria specific in the &lt;Actions&gt; of
a Target in a policy. &nbsp;For example, to define a policy that is
applicable to <b><i>any</i></b> Fedora service operation, the following
is specified:</p>

<div class="code"><pre>&lt;Actions&gt;
    &lt;AnyAction/&gt;
&lt;/Actions&gt;</pre></div>

<p>From a practical standpoint in Fedora, there are only two attributes
that pertain to identifying Fedora API operations:&nbsp; 1) an attribute
that indicates what Fedora API is in context, and 2) an attribute that
indicates the specific service operation within that
API.&nbsp;&nbsp;&nbsp; To create a policy that is intended for an <i>entire</i>
service&nbsp; (e.g., ALL operations of API-A) do the following:</p>

<div class="code"><pre>&lt;Actions&gt;
    &lt;Action&gt;
        &lt;ActionMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>api-a</b>&lt;/AttributeValue&gt;
            &lt;ActionAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:api</b>&quot;
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/ActionMatch&gt;
    &lt;/Action&gt;
&lt;/Actions&gt;</pre></div>

<p>To create a policy that is about a specific operation in a Fedora API
do the following:</p>

<div class="code"><pre>&lt;Actions&gt;
    &lt;Action&gt;
        &lt;ActionMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>id-getDatastreamDissemination</b>&lt;/AttributeValue&gt;
            &lt;ActionAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:id</b>&quot;
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/ActionMatch&gt;
    &lt;/Action&gt;
&lt;/Actions&gt;</pre></div>

<p>The above can be considered a shortcut for fully qualifying a service
operation within its respective service API.&nbsp;&nbsp; An alternative
way to specify an Action as a Fedora API operation is to refer to the
Fedora service API <b>AND</b> the service operation.&nbsp;&nbsp;&nbsp;
As with &lt;SubjectMatch&gt; and &lt;ResourceMatch&gt; specifications,
multiple <b>&lt;ActionMatch&gt; </b>elements are <b>logically AND-ed
together</b>. &nbsp;&nbsp;&nbsp; For example the following snippet says
that the policy will match if the incoming request pertains to the
Fedora API-A service AND the service request is for the the
&ldquo;getDatastreamDissemination&rdquo; operation.</p>

<div class="code"><pre>&lt;Actions&gt;
    &lt;Action&gt;
        &lt;ActionMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>api-a</b>&lt;/AttributeValue&gt;
            &lt;ActionAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:api</b>&quot;
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/ActionMatch&gt;
        
        
        
        &lt;ActionMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>id-getDatastreamDissemination</b>&lt;/AttributeValue&gt;
            &lt;ActionAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:id</b>&quot; 
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/ActionMatch&gt;
    &lt;/Action&gt;
&lt;/Actions&gt;</pre></div>

<p>To create an <b>OR</b> <b>condition</b> for action matching, multiple
&lt;Action&gt; elements must be specified.&nbsp;&nbsp; If there are
multiple <b>&lt;Action&gt;</b> elements within the &lt;Actions&gt;
wrapper component, the &lt;Action&gt; elements are <b>logically OR-ed
together</b>.&nbsp; This means that a match on only one of the Action
specifications is necessary for the policy to apply to a service
request.&nbsp; For example, the snippet below says that a resource match
will occur if the incoming request is <b><i>either</i></b> the
getDatastreamDissemination operation of API-A or the getDissemination
operation of API-A.&nbsp;&nbsp;</p>
<p>Note:&nbsp; The &quot;shortcut&quot; method of referring to a Fedora
API operation is used in the example (i.e., we have an ActionMatch for
the specific Fedora API of &quot;api-a&quot;) because Fedora actions
identifiers are unique in themselves.&nbsp; Fedora automatically knows
that the getDatastreamDissemination operation is part of API-A.</p>

<div class="code"><pre>&lt;Actions&gt;
    &lt;Action&gt;
        &lt;ActionMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>id-getDatastreamDissemination</b>&lt;/AttributeValue&gt;
            &lt;ActionAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:id</b>&quot; 
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/ActionMatch&gt;
    &lt;/Action&gt;
    
    
    
    &lt;Action&gt;
        &lt;ActionMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>id-getDissemination</b>&lt;/AttributeValue&gt;
            &lt;ActionAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:id</b>&quot;
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/ActionMatch&gt;
    &lt;/Action&gt;
&lt;/Actions&gt;</pre></div>

<br />
<p><b>&lt;Subjects&gt;</b></p>
<br />
<p>The Fedora policy vocabulary (see:
dist/server/config/xacml-policies/vocabulary.txt) defines
general-purpose attributes for use in policies (e.g., login-id).
&nbsp;However, attributes for subjects will vary depending on what a
repository uses as the source of user information (e.g.,
tomcat-users.xml, LDAP, Shibboleth).&nbsp; &nbsp;Fedora XACML policies
can make reference to the identifiers of any subject attribute that can
be passed into Fedora from authenticating sources. &nbsp;See the section
below on &ldquo;Getting User Attributes into the Fedora Policy
Enforcement Module&rdquo; for more information on the sources of subject
attributes.</p>
<p>The &lt;Subjects&gt; element of a Policy Target is used to wrap one
or more descriptions of users or agents that this policy should apply
to.&nbsp; At runtime, the Fedora Policy Enforcement Module will compare
attributes of the user/agent making a service request against the
criteria specific in the &lt;Subjects&gt; specification of the policy
Target to determine if the policy is applicable to the incoming request.
&nbsp;&nbsp;For example, to define a policy that is applicable to any
kind of user or agent, the following is specified:</p>

<div class="code"><pre>&lt;Subjects&gt;
    &lt;AnySubject/&gt;
&lt;/Subjects&gt;</pre></div>

<p>Within a single &lt;Subject&gt; specification, there may be one or
more XACML attributes that together determine whether a policy match
should occur.&nbsp; Each &lt;SubjectMatch&gt; element is used to specify
an name/value of an attribute of a user/agent.<b> </b>&nbsp;Multiple <b>&lt;SubjectMatch&gt;
</b>elements are used to specify multiple attributes of a subject, and
are <b>logically AND-ed together</b>.&nbsp; This means that for a policy
to be applicable to an incoming service request, <b><i>all</i></b>
&lt;SubjectMatch&gt; specifications must match the attributes of the
requesting user/agent.&nbsp; In the example below, there is only one
attribute to match on (i.e., &ldquo;fedoraRole&rdquo;).&nbsp; The
AttributeID in the &lt;SubjectAttributeDesignator&gt; element is used to
identify a particular subject attribute by its local or global
identifier.&nbsp; The snippet says that a policy match will occur if the
incoming request context indicates that the user/agent has a role
attribute with the value of &ldquo;administrator.&rdquo;</p>

<div class="code"><pre>&lt;Subjects&gt;
    &lt;Subject&gt;
        &lt;SubjectMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>administrator</b>&lt;/AttributeValue&gt;
            &lt;SubjectAttributeDesignator AttributeId=&quot;<b>fedoraRole</b>&quot; MustBePresent=&quot;false&quot; 
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
    &lt;/SubjectMatch&gt;
  &lt;/Subject&gt;
&lt;/Subjects&gt;</pre></div>

<p>To create an <b>OR</b> <b>condition</b> for subject matching,
multiple &lt;Subject&gt; elements must be specified.&nbsp;&nbsp; If
there are multiple <b>&lt;Subject&gt;</b> elements within the
&lt;Subjects&gt; wrapper component, the &lt;Subject&gt; elements are <b>logically
OR-ed together</b>.&nbsp; This means that a match on only one of the
Subject specifications is necessary for the policy to apply to a service
request.&nbsp; For example, the snippet below says that a subject match
will occur if the requesting user has the role of either
&ldquo;administrator&rdquo; or &ldquo;superuser.&rdquo;</p>

<div class="code"><pre>&lt;Subjects&gt;
    &lt;Subject&gt;
        &lt;SubjectMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>administrator</b>&lt;/AttributeValue&gt;
            &lt;SubjectAttributeDesignator AttributeId=&quot;<b>fedoraRole</b>&quot; MustBePresent=&quot;false&quot; 
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/SubjectMatch&gt;
    &lt;/Subject&gt;
    
    
    
    &lt;Subject&gt;
        &lt;SubjectMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>superuser</b>&lt;/AttributeValue&gt;
            &lt;SubjectAttributeDesignator AttributeId=&quot;<b>fedoraRole</b>&quot; MustBePresent=&quot;false&quot; 
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/SubjectMatch&gt;
    &lt;/Subject&gt;
&lt;/Subjects&gt;</pre></div>

<br />
<p><b>&lt;Environments&gt;</b></p>
<br />
<p>The Environments component of a Target is intended to specify aspects
of the runtime environment that would make the policy match the incoming
request.&nbsp;&nbsp;&nbsp; Such attributes include the current date,
current time, the IP address of the client, and the protocol being used
for the request.&nbsp;&nbsp; The <b>Environments</b> element is
discussed in the OASIS XACML specification, but it is <b><i>not yet
implemented by the Sun XACML engine</i></b> that underlies the Fedora
Authorization module.&nbsp; This prevents the expression of environment
matching criteria within Targets.&nbsp;</p>
<blockquote>
<p><i>** Therefore, in Fedora 2.1 do not create policies that specify
Environment matching criteria in the policy Target.</i>&nbsp;</p>
</blockquote>
<p>Although the Environments element is not currently supported for use
within a Target, this does not mean that you cannot encode matching
criteria for environmental attributes within a policy.&nbsp;&nbsp;
Within a policy Rule, you can specify a Condition that contains matching
criteria for environmental attributes.&nbsp; Refer to the discussion of
policy rules below for an example of Environment attribute matching in a
Condition.</p>
<br />
</div>
<br />

<div class="Section1">
<h3><a name="POLICY-RULE">2.4 Defining Policy Rules</a></h3>
<p>Each policy has at least one, and possibly more, rules. There must be
at least one Rule in a policy that matches the incoming request for a
policy to be deemed applicable to that request.&nbsp;&nbsp;&nbsp; The
way the Sun XACML engine determines whether a rule is applicable to an
incoming request is by evaluating the Target and optional Condition (if
it exists).&nbsp;&nbsp; These are ANDed together, and the rule's effect
achieved if the ANDed value is TRUE. (If there is no Condition, this
result is simply the value of the Target.) The rule's Target is so used,
and if it has no Target, the policy's Target is used instead.&nbsp;</p>

<div class="code"><pre>&lt;Policy PolicyId=&quot;deny-apia&quot; RuleCombiningAlgId=&quot;urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable&quot;
         xmlns=&quot;urn:oasis:names:tc:xacml:1.0:policy&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
   
   
   
    &lt;Description&gt;This policy will DENY access to Dublin Core datastreams.&lt;/Description&gt;
    
     
    &lt;Target&gt;
        ...
    &lt;/Target&gt;
    
    
    <b>&lt;Rule RuleId=&quot;1&quot; Effect=&quot;Deny&quot;&gt;</b>
        <b>&lt;Target&gt;</b>
            ...
        <b>&lt;/Target&gt;</b>
        
              
              
        <b>&lt;Condition&gt;</b>
           ...
        <b>&lt;/Condition&gt;</b>
    <b>&lt;/Rule&gt;</b>
&lt;/Policy&gt;</pre><br />
</div>

<br />
<p><b>&lt;Rule&gt;</b></p>
<br />
<p>A policy contains one or more Rules.&nbsp; Each rule has a <b>RuleId</b>
and and <b>Effect</b>.&nbsp;&nbsp; An Effect is the intended consequence
of a satisfied rule, which can be either &quot;Deny&quot; or
&quot;Permit.&quot;&nbsp;&nbsp;&nbsp;&nbsp; This means that if the rule
is deemed applicable to an incoming service request, and the rule's
conditions evaluate to TRUE,&nbsp; then the specified effect should be
enforced.</p>
<br />
<p><b>&lt;Target&gt;</b></p>
<br />
<p>Each Rule in a policy can have its own Rule Target.&nbsp; While a
Policy Target generally describes the kinds of requests to which an
entire policy applies, a Rule Target describes the kinds of request to
which a particular rule applies.&nbsp;&nbsp;&nbsp; If a Rule Target is
not present, the Policy Target is used to determine whether the Rule is
applicable to an incoming request.&nbsp; When a policy target exists, it
is applicable to every rule in the policy which does not have its own
Target. In practice, a rule target is often more constrained than the
associated policy target, fine tuning to specific
Subject/Resource/Action match criteria that are in the context of a the
particular rule.&nbsp;</p>
<p>Refer to the documentation above for the <a href="#POLICY-TARGET">Defining
a Policy Target </a>for the structure of a Target, since rule and policy
Targets are defined using the same elements.&nbsp;&nbsp;&nbsp;</p>
<br />
<p><b>&lt;Condition&gt;</b></p>
<br />
<p>A Condition is a predicate that must be satisfied for a rule to be
assigned its effect.&nbsp; <b>&nbsp; </b>These predicates can be built
upon <a href="#POLICY-FUNCTIONS">XACML Functions</a>.</p>
<p>While Targets are appealing, frame-like expressions, they have a
constrained logic which isn't always expressive enough to narrow down
whether a policy is applicable to a service request.&nbsp; Hence, the
need for Condition elements. &nbsp;&nbsp; If either the policy Target or
the rule Target is not able to adequately express a constraint, a
Condition can be added to a Rule. <b><i>&nbsp; A Condition can appear
only within a Rule.</i></b>&nbsp; It cannot appear within a Target, nor
directly under Policy or PolicySet.&nbsp;&nbsp;&nbsp; If a Condition is
intended to be applicable to the entire Policy, the Condition must be
repeated in every Rule in that Policy.&nbsp;&nbsp; Unlike the
relationship of rule targets to policy targets, conditions do in fact
begin with the associate (rule or policy) target, and proceed to further
constrain that target.</p>
<br />
</div>
<br />

<div class="Section1">
<h3><a name="POLICY-FUNCTIONS">2.5&nbsp; XACML Functions</a></h3>
<p>The XACML specification defines numerous functions that can be used
in defining attribute match criteria in Targets and in defining
predicates for Conditions.&nbsp; Consult the <a
	href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">XACML
Specification</a> for a complete list of functions with their
descriptions.&nbsp;&nbsp; For convenience, here is a small sampling of
convenient&nbsp; functions with their XACML identifiers:</p>
<p><b>Equality predicates </b>&nbsp;&nbsp;</p>
<ul>
	<li>
	<p><b>String Equality</b>-
	urn:oasis:names:tc:xacml:1.0:function:string-equal</p>
	</li>
	<li>
	<p><b>Boolean Equality</b>-
	urn:oasis:names:tc:xacml:1.0:function:boolean-equal</p>
	</li>
	<li>
	<p><b>Date/Time Equality</b> -
	urn:oasis:names:tc:xacml:1.0:function:dateTime-equal</p>
	</li>
	<li>
	<p>others</p>
	</li>
</ul>
<p><b>Logical functions</b></p>
<ul>
	<li>
	<p><b>OR</b> - urn:oasis:names:tc:xacml:1.0:function:or</p>
	</li>
	<li>
	<p><b>AND</b> - urn:oasis:names:tc:xacml:1.0:function:and</p>
	</li>
	<li>
	<p><b>NOT</b> - urn:oasis:names:tc:xacml:1.0:function:not</p>
	</li>
	<li>
	<p>others</p>
	</li>
</ul>
<p><b>Comparison functions</b></p>
<ul>
	<li>
	<p><b>Greater Than</b> -
	urn:oasis:names:tc:xacml:1.0:function:integer-greater-than</p>
	</li>
	<li>
	<p><b>Less Than</b> - urn:oasis:names:tc:xacml:1.0:function:type-bag</p>
	</li>
	<li>
	<p><b>Greater Than or Equal</b> -&nbsp;
	urn:oasis:names:tc:xacml:1.0:function:integer-greater-than-or-equal</p>
	</li>
	<li>
	<p><b>Less Than or Equal</b> -
	urn:oasis:names:tc:xacml:1.0:function:integer-less-than-or-equal</p>
	</li>
	<li>
	<p><b>Date/Time Greater Than</b> -
	urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than</p>
	</li>
	<li>
	<p>others</p>
	</li>
</ul>
<p><b>Bag and Set functions</b></p>
<ul>
	<li>
	<p><b>Bag of Strings</b> -
	urn:oasis:names:tc:xacml:1.0:function:string-bag</p>
	</li>
	<li>
	<p><b>Member of Set</b>-
	urn:oasis:names:tc:xacml:1.0:function:type-at-least-one-member-of</p>
	</li>
	<li>
	<p>others</p>
	</li>
</ul>
<p>Below is an example Condition that uses several of these
functions.&nbsp; This Condition evaluates to TRUE if the client IP
address (from the environment of the incoming request) is NOT a member
of a set of privileged IP addresses.&nbsp;&nbsp; The Condition element
itself contains an outer-most function which is a <b><i>negation</i></b>
<b><i>function</i></b>.&nbsp;&nbsp; Within the condition, we see the
application of the <b><i>set membership function</i></b>, which
specifies that the environment attribute &quot;clientIpAddress&quot;
(from the Fedora vocabulary) should be evaluated.&nbsp; Finally, the
inner most <b><i>bag function</i></b> wraps a set of possible values for
the clientIPAddress attribute.&nbsp; Again, if the clientIpAddress on
the incoming request is not one of those in the bag of addresses, then
the rule's Deny effect should take place.</p>

<div class="code"><pre>&lt;Condition FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:not&quot;&gt;
    &lt;Apply FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of&quot;&gt;
        &lt;EnvironmentAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:environment:httpRequest:clientIpAddress&quot;
            DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;Apply FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-bag&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;127.0.0.1&lt;/AttributeValue&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;128.84.103.11&lt;/AttributeValue&gt;
        &lt;/Apply&gt;
    &lt;/Apply&gt;
&lt;/Condition&gt;</pre></div>

<p>In summary, each policy must have at least one Rule.&nbsp; For a Rule
to have an effect, (1) the Rule must match the incoming request by
virtue of a Target match (either via a policy Target, or a constraining
rule Target), and (2) if a Condition is specified,&nbsp; the condition
predicate evaluates to TRUE.&nbsp;&nbsp; An applicable rule will result
in a Permit or Deny for an incoming request, based on what is specified
in the Rule Effect.</p>
</div>
<br />

<div class="Section1">
<h3><a name="POLICY-OPT-ATTRS">2.6 Required vs. Optional Attributes in a
Policy</a></h3>
<p>There are times when an attribute that is referred to by a policy
target will not be available on an incoming service request.&nbsp; By
default, when the policy matching activity occurs -&nbsp; and an
attribute specified in a policy is not found in the incoming request
context -&nbsp; an Indeterminate result is returned and an authorization
exception is thrown.&nbsp; Policy authors can avoid unwanted
Indeterminate results by indicating in the attribute designators of a
Target or Condition that a particular attribute can be considered
optional in terms of whether it must existing in the incoming request
context.&nbsp;&nbsp; This is done by setting
MustBePresent=&quot;false&quot; on a SubjectAttribututeDesignator,
ResourceAttributeDesignator, ActionAttributeDesignator, or
EnvironmentAttributeDesignator element.&nbsp;&nbsp;&nbsp; This will tell
the Fedora Policy Enforcement module that it's ok if the incoming
request does not have the specified attribute available within it. (The
implicit/unstated default is MustBePresent=&quot;true&quot;)&nbsp;&nbsp;
</p>

<p>Let's take an example to make this clearer.&nbsp;&nbsp; Consider a
policy where the SubjectMatch specification talks about an attribute
&quot;fedoraRole&quot; and specifies that the value of this attribute
must be &quot;administrator&quot; in order for this policy to be
considered applicable by the PDP.&nbsp;&nbsp; Now consider an incoming
service request that has a user login id (e.g.,&nbsp; &quot;wdn5e&quot;)
in the request context, but this user does not have a
&quot;fedoraRole&quot; attribute associated with it.&nbsp; So,&nbsp;
when the PEP tries to determine whether this policy is applicable to the
incoming service request, it returns INDETERMINATE because it can't
figure out whether there is a subject match without the presence of a
&quot;fedoraRole&quot; attribute.&nbsp;&nbsp; This will cause an
authorization exception to be thrown for the request because the PDP
expects the &quot;fedoraRole&quot; attribute to be present in the
request context.&nbsp;&nbsp;&nbsp; However, we essentially want to
somehow indicate that the fedoraRole attribute is considered
&quot;optional&quot; on an incoming request&nbsp; (i.e., not every
incoming request must have this particular attribute in
context).&nbsp;&nbsp; To do this, you must indicate in the policy Target
that the attribute does not have to be present
(MustBePresent=&quot;false&quot;) in the incoming request as
follows:&nbsp;</p>

<div class="code"><pre>&lt;Subjects&gt;
    &lt;Subject&gt;
        &lt;SubjectMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
            &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;administrator&lt;/AttributeValue&gt;
            &lt;SubjectAttributeDesignator AttributeId=&quot;fedoraRole&quot; <b>MustBePresent=&quot;false&quot;</b> 
                DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;/SubjectMatch&gt;
    &lt;/Subject&gt;
&lt;/Subjects&gt;</pre></div>

<p>In this example, it's easy to imagine that another policy could
independently permit access. Hence the fit of
MustBePresent=&quot;false&quot;: if the policy above lacks an attribute,
it may not be crucial to the ultimate authorization decision. Policies
are not authored in isolation, but to work together.</p>
</div>
<br />

<div class="section1">
<h2>&nbsp;</h2>
<h3><a name="POLICY-BEST">2.7 Recommended Best Practices for Authoring
Fedora XACML Policies</a></h3>
<ol>
	<li>
	<p>Set the PolicyId attribute in the XACML policy to match the filename
	of the policy.</p>

	<br />
	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Policy
	PolicyId=&quot;deny-objects-to-students&quot; . . . &gt;&nbsp; <b><i>corresponds
	to filename of
	&quot;/repository-policies/deny-objects-to-students.xml&quot;</i></b></p>
	<br />
	</li>

	<li>
	<p>For object-specific policies, especially if kept in an XML file, set
	the PolicyID in the XACML and the policy filename to match the object
	PID, but with concession to demand of OS filenames (e.g., uses dash
	instead of colon).</p>

	<br />
	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Policy
	PolicyId=&quot;demo-5&quot; . . . &gt;&nbsp; <b><i>corresponds to
	filename of &quot;/object-policies/demo-5.xml&quot;</i></b></p>
	<br />
	</li>

	<li>
	<p>Policies should use simplest rule-combining algorithm which gives
	desired outcome. Avoid a more complicated algorithm which happens to
	work, but which confuses because it implies more than what's
	there.&nbsp; A simple choice is the &ldquo;first-applicable&rdquo; rule
	combining algorithm which give precedence to the first rule in a policy
	to apply to a situation.</p>

	<br />
	<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Policy
	PolicyId=&quot;demo-5&quot;
	RuleCombiningAlgId=&quot;urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable&quot;
	. . . &gt;</p>
	<br />
	</li>

	<li>
	<p>An object-specific policy should be coded so that it applies only to
	that specific object. So-coded, if misplaced among general repository
	policies, that wouldn't be hurtful.</p>
	</li>


	<li>Try to stick with &ldquo;single-effect&rdquo; policies, that is a
	policy should either permit or deny.&nbsp; Things can get confusing if
	a single policy has some rules that permit and some that
	deny.&nbsp;&nbsp; If most policies are single-effect, try to have them
	all be single-effect.&nbsp; You may wind up writing more individual
	policies, some that deny and some that permit, but from a policy
	management standpoint, it is probably easier to have atomic,
	unambiguous policies.</li>
</ol>
</div>
<br />

<div class="Section1">
<h3><a name="POLICY-GOTCHA">2.8 XACML Gotchas</a></h3>
<ol>
	<li>
	<p>XACML provides for an AttributeValue in a &lt;Target&gt; evaluation
	as a single value, but provides for an AttributeValue in a
	&lt;Condition&gt; evaluation as &quot;bags&quot; (sets), doing so even
	for either singleton or empty bags.&nbsp; Code policies accordingly.</p>
	</li>

	<li>
	<p>MatchId functions (which are used in Targets) are much restricted in
	allowed values, compared to the values allowed in the analogous
	FunctionIds (which are used in Conditions).&nbsp; There are no existing
	functions which are self-contained boolean combinations, such as
	not-equal.&nbsp; Since attributes are generally not boolean themselves
	(and so possibly negated), the not function can't be used as a MatchId,
	e.g., in a SubjectMatch element.&nbsp; Since SubjectMatch, e.g.,
	expresses a single binary operation, there is no possibility of
	introducing negative logic into a Target.&nbsp; [An exception would be
	an explicit value returned by an attribute finder, which would signify
	the absence of the attribute.]</p>
	</li>

	<li>
	<p>Despite some evidence that &lt;Environments&gt; was added to
	&lt;Target&gt; generally, it doesn't seem to work currently in
	sunxacml.</p>
	</li>

	<li>
	<p>sunxacml has a relaxed parsing of policies; e.g., we have
	encountered schema violation (e.g., Action omitted between Actions and
	ActionMatch) which resulted only in the policy not being evaluated
	correctly, as opposed to failing parse.&nbsp; How widespread this is,
	we don't know. As a precaution, policies should be tested for
	effect.&nbsp; This is good practice, anyway, since testing is the only
	check of the policy-writer's understanding of xacml and against the
	inevitable typ0.</p>
	</li>

	<li>
	<p>Though sunxacml parsing is relaxed, &lt;Description&gt;
	&lt;/Description&gt; apparently requires at least one-character
	content:&nbsp; &lt;Desciption/&gt; doesn't do it.</p>
	</li>

	<li>
	<p>In SubjectMatch, ResourceMatch, and ActionMatch blocks, place
	AttributeValue elements before AttributeDesignator. Also, avoid using
	two AttributeDesignator elements (without any AttributeValues). Though
	it may seem logical to use other ordering or attribute selection, it
	doesn't match the standard and won't work.</p>
	</li>
</ol>

<div class="code"><pre>&lt;ResourceMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than&quot;&gt;
    &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#dateTime&quot;&gt;2004-12-07T20:22:26.705Z&lt;/AttributeValue&gt;
    &lt;ResourceAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:resource:object:lastModifiedDate&quot; 
        DataType=&quot;http://www.w3.org/2001/XMLSchema#dateTime&quot;/&gt;
&lt;/ResourceMatch&gt;</pre></div>
<br />

</div>
<br />

<div class="Section1">
<h2><a name="DEFAULT-REPOWIDE"></a>3 Default Repository-Wide Policies</h2>
<p>out-of-the-box, the Fedora repository is configured with a default
set of access control policies that provide for a highly restricted
management service (API-M), an open access service&nbsp; (API-A), and an
open OAI provider service.&nbsp;&nbsp; These default access control
policies establish the same level of out-of-the-box security on the
repository that was previously configured for Fedora 2.0 release;
however, as of Fedora 2.1 these basic access controls are now specified
as XACML policies.&nbsp;&nbsp; Please consult the <a href="#DEFAULT">Default
Repository Policies</a> documentation for a description of each default
policy.</p>
<br />
</div>
<br />

<div class="Section1">
<h2><a name="CUSTOM-REPO-WIDE"></a>4 Custom Policies - Sample
Repository-Wide Policies</h2>
<p>The sample policies are written with the assumption that Fedora's <a
	href="AuthorizationXACML.htm#DEFAULT">Default Repository-Wide Policies</a>
are unedited and activated.&nbsp;&nbsp;&nbsp; These default policies
lock down access to the Fedora API-M service so that only the Fedora
Administrator is permitted access.&nbsp; The default policies also
result in open access to API-A (all users are permitted).&nbsp;&nbsp;
Given this starting point,&nbsp; you can think writing custom policies
as a way to &quot;loosen up&quot;&nbsp; the API-M defaults and
&quot;tighten up&quot; the API-I defaults.&nbsp; In other words, it is
likely that you will want to write policies that let more users have
access to API-M operations.&nbsp; Also, you will likely want to add
restrictions in who can access digital objects, datastreams, and
disseminations (i.e., via API-A).&nbsp;&nbsp; The sample policies will
demonstrate how to do these things, given various authentication
scenarios.&nbsp; Notice that there are some policies which restrict
access based on user identity/attributes based on Tomcat's default user
directory ( tomcat-users.xml).&nbsp; Other policies demonstrate how to
restrict access by user attributes/groups that are defined in an LDAP
directory.&nbsp;</p>
<p>Note that the sample policies have been written for demonstration
purposes.&nbsp;&nbsp; They are not intended to work as a collaborative
set of policies, since they often demonstrate different ways of of doing
the same basic thing (e.g., one policy demonstrating rules based on
Tomcat user identity, another showing a similar thing with LDAP
groups).&nbsp;&nbsp; If you want to try them out, you can put one or
more of the sample policies into play by following the instructions for
<a href="AuthorizationXACML.htm#CONFIG-ACTIVATE">activating and loading
policies</a> into a Fedora repository.&nbsp; However, it is recommended
that you test them individually to understand the effect each policy
has.&nbsp;&nbsp; This approach of augmenting the default policies, which
are left as-is, allows progressive learning, without endangering your
repository. It may be that this approach goes farther in opening up
API-M than in tighting up API-I, and that eventually the default policy
for API-A will need to be replaced by one or more policies written to
your site's needs. So it goes. Ultimately, you can proceed to write a
meaningful suite of policies that are intended to work together for your
repository. &nbsp;&nbsp;&nbsp;</p>
<br />
</div>
<br />

<div class="Section1">
<h3>4.1&nbsp; Repository Policies to <i>tighten</i> the API-A defaults
at the <i>service</i> <i>interface</i> level</h3>
<table border="1" cellpadding="0" width="100%">
	<tr>
		<td width="41" class="Normal">&nbsp;</td>
		<td width="64" class="Normal">
		<p><b>Service</b></p>
		</td>
		<td width="316" class="Normal">
		<p><b>&nbsp;XACML Policy File</b></p>
		</td>
		<td class="Normal">
		<p><b>&nbsp; Policy Description</b></p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.1.1</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="316" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-all-methods/deny-apia-to-ldap-group.xml">deny-apia-to-ldap-group.xml</a></p>
		</td>
		<td class="Normal">
		<p>Deny access to all API-A methods to users who are
		&ldquo;Librarians&rdquo; or &ldquo;Info Technologists&rdquo; (as
		indicated by their LDAP attributes).</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.1.2</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="316" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-all-methods/deny-apia-if-not-tomcat-role.xml">deny-apia-if-not-tomcat-role.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to ALL API-A methods to users who are
		NOT in the &ldquo;administrator&rdquo; or &ldquo;professor&rdquo;
		ROLES.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.1.3</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="316" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-all-methods/deny-apia-to-tomcat-user.xml">deny-apia-to-tomcat-user.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will deny access to all API-A methods to a particular
		user based on login id (as registered in the tomcat-users.xml file).</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.1.4</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="316" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-all-methods/deny-apia-except-by-owner.xml">deny-apia-except-by-owner.xml</a></p>
		</td>
		<td class="Normal">
		<p>Deny access to all API-A methods to any user unless that user is
		the owner of the object being accessed. This sample policy primarily
		exists to show how to create a policy that compares the owner-id of an
		object to the login-id of the current user. It is important to note
		that due to how XACML policies are processed, you <b>cannot</b> do
		this comparison in the &lt;Subject&gt; section of the XACML policy.
		The comparison must appear in a &lt;Condition&gt; specification in the
		&lt;Rule&gt; section.</p>
		</td>
	</tr>
</table>
</div>
<br />

<div class="Section1">
<h3>4.2&nbsp; Repository Policies to <i>tighten</i> the API-A defaults
based on <i>object attributes</i></h3>
<table border="1" cellpadding="0" width="100%">
	<tr>
		<td width="41" class="Normal">&nbsp;</td>
		<td width="64" class="Normal">
		<p><b>Service</b></p>
		</td>
		<td width="317" class="Normal">
		<p><b>&nbsp;XACML Policy File</b></p>
		</td>
		<td class="Normal">
		<p><b>&nbsp; Policy Description</b></p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.2.1</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="317" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-objects-by-attributes/deny-objects-by-pids-to-tomcat-role.xml">deny-objects-by-pids-to-tomcat-role.xml</a></p>
		</td>
		<td class="Normal">
		<p>Overall, this policy will identify a set of objects by their PIDs
		and it will DENY ALL APIA access to users of particular ROLES.&nbsp;
		NOTE:&nbsp; As a repository-wide policy, this policy demonstrates how
		to control access to specific objects (identified by PID).&nbsp; As an
		alternative, it is possible to create &lsquo;object-specific&rsquo;
		policies that either resides in the digital object's POLICY
		datastream, or that is stored in the object-specific policy
		directory.&nbsp; (See the Fedora system documentation on XACML
		policies for more information.)</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.2.2</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="317" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-objects-by-attributes/deny-objects-by-cmodel-to-ldap-group.xml">deny-objects-by-cmodel-to-ldap-group.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY all APIA access to digital objects that are
		EAD Finding AIDS.&nbsp; This is based on the object content model
		attribute having a value of &quot;UVA_EAD_FINDING_AID.&quot;&nbsp;
		Specifically, the policy will DENY access to users that belong to a
		particular LDAP-defined GROUP.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.2.3</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="317" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-objects-by-attributes/deny-objects-hide-datastreams-if-not-tomcat-role.xml">deny-objects-hide-datastreams-if-not-tomcat-role.xml</a></p>
		</td>
		<td class="Normal">
		<p>The overall intent of this policy is datastream hiding, meaning
		that raw datastreams must not be accessible to anyone except very
		privileged users, but service-mediated disseminations are accessible
		by a broader audience.&nbsp; The key point is that students can access
		disseminations of the object, but not the raw datastreams.&nbsp; This
		is might typically be done in cases where lesser privleged users are
		given a derivation of the main datastream, or a lesser quality view,
		or a less complete view of the raw datastream content.&nbsp; Given
		that an object is of a certain content model (in this case
		UVA_STD_IMAGE), this policy will DENY datastream access to users who
		do NOT have the ROLE of &lsquo;administrator&rsquo; or
		&lsquo;professor&rsquo;. It will also DENY dissemination access to
		users who do NOT have the ROLE of &lsquo;student,&rsquo;
		&lsquo;administrator,&rsquo; or &lsquo;professor.&rsquo;</p>
		</td>
	</tr>
</table>
</div>
<br />

<div class="Section1">
<h3>4.3&nbsp; Repository Policies to <i>tighten</i> the API-A defaults
at the <i>datastream</i> level</h3>
<table border="1" cellpadding="0" width="100%">
	<tr>
		<td width="41" class="Normal">&nbsp;</td>
		<td width="64" class="Normal">
		<p><b>Service</b></p>
		</td>
		<td width="317" class="Normal">
		<p><b>&nbsp;XACML Policy File</b></p>
		</td>
		<td class="Normal">
		<p><b>&nbsp; Policy Description</b></p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.3.1</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="317" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-datastreams/deny-apia-datastream-all-to-all-users.xml">deny-apia-datastream-all-to-all-users.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to ALL datastreams.&nbsp;
		Specifically, it will DENY access to ALL USERS making requests to the
		getDatastreamDissemination method of API-A.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.3.2</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="317" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-datastreams/deny-apia-datastream-DC-to-all-users.xml">deny-apia-datastream-DC-to-all-users.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to Dublin Core datastreams.&nbsp;
		Specifically, it will DENY access to ALL users making
		getDatastreamDissemination requests on API-A to obtain datastreams
		with an identifier of 'DC.'</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.3.3</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="317" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-datastreams/deny-apia-datastream-DC-to-tomcat-group-ALT1.xml">deny-apia-datastream-DC-to-tomcat-group-ALT1.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to Dublin Core datastreams.&nbsp;
		Specifically, it will deny access to USER GROUPS making
		getDatastreamDissemination requests on API-A for datastreams with a
		datastream identifier of 'DC.'&nbsp; User groups are defined using
		custom roles in the tomcat-users.xml file.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.3.4</p>
		</td>
		<td width="59" class="Normal">
		<p>API-A</p>
		</td>
		<td width="317" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-datastreams/deny-apia-datastream-DC-to-tomcat-group-ALT2.xml">deny-apia-datastream-DC-to-tomcat-group-ALT2.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to Dublin Core datastreams.&nbsp;
		Specifically, it will deny access to USER GROUPS making
		getDatastreamDissemination requests on API-A for datastreams with a
		datastream identifier of 'DC.'&nbsp; User groups are defined using
		custom roles in the tomcat-users.xml file.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.3.5</p>
		</td>
		<td width="59" class="Normal">
		<p>API-A</p>
		</td>
		<td width="317" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-datastreams/deny-apia-datastream-MRSID-if-not-tomcat-role.xml">deny-apia-datastream-MRSID-if-not-tomcat-role.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to MRSID image datastreams by
		controlling access to the getDatastreamDissemination method of the
		Fedora Access Service (API-A).&nbsp; Specifically, it will DENY access
		to users who are NOT of particular ROLES when the requested resource
		is a datastream with identifier of 'MRSID.'</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.3.6</p>
		</td>
		<td width="59" class="Normal">
		<p>API-A</p>
		</td>
		<td width="317" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-datastreams/deny-apia-datastream-TEISOURCE-to-tomcat-user.xml">deny-apia-datastream-TEISOURCE-to-tomcat-user.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to TEI datastreams by controlling
		access to the getDatastreamDissemination method of the Fedora Access
		Service (API-A).&nbsp; The TEI datastream is identified as a Resource
		where the Fedora datastream id has the value of
		'TEISOURCE.'&nbsp;&nbsp; This policy will DENY access to a SPECIFIC
		USER based on login id (as registered in the tomcat-users.xml file).</p>
		</td>
	</tr>
</table>
</div>
<br />

<div class="Section1">
<h3>4.4&nbsp; Repository Policies to <i>tighten</i> the API-A defaults
at the <i>dissemination</i> level</h3>
<table border="1" cellpadding="0" width="100%">
	<tr>
		<td width="41" class="Normal">&nbsp;</td>
		<td width="64" class="Normal">
		<p><b>Service</b></p>
		</td>
		<td width="343" class="Normal">
		<p><b>&nbsp;XACML Policy File</b></p>
		</td>
		<td class="Normal">
		<p><b>&nbsp; Policy Description</b></p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.4.1</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="343" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-disseminations/deny-apia-dissem-demo1-getMedium-to-all-users.xml">deny-apia-dissem-demo1-getMedium-to-all-users.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to the 'demo:1/getMedium'
		dissemination (defined on a disseminator that subscribes to the demo:1
		behavior definition.&nbsp;&nbsp; Specifically, it will DENY access to
		ALL users making getDissemination requests on API-A for the
		'demo:1/getMedium' dissemination.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.4.2</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="343" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-disseminations/deny-apia-dissem-demo1-getMedium-to-ldap-group.xml">deny-apia-dissem-demo1-getMedium-to-ldap-group.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to the 'demo:1/getMedium'
		dissemination (defined on a disseminator that subscribes to the demo:1
		behavior definition.&nbsp;&nbsp; Specifically, it will DENY access to
		users of particular LDAP-defined GROUPS who are making
		getDissemination requests on API-A&nbsp; for the 'demo:1/getMedium'
		dissemination.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.4.3</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="343" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-disseminations/deny-apia-dissem-demo1-getMedium-if-not-tomcat-role.xml">deny-apia-dissem-demo1-getMedium-if-not-tomcat-role.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to the 'demo:1/getMedium'
		dissemination (defined on a disseminator that subscribes to the demo:1
		behavior definition.&nbsp;&nbsp; Specifically, it will DENY access to
		users who are NOT of particular ROLES who are making getDissemination
		requests on API-A for the 'demo:1/getMedium' dissemination.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.4.4</p>
		</td>
		<td width="59" class="Normal">
		<p>API-A</p>
		</td>
		<td width="343" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-disseminations/deny-apia-dissem-demo1-getMedium-to-tomcat-user.xml">deny-apia-dissem-demo1-getMedium-to-tomcat-user.xml</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to disseminations that are available
		on objects via a disseminator subscribing to the 'demo:2' behavior
		definition.&nbsp; Specifically, it will DENY access to a particular
		user (as registered in&nbsp; the tomcat-users.xml file).</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.4.5</p>
		</td>
		<td width="59" class="Normal">
		<p>API-A</p>
		</td>
		<td width="343" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apia-tighten-defaults/apia-restrict-disseminations/deny-apia-dissem-DualResImage-to-all-users.xml">deny-apia-dissem-DualResImage-to-all-users</a></p>
		</td>
		<td class="Normal">
		<p>This policy will DENY access to ALL disseminations that are
		available on objects via a particular disseminator (one that
		subscribes to an image-based behavior definition whose PID is
		'demo:DualResImage'.&nbsp; Specifically,&nbsp; it will DENY access to
		ALL users making getDissemination requests on this disseminator.</p>
		</td>
	</tr>
</table>
</div>
<br />

<div class="Section1">
<h3>4.5&nbsp; Repository Policies to <i>loosen</i> the API-M defaults at
the <i>service</i> <i>interface</i> level</h3>
<table border="1" cellpadding="0" width="100%">
	<tr>
		<td width="41" class="Normal">&nbsp;</td>
		<td width="64" class="Normal">
		<p><b>Service</b></p>
		</td>
		<td width="284" class="Normal">
		<p><b>&nbsp;XACML Policy File</b></p>
		</td>
		<td class="Normal">
		<p><b>&nbsp; Policy Description</b></p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.5.1</p>
		</td>
		<td width="64" class="Normal">
		<p>API-M</p>
		</td>
		<td width="284" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apim-loosen-defaults/apim-permit-all-methods/permit-apim-by-ldap-group.xml">permit-apim-by-ldap-group.xml</a></p>
		</td>
		<td class="Normal">&nbsp;</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.5.2</p>
		</td>
		<td width="64" class="Normal">
		<p>API-M</p>
		</td>
		<td width="284" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apim-loosen-defaults/apim-permit-all-methods/permit-apim-by-tomcat-group.xml">permit-apim-by-tomcat-group.xml</a></p>
		</td>
		<td class="Normal">&nbsp;</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4.5.3</p>
		</td>
		<td width="64" class="Normal">
		<p>API-M</p>
		</td>
		<td width="284" class="Normal">
		<p><a
			href="xacml-policies/examples/example-repository-policies/apim-loosen-defaults/apim-permit-all-methods/permit-apim-by-tomcat-user.xml">permit-apim-by-tomcat-user.xml</a></p>
		</td>
		<td class="Normal">&nbsp;</td>
	</tr>
</table>
</div>
<br />

<div class="Section1">
<h2><a name="CUSTOM-OBJ-SPECIFIC"></a>5 Custom Policies - Sample
Object-Specific Policies</h2>
<h3>5.1 Object-specific policies with multiple policy rules</h3>
<p>Object-specific policies are policies that refer to one particular
digital object.&nbsp;&nbsp; An object-specific policy is stored in the
&quot;POLICY&quot; datastream of the digital object to which it
pertains.&nbsp;</p>
<table border="1" cellpadding="0" width="100%">
	<tr>
		<td width="41" class="Normal">&nbsp;</td>
		<td width="64" class="Normal">
		<p><b>Service</b></p>
		</td>
		<td width="284" class="Normal">
		<p><b>&nbsp;XACML Policy File</b></p>
		</td>
		<td class="Normal">
		<p><b>&nbsp; Policy Description</b></p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>5.1.1</p>
		</td>
		<td width="64" class="Normal">
		<p>N/A</p>
		</td>
		<td width="284" class="Normal">
		<p><a
			href="xacml-policies/examples/example-object-policies/demo-5.xml">demo-5.xml</a></p>
		</td>
		<td class="Normal">
		<p>By using <b><i>multiple policy rules</i></b>, this policy shows how
		to deny access to all raw datastreams in the object except to
		particular users (e.g., the object owners). It also shows how to deny
		access to a particular disseminations to selected user roles.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>5.1.2</p>
		</td>
		<td width="64" class="Normal">
		<p>N/A</p>
		</td>
		<td width="284" class="Normal">
		<p><a
			href="xacml-policies/examples/example-object-policies/demo-11.xml">demo-11.xml</a></p>
		</td>
		<td class="Normal">
		<p>By using <b><i>multiple policy rules</i></b>, this policy shows how
		to deny access to particular datastreams in the object. 1) The policy
		will DENY everyone except professors and researchers access to
		-particular- source datastreams of the demo:11 object by controlling
		access to the getDatastreamDissemination method of the Fedora Access
		Service (API-A). 2) The policy will DENY everyone except students,
		professors, and researchers, access to all disseminations of demo:11.
		3) This policy will also DENY ALL access to the demo:11 object to a
		SPECIFIC USER based on login id (as registered in the tomcat-users.xml
		file). NOTE: The net effect of the policy permits open access to the
		descriptive metadata datastream of demo:11.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>5.1.3</p>
		</td>
		<td width="64" class="Normal">
		<p>N/A</p>
		</td>
		<td width="284" class="Normal">
		<p><a
			href="xacml-policies/examples/example-object-policies/demo-26.xml">demo-26.xml</a></p>
		</td>
		<td class="Normal">
		<p>By using <b><i>multiple policy rules</i></b>, this policy shows how
		to deny access to particular datastreams in the object. The policy
		will DENY visitors access to the TEI and FOP source datastreams of the
		demo:26 object by controlling access to the getDatastreamDissemination
		method of the Fedora Access Service (API-A). These datastreams are
		open to all other kinds of users, and Disseminations are open to all
		users. This is an object-specific policy. It could be stored inside
		the demo:26 digital object in the POLICY datastream OR in the
		directory for object-specific policies. (The directory location is set
		in the Authorization module configuration in the Fedora server
		configuration file (fedora.fcfg).</p>
		</td>
	</tr>
</table>
</div>

</body>
</html>

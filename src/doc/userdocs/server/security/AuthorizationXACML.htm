<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<!--<link rel=File-List href="AuthorizationXACML_files/filelist.xml">-->
<title>Authorization:&nbsp;XACML Policy Enforcement for Fedora</title>
<link rel="Stylesheet" type="text/css" media="all"
	href="../../docstyle.css">

</head>
<body lang="EN-US" link="blue" vlink="purple">
<div id="header"><a href="../index.html" id="logo"></a>
<div id="title">
<h1>Fedora Authorization with&nbsp;XACML Policy Enforcement</h1>
</div>
<p><b>&nbsp;</b></p>
</div>

<div class="toc">
<h2>Table of Contents</h2>
<div class="tocbox">
<ol>
	<li><a href="#INTRO">Introduction</a></li>
	<li><a href="#CONFIG">Configuring the XACML Authorization Module</a>
	<ul>
		<li><a href="#CONFIG-ENABLE">2.1 Enabling/Disabling XACML Policy
		Enforcement</a></li>
		<li><a href="#CONFIG-STORE">2.2 Configuring the Storage Locations of
		Policies</a></li>
		<li><a href="#CONFIG-ACTIVATE">2.3 Activating and Loading
		Repository-Wide Policies</a></li>
		<li><a href="#CONFIG-VALIDATE">2.4 Enabling/Disabling Policy
		Validation</a></li>
		<li><a href="#CONFIG-SURROG">2.5 Surrogate feature no longer requires
		policies.</a></li>
	</ul>
	</li>
	<li><a href="#IMPL">Implementation of the Fedora Policy Enforcement
	Module</a>
	<ul>
		<li><a href="#IMPL-PDP-PEP">3.1 Policy Determination Point (PDP) and
		Policy Enforcement Point (PEP)</a></li>
		<li><a href="#IMPL-ALGORITHM">3.2 Understanding the XACML Policy
		Combining Algorithm</a></li>
		<li><a href="#IMPL-DECISION">3.3 A Simplified Understanding of the
		Authorization Decision</a></li>
		<li><a href="#IMPL-PDP">3.4 PDP Implementation Details</a></li>
		<li><a href="#IMPL-PEP">3.5 PEP Implementation Details</a></li>
	</ul>
	</li>
	<li><a href="#ATTR">How to Bind User Attributes into the Fedora Policy
	Enforcement Module</a>
	<ul>
		<li><a href="#ATTR1">4.1 fedora-users attributes</a></li>
		<li><a href="#ATTR2">4.2 LDAP attributes</a></li>
		<li><a href="#ATTR3">4.3 Shibboleth attributes via an HTTP Servlet
		Filter</a></li>
	</ul>
	</li>
	<li><a href="#DEFAULT">Default Repository Policies for Fedora</a></li>
	<li><a href="#CUSTOM">Sample Policies for Typical Fedora Use</a></li>
</ol>
</div>
</div>
<br />

<div class="Section1">
<h2><a name="INTRO">1 Introduction</a></h2>
<p>A major feature of the new Fedora security architecture is the
introduction of the <a
	href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">eXtensible
Access Control Markup Language</a> (XACML) and an XACML-based policy
enforcement module.&nbsp;&nbsp;&nbsp; Developed by the OASIS Consortium,
XACML is an XML-based markup language to encode access control
policies.&nbsp; The policy language is flexible and enables the
specification of fine-grained, machine-readable policies that can be
used to control access to Fedora web services, Fedora digital objects,
datastreams, disseminations, and more.&nbsp;&nbsp;&nbsp; Since a policy
is only worth its salt if it can be enforced, Fedora 2.1 introduces a
new Authorization module implemented as part of the core Fedora
repository service.&nbsp;&nbsp;&nbsp; The Authorization module is built
upon the <a href="http://sunxacml.sourceforge.net">Sun XACML engine</a>.&nbsp;
Each XACML policy defines: (1) a &quot;target&quot; describes what the
policy applies to (by referring to attributes of users, operations,
objects, datastreams, dates, and more), and (2) one or more
&quot;rules&quot; to permit or deny access.&nbsp; There is a <a
	href="XACMLPolicyGuide.htm#POLICY-VOCAB">Fedora-specific policy
vocabulary</a> for referring Fedora operations and Fedora-specific
entities within XACML policies.&nbsp;&nbsp;&nbsp; Regarding policies,
Fedora supports both repository-wide policies (that specify broad access
controls that apply to the entire repository), and object-specific
policies (that specify rules for a single object, and can even be stored
within the object in a special datastream).&nbsp; Fedora 2.1 comes
out-of-the-box with a set of <a href="#DEFAULT">default repository-wide
policies</a> that establish baseline access controls that are equivalent
to what was provided in Fedora 2.0.&nbsp;&nbsp; These default policies
restrict access to the Fedora management web service (API-M) to only the
Fedora administrator, permit open access to the Fedora access web
service (API-A), and establish some other basic controls (e.g., allow
access to API-M only from localhost; restrict policy management to
administrator).&nbsp;&nbsp; In addition to the default policies (which
can be modified), any number of custom XACML policies can be written and
loaded into Fedora.&nbsp;&nbsp; For assistance in creating new policies
for your repository and for your objects, see the <a
	href="XACMLPolicyGuide.htm">Fedora XACML Policy Writing Guide</a>.</p>

<p>This guide is intended to give a general overview of XACML-based
Policy Enforcement Module to support authorization in Fedora
repositories.&nbsp;&nbsp;&nbsp; This guide provides Instructions on how
to configure XACML-based policy authorization in Fedora as well as a
discussion of how the Fedora Policy Enforcement module works.&nbsp; <b><i>&nbsp;</i></b>
For more information consult the following sources:<br />
<br />
</p>

<p><b>Fedora Security Architecture:</b><br />
</p>

<p><a href="securingrepo.html">Securing Your Repository</a> :
documentation on security options and configuring configuring user
authentication sources for Fedora repositories</p>
<p><a href="AuthorizationXACML.htm">Fedora XACML Policy Writering Guide</a>
: documentation for details on writing XACML policies for Fedora
repositories<br />
<br />
</p>
<p><b>OASIS&nbsp; (for policy writers)</b></p>
<p><br>
<a
	href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">OASIS
XACML Specification</a>:&nbsp; this is the official specification and a
good reference document. <br>
<br>
<a
	href="http://www.oasis-open.org/committees/download.php/2713/Brief_Introduction_to_XACML.html">A
Brief Introduction to XACML</a>:&nbsp; this is nice introduction to the
XACML concepts<br>
<br>
<a
	href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=xacml">XACML
Technical Committee</a>:&nbsp;&nbsp; this home page of the technical
committee provides access to other documents on XACML<br>
<br>
<br>
<b>SUN&nbsp; (for developers)</b></p>

<p><br>
<a href="http://sunxacml.sourceforge.net">Sun XACML Home Page</a>:&nbsp;
general information on the Sun Java reference implementation of XACML</p>
<p><a href="http://sunxacml.sourceforge.net/guide.html">Sun XACML
Programmer Guide</a>:&nbsp; technical details of the reference
implementation</p>
<p><a href="http://sunxacml.sourceforge.net/javadoc/index.html">Sun
XACML Javadocs</a>:&nbsp; interface definitions of the reference
implementation<br>
<i><br>
&nbsp;</i></p>
</div>
<br />

<div class="Section1">
<h2><a name="CONFIG">2 Configuring the XACML Authorization Module</a></h2>
<p>Note that to do identity-based policies (user login id or user
attributes), you must have authentication configured.&nbsp;&nbsp;&nbsp;
Run fedora-setup to choose which Fedora service interfaces will be
configured for authentication.&nbsp;&nbsp; If a policy is written that
makes reference to required (MustBePresent=&quot;true&quot;, either
explicitly or by default) user identity or attributes (Subject
attributes in Policy target) and authentication has not been configured,
the policy will be evaluated as &quot;indeterminate&quot; and the
service request will fail with an authorization exception.&nbsp;&nbsp;
Be sure to enable authentication for API-A if you intend to write
policies for accessing objects based on user identity/attributes.&nbsp;</p>

<p>By default, Fedora XACML-based authorization is enabled.&nbsp;&nbsp;
Configuration of the Fedora XACML-based Policy Enforcement Module is
done in the Fedora server configuration file (fedora.fcfg).&nbsp;
Depicted below is the section of the configuration file for the
Authorization module that controls XACML-based policy enforcement.</p>

<p></p>

<div class="code"><pre>&lt;module role=&quot;fedora.server.security.Authorization&quot; class=&quot;fedora.server.security.DefaultAuthorization&quot;&gt;</pre>
<pre>	&lt;comment&gt;Builds and manages Fedora's authorization structure.&lt;/comment&gt;</pre>
<pre>	&lt;param name=&quot;REPOSITORY-POLICIES-DIRECTORY&quot; value=&quot;/fedora-xacml-policies/repository-policies&quot;/&gt;</pre>
<pre>	&lt;param name=&quot;XACML-COMBINING-ALGORITHM&quot; value=&quot;com.sun.xacml.combine.OrderedDenyOverridesPolicyAlg&quot;/&gt;</pre>
<pre>	&lt;param name=&quot;ENFORCE-MODE&quot; value=&quot;enforce-policies&quot;/&gt;</pre>
<pre>	&lt;param name=&quot;POLICY-SCHEMA-PATH&quot; value=&quot;xsd/cs-xacml-schema-policy-01.xsd&quot;/&gt;</pre>
<pre>	&lt;param name=&quot;VALIDATE-REPOSITORY-POLICIES&quot; value=&quot;true&quot;/&gt;</pre>
<pre>	&lt;param name=&quot;VALIDATE-OBJECT-POLICIES-FROM-DATASTREAM&quot; value=&quot;false&quot;/&gt;</pre>
<pre>&lt;/module&gt;</pre></div>
</div>
<br />

<div class="Section1">
<h3>2<a name="CONFIG-ENABLE">.1 Enabling/Disabling XACML Policy
Enforcement</a></h3>
<p>To enable/disable XACML policy enforcement in Fedora, use the Fedora
configuration file (fedora.fcfg).&nbsp; Whether Fedora uses XACML for
authorization decisions is controlled by the "ENFORCE-MODE" parameter in
the Authorization module:</p>

<div class="code"><pre>&lt;param name=&quot;ENFORCE-MODE&quot; value=&quot;enforce-policies&quot;/&gt;</pre>
</div>

<p>The &quot;ENFORCE-MODE&quot; parameter can contain one of three
values, with the following meanings:</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enforce-policies - enable XACML
enforcement to determine whether a request is permitted or denied</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; permit-all-requests â€“ disable XACML
enforcement; PERMIT every request by default</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; deny-all-requests -&nbsp; disable
XACML enforcement; DENY every request by default</p>
<br />

<p>The "enforce-policies" setting is used to enable the enforcement of
XACML policies, and is the default setting for a Fedora
repository.&nbsp; The "permit-all-requests" setting can facilitate
testing code independent of security.&nbsp; The "deny-all-requests"
setting can be used to quickly shut down access to the server, but
requires a server restart to affect this.</p>
<br />
<p>Tomcat container security is, of course, still a first barrier to
authentication/authorization (i.e., Fedora's Tomcat web.xml specifies
access protection earlier than XACML.&nbsp; Tomcat container security is
always in place regardless of the setting for parameter ENFORCE-MODE.</p>
</div>
<br />

<div class="Section1">
<h3><a name="CONFIG-STORE">2.2 Configuring the Storage Locations of
Policies</a></h3>
<p>Active policies are those policies that are &quot;in play&quot; for
the repository.&nbsp; There are two places that active policies can be
stored:&nbsp; (a) in a file system location configured for the
repository, or (b) in digital objects within the special
&quot;POLICY&quot; datastream.&nbsp;&nbsp;&nbsp; It should be noted that
Fedora comes out-of-the-box with a set of default repository-wide
policies.&nbsp; In addition to these default policies,&nbsp; it is
possible to create any number of custom XACML policies for a repository
and for specific digital objects.&nbsp;&nbsp; Consult the Fedora <a
	href="XACMLPolicyGuide.htm">XACML Policy Writing Guide </a>for
instructions on authoring new policies and a set of sample policies for
Fedora.</p>
<br />

<h4><a name="STORE-REPO-WIDE"></a>a.&nbsp;Storing Repository-Wide
Policies in a Configured Location</h4>
<p>Repository-wide policies are broad policies that are intended to be
in play for the entire Fedora repository.&nbsp; By saying that these
policies are "broad", does not mean they must be course-grained.&nbsp;
Repository-wide policies can &nbsp;be fine-grained and they can be
written to control access to any Fedora API operation, to groups of
digital objects, or even to sets of specifically identified digital
objects.&nbsp; Repository-wide policies are distinguished from
object-specific policies (described below) in that <b><i>they are stored
in memory when the server is started and they are evaluated for their
applicability on every Fedora service request.</i></b>&nbsp;</p>

<p>In the Authorization module section of the Fedora server
configuration file (fedora.fcfg),&nbsp; there are parameters to set the
storage location for active repository-wide policies.&nbsp;&nbsp; <b><i>The
Fedora repository will only know about policies that are stored within
the configured policy directory location.&nbsp; </i></b>Policies stored
in any other location will be invisible to the repository and will not
be loaded into the repository upon server startup!<b><i>&nbsp;&nbsp;&nbsp;&nbsp;
</i></b>The storage location for active repository-wide policies can be
set by the repository administrator using the follow parameter in
Authorization module (in fedora.fcfg):&nbsp;&nbsp;</p>

<div class="code"><pre>&lt;param name=&quot;REPOSITORY-POLICIES-DIRECTORY&quot; value=&quot;/fedora-xacml-policies/repository-policies&quot;/&gt;</pre>
</div>

<p>The configuration parameters in the Authorization module provide the
repository administrator with a choice as to where XACML repository-wide
policy files are stored.&nbsp;&nbsp; If you keep the default path
value,&nbsp; then the repository-wide policy directory will be created
at:&nbsp;
FEDORA_HOME/data/fedora-xacml-policies/repository-policies.&nbsp;&nbsp;
You can override this default with either a fully-qualified directory
path or a relative directory path of your choice.&nbsp;&nbsp; The policy
storage location work just like the digital object and datastream
storage locations that are also configured for the server (in
fedora.fcfg).&nbsp;&nbsp; It is expected that repository administrators
appropriately protect these directories so that they cannot be tampered
with.</p>
<br />

<p><b><i>Default Repository-Wide Policies</i></b>:&nbsp;</p>
<p>It should be noted that Fedora comes out-of-the-box with a set of
default repository-wide policies.&nbsp; The default policies are
automatically copied into the active policies storage location the first
time the Fedora repository server is started (i.e., copied into a
subdirectory named &quot;/default&quot;).&nbsp;&nbsp;<b><i> </i></b>It
is recommended that changes to the default repository-wide policies are
made with extreme care.&nbsp;&nbsp; These policies establish the
baseline authorization rules for Fedora.&nbsp; Refer to the
documentation below&nbsp; on <a href="#DEFAULT">default repository
policies </a>for a description of what each policy does.&nbsp;</p>

<p><b>NOTE! </b>&nbsp;&nbsp;Any changes to the default policies or your
own custom policies should be made in the /default subdirectory of the
configured location for repository-wide policies.&nbsp; The original
versions of the default policies are also maintained in the internal
fedora staging directory named
&quot;FEDORA_HOME/server/fedora-internal-use/&quot; from which the
default policies are copied into the configured location.&nbsp;&nbsp; <b><i>Do
not edit the policies that are stored in this internal staging
directory! </i></b>&nbsp; They are your record of how the default
policies shipped with Fedora.</p>
<br />

<p><b><i>Custom Repository-Wide Policies</i></b></p>

<p>You can create your own custom repository-wide policies and put them
in the repository-wide policy directory.&nbsp; You can also create your
own subdirectories under the repository-wide directory to organize your
policies.&nbsp;&nbsp; It is recommended that you do NOT put your custom
policies in the /default subdirectory that was created by the Fedora
server.&nbsp;&nbsp; This location is reserved for the policies that are
distributed with Fedora.&nbsp; Consult the Fedora <a
	href="XACMLPolicyGuide.htm">XACML Policy Writing Guide </a>for
instructions on authoring new custom policies and to view a set of
sample policies for Fedora.</p>

<p>Custom repository-wide policies can be written to deny/permit access
to Fedora API operations, to control access to groups of objects, or to
control access to objects with certain attributes under certain
conditions.&nbsp;&nbsp; It should be noted that custom repository-wide
policies can be also written to address a specific digital objects
(identified by PID).&nbsp;&nbsp; This is in contrast to storing or
referencing an object-specific policy inside the digital object's POLICY
datastream (described below).&nbsp; The disadvantage of putting an
object-specific policy in the repository-policies storage location is
that the policy is unnecessarily evaluated for requests that do not
pertain to the specific digital object it is about.&nbsp;&nbsp; This is
because repsoitory-wide policies are stored in memory and are evaluated
for every Fedora API request.&nbsp; As described below, there are better
places to store a policy that pertains to a single digital object (or a
small set of named digital objects).</p>
<br />

<h4>b. Storing Object-Specific Policies in a POLICY Datastream</h4>

<p>An object-specific policy can be stored inside a digital object
within the special reserved datastream whose ID is
&quot;POLICY&quot;.&nbsp;&nbsp; There are several benefits to storing
object-specific policies in the POLICY datastream.&nbsp; First, these
policies are only evaluated for those Fedora API requests that pertain
to the digital object in which the policy
&quot;resides.&quot;&nbsp;&nbsp; Policies that are stored in the POLICY
datastream are not loaded into memory upon startup of the Fedora server
(as are the repository-wide policies); therefore, the POLICY datastream
approach may be a way to enhance performance in cases where a large
number of object-specific policies will exist.&nbsp;&nbsp; Another
benefit is that the POLICY datastream storage strategy may provide for
easier distribution of policy management responsibilities&nbsp; For
example, authors or owners of particular digital objects can be granted
the rights to view and modify the POLICY datastream of their objects,
without having to obtain repository administrator privileges to modify
policies in a configured policy storage locations external to a
repository.</p>

<p>Unlike when an object-specific policy is placed in the
repository-wide policies directory, it is not necessary to specify the
an object PID in the target of the XACML policy target when the&nbsp;
policy resides in a POLICY datastream.&nbsp; The Fedora system will
automatically make this association during policy enforcement.&nbsp;</p>

<p><b><i>Policies as stored as Inline-XML (X) or Managed-Content (M)
Datastreams</i></b>&nbsp; One benefit of putting an object-specific
policy inside a digital object as a type X or M datastream is that the
policy is stored within the either in the object's XML wrapper file
(i.e., FOXML), or it is stored in the managed content datastream area of
the repository.&nbsp; In either case, the POLICY file itself is under
the direct custodianship of the Fedora repository.&nbsp;&nbsp; As such,
these policies are managed like any other X or M datastreams, and the
policies become <b><i>portable</i></b> with their parent digital objects
(e.g., the polcies goes with with an object, as datastream content, when
the object is exported from the repository).&nbsp;&nbsp;</p>

<p><b><i>Policies as Externally Referenced (E) or Redirected (R)
Datastreams</i></b>:&nbsp; One benefit of putting object-specific
policies in the POLICY datastream in a by-reference fashion is that
multiple digital objects can point to the same policy.&nbsp; In this
case, you probably do not want to have the target of the XACML policy
make reference particular digital object PIDs.&nbsp;&nbsp;&nbsp; In this
scenario, you can store the policy external to the digital objects to
which it pertains, and store the URL of the external policy location in
the E or R type datastream.&nbsp;&nbsp; Fedora resolves such URLs at
runtime, so when the policy enforcement module needs to evaluate the
XACML policy, Fedora will automatically retrieve the policy file from
its external location and pass it on the the policy enforcement module
for evaluation.&nbsp;</p>
</div>
<br />

<div class="Section1">
<h3><a name="CONFIG-ACTIVATE">2.3 Activating and Loading Repository-Wide
Policies</a></h3>

<p>Repository-wide policies are not considered <b><i>active</i></b>
unless they are placed in the configured storage location specified in
the Authorization module configuration (see fedora.fcfg).&nbsp;&nbsp;
Once policies are placed either directly in this directory, or within
subdirectories under it, they are able to be <b><i>loaded</i></b> by the
Fedora repository server.&nbsp;&nbsp; To put new custom policies into
play, simply add them to the configured repository-wide directory, or
subdirectories within it.&nbsp;&nbsp;&nbsp; To inactivate a policy,
remove it from the directory.&nbsp; To modify an existing policies, edit
the policy in the configured policy directories (or preferably, edit in
another location and replace the existing policy in the configured
policy directory).</p>

<p>To activate and load repository-wide policies take the following
steps:</p>

<ol start="1" type="1">
	<li><b>Validate</b> your policies using the <a
		href="../cmd-line/index.html#validate">validate-policy</a> command
	line utility&nbsp;<i>(optional, but recommended!)</i></li>
	<li><b>Activate</b> your policies by copying them into the configured
	storage location for repository-wide policies (configured in the
	Authorization module in fedora.fcfg).&nbsp;</li>
</ol>

<ol start="2" type="1">
	<ul>
		<li><a href="#STORE-REPO-WIDE">REPOSITORY-POLICIES-DIRECTORY </a>&nbsp;
		- put your custom repository-wide policies in any sub-directory under
		this configured directory</li>
	</ul>
</ol>

<ol start="3" type="1">
	<li><b>Load</b> your policies by starting the Fedora server (using the
	<a href="../cmd-line/index.html#start">fedora-start</a> command line
	utility).&nbsp; If the server is already started, run the <a
		href="../cmd-line/index.html#reload"> fedora-reload-policies</a>
	command line utility.&nbsp;</li>
</ol>

<p>All repository-wide policies are loaded into the Fedora server's
memory every time the server is started.&nbsp; For obvious performance
reasons, object-specific policies stored in the POLICY datastreams of
digital objects are not pre-loaded; instead they are loaded on an
as-needed basis (i.e., when a request for that object is made).&nbsp;</p>

<p><br>
<b>WARNING: </b>It should be noted that the <b><i>first time </i></b>the
Fedora server is started, the <b><i>default </i></b>repository-wide
policies are copied into a subdirectory named &quot;/default&quot; under
the repository-wide policy storage location.&nbsp;&nbsp;To make sure
this happens correctly, you should initially start the server with the
default value for the server hostname (see &quot;fedoraServerHost&quot;
in fedora.fcfg).&nbsp; The default is 127.0.0.1 (or
&quot;localhost&quot;).&nbsp;&nbsp; This initial starting of the server
as &quot;localhost&quot; is necessary to make sure that the default
XACML policies are properly configured and placed in the repository-wide
policy directory.&nbsp;&nbsp; Once the default policies are in place,
you can shutdown the server and change the hostname at any time.&nbsp;
If you subsequently change the hostname to something other than
&quot;localhost&quot; you must manually update some of the default
policies to reflect the fixed IP address of your server.&nbsp; In the
following default policies, you will see the loopback IP address of
127.0.0.1 in the policy condition:</p>

<p><br />
<i>(1) deny-apim-if-not-localhost.xml, <br>
(2) deny-reloadPolicies-if-not-localhost.xml<br>
(3) deny-serverShutdown-if-not-localhost.xml</i>)</p>
<br />
<p>Simply add the new IP address to the policy rule as follows:</p>
<br />

<div class="code"><pre>&lt;Rule RuleId=&quot;1&quot; Effect=&quot;Deny&quot;&gt;
  &lt;Condition FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:not&quot;&gt;
    &lt;Apply FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:or&quot;&gt;
      &lt;Apply FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of&quot;&gt;
        &lt;EnvironmentAttributeDesignator AttributeId=&quot;urn:fedora:names:fedora:2.1:environment:httpRequest:clientIpAddress&quot; DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
        &lt;Apply FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-bag&quot;&gt;
          &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;127.0.0.1&lt;/AttributeValue&gt;
          <b>&lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;111.22.333.4&lt;/AttributeValue&gt;</b>
        &lt;/Apply&gt;
      &lt;/Apply&gt;
    &lt;/Apply&gt;
  &lt;/Condition&gt;
&lt;/Rule&gt;</pre></div>
</div>
<br />

<div class="Section1">
<h3>2<a name="CONFIG-VALIDATE">.4 Enabling/Disabling Policy Validation</a></h3>

<p>There are several parameters in the Authorization module
configuration that control whether Fedora will attempt to validate
policies against the XML schema for XACML.&nbsp;&nbsp;&nbsp;</p>

<div class="code"><pre>&lt;param name=&quot;POLICY-SCHEMA-PATH&quot; value=&quot;xsd/cs-xacml-schema-policy-01.xsd&quot;/&gt;Â Â Â  </pre>
<pre>&lt;param name=&quot;VALIDATE-REPOSITORY-POLICIES&quot; value=&quot;true&quot;/&gt;</pre>
<pre>&lt;param name=&quot;VALIDATE-OBJECT-POLICIES-FROM-DATASTREAM&quot; value=&quot;false&quot;/&gt;</pre>
<pre>&lt;param name=&quot;VALIDATE-SURROGATE-POLICIES&quot; value=&quot;false&quot;/&gt;</pre>
</div>

<p>By default all repository-wide policies will be validated by the
repository when they are loaded.&nbsp; In general it is recommended that
all new policies are validated before they are put into the active
policy location.&nbsp; Use the <a href="../cmd-line/index.html#validate">validate-policy</a>
command line utility to validate an XACML policy file. A policy failing
validation would result in the following situation, according to the
stated case.</p>

<ul type="disc">
	<li>repository policy: authorization module failure at server startup
	time, server not properly started</li>
</ul>

<p>Object policies are not set to validate by default because they are
loaded dynamically at each use, and neither testing to prove adequate
performance nor caching to ensure it has been done. This policy
validation check can be enabled by the appropriate fedora.fcfg setting.
</p>
</div>
<br />

<div class="Section1">
<h3>2<a name="CONFIG-SURROG">.5 Surrogate feature no longer requires
policies.</a></h3>

<p>This is an<b><i> experimental feature</i></b> continued with Fedora
2.2 that enables a higher level application or service (e.g., a Web
front end, middleware, or other web service) to authenticate to Fedora
with its own identity, but pass along the identity of an end-user that
authenticated with the service.&nbsp;&nbsp; The higher level application
or service is thus acting as a &quot;surrogate&quot; for the ultimate
end user.&nbsp;&nbsp; The surrogate user can pass through to Fedora the
identity of the end-user it is representing in the HTTP request header
(using the From: attribute).&nbsp; If Fedora authenticates the identity
of the service-as-surrogate, then the identity of the ultimate end user
can be used in XACML policies.&nbsp;&nbsp;</p>

<p>Refer to the <a href="securingrepo.html#AUTHN">Authentication and
User Attributes</a> section of the <a href="securingrepo.html">Securing
Your Repository</a> guide for information on configuring servlet filters
in support of the surrogate feature.&nbsp;&nbsp;</p>

<h2><a name="IMPL">3 Implementation of the Fedora Policy Enforcement
Module</a></h2>

<h2>&nbsp;</h2>
<h3>3<a name="IMPL-PDP-PEP">.1&nbsp; Policy Determination Point (PDP)
and Policy Enforcement Point (PEP)</a></h3>

<p>According to the OASIS XACML specification, "an application functions
in the role of the Policy Enforcement Point (PEP) if it guards access to
a set of resources and asks the Policy Determination Point (PDP) for an
authorization decision.&nbsp; The PEP MUST abide by the authorization
decision in the following way:&nbsp; A PEP SHALL allow access to the
resource only if a valid XACML response of "Permit" is returned by the
PDP.&nbsp; The PEP SHALL deny access to the resource in all other
cases.&nbsp; An XACML response of "Permit" SHALL be considered valid
only if the PEP understands all of the obligations contained in the
response."&nbsp;&nbsp;</p>

<p>The Fedora Policy Enforcement Module fulfills the responsibilities of
both the PEP, except that for 2.1, obligations are ignored. (But neither
are any coded in the default policies.)&nbsp; The Fedora module wraps
the Sun XACML implementation of the PDP.&nbsp;&nbsp; Fedora module also
implements custom attribute finders and a custom PEP.</p>

<p>The PDP determines the set of policies that are applicable to any
given Fedora service request.&nbsp; Remember the PDP determines whether
a policy is applicable by comparing the Subject/Resource/Action
attribute designations in a Policy Target to the context of an incoming
Fedora service request (i.e., attributes that describe the Fedora
service request, the user/subject, the desired
object/datastream/dissemination, and the runtime
environment).&nbsp;&nbsp; &nbsp;Repository-wide policies are always in
play and will be evaluated by the PDP to determine whether they are
applicable to the particular incoming Fedora service request.&nbsp;
Object-specific policies if the incoming request refers to an object by
its PID and there exists an object-specific policy mentioning that
PID.&nbsp; <b><i>PDP makes the decision of deny/permit/indeterminate,
and then the PEP makes sure to enforce this decision for the incoming
Fedora API request.</i></b></p>
<br />

<p><b><i>NOTE:&nbsp;</i></b><i>To quiet the Sun XACML engine's INFO
messages, a logging.properties file is included with the Fedora
distribution, &nbsp;edited to print only SEVERE messages to the console.
Fedora then starts Java using that logging.properties file. &nbsp;The
original file, as distributed with JDK 1.4.2.8, prints INFO (and more
severe) messages, making the console a bit &nbsp;chatty.&nbsp; To revert
to the original logging behavior, edit fedora-start.bat (Windows) or
fedora.sh (Unix), and remove the logging.properties from the java vm
arguments (see -D flags).</i></p>
</div>
<br />

<div class="Section1">
<h3><a name="IMPL-ALGORITHM">3.2&nbsp; Understanding the XACML Policy
Combining Algorithm</a></h3>

<p>Policy writers must understand the interaction effect of multiple
XACML policies that are in scope for any particular action.&nbsp; The
Fedora configuration file (fedora.fcfg) sets the policy combining
algorithm that will be used by the Policy Enforcement Module in
evaluating sets of policies.&nbsp; In the the Fedora server
configuration file (fedora.fcfg) note the following parameter in the
section for the Authorization module::</p>

<div class="code"><pre>&lt;param name=&quot;XACML-COMBINING-ALGORITHM&quot; value=&quot;com.sun.xacml.combine.OrderedDenyOverridesPolicyAlg&quot;/&gt;</pre>
</div>

<p>This parameter sets the XACML policy combining algorithm that
controls how the Fedora Policy Enforcement Module will deal with
multiple policies that may be applicable to a Fedora service
request.&nbsp; &nbsp;The default value in Fedora is the "Ordered Deny
Overrides" policy combining algorithm.&nbsp; It allows a single
evaluation of <b><i>deny</i></b> <b><i>to take precedence</i></b> over
any number of permit, not applicable or indeterminate results.&nbsp;
Note that this uses the regular Deny Overrides implementation since it
is also ordered.&nbsp;&nbsp; Consult the OASIS and Sun XACML
documentation for a description of alternative combining
algorithms.&nbsp; Note that the default policies assume and require this
algorithm. Generally policies are developed with an algorithm in mind.</p>

<p>In the PDP, policies are matched based on their applicability to an
incoming service request.&nbsp;&nbsp; All policies that are applicable
are combined programmatically and dynamically per request into a
PolicySet.&nbsp; To estimate the number of policies that may be in the
PolicySet for a given service request, consider N to be the number of
policies configured in Fedoraâ€™s &nbsp;repository-wide policy storage
location.&nbsp; Then we have the following possible number of policies
in a PolicySet for the PDP to consider:</p>
<br />

<p>N :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # of policies if a service request
<b><i>does not refer to a particular digital object</i></b></p>

<p>N :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # of policies if a service request
<b><i>refers to an</i></b> <b><i>object,</i></b> <b><i>but there is no
object-specific policy for that object</i></b></p>

<p>N+1:&nbsp;&nbsp; # of policies if a service request <b><i>refers to
an</i></b> <b><i>object that has an object-specific policy datastream,
but has no object-specific policy in the object policies directory</i></b></p>

<p>N+1:&nbsp;&nbsp; # of policies if a service request <b><i>refers to
an</i></b> <b><i>object that has an object-specific policy in the object
policies directory, but has no object-specific policy datastream</i></b></p>

<p>N+2:&nbsp;&nbsp; # of policies if a service request<b><i> refers to
an</i></b> <b><i>object that has an object-specific policy datastream
and a policy in the object-policies directory</i></b></p>
</div>
<br />

<div class="Section1">
<h3><a name="IMPL-DECISION">3.3 A Simplified Understanding of the
Authorization Decision</a></h3>

<p>For an incoming service request to succeed, there must be an explicit
permit and the absence of a deny;&nbsp; the absence of a deny is not
enough to permit an action &nbsp; By default, if any of the applicable
policies in a Policy Set yield a deny, the requesting subject will be
denied access, even if some other policy permitted the action.&nbsp; In
other words, deny will prevail over permit.&nbsp;&nbsp; Also, if there
is a policy in the set that is evaluated as &quot;Indeterminate,&quot;
then the result of that policy evaluation will be considered a
deny.&nbsp; A policy can be evaluated as Indeterminate if there was an
error during policy evaluation.&nbsp; Also, a policy can be evaluated as
Indeterminate if there is a required attribute specified in the policy
that did not exist in the context of the incoming requests.&nbsp;&nbsp;
See the section of <a href="#POLICY-OPT-ATTRS">Required vs. Optional
Attributes</a> for more details.&nbsp;</p>

<p>For the purposes of a simple understanding of the Fedora Policy
Enforcement module, things work like this:</p>

<div class="code"><pre><i>&nbsp;NOTE:</i>  =0  <i>means NO policy in a policy set evaluated to that result; </i>
        =1  <i>means one or more policies in a policy set evaluated to that result</i>
  
  
  
========= POLICY SET RESULTS =======         === FINAL DECISION ===
  
DENY=0Â Â  INDETERMINATE=0Â Â Â  PERMIT=0         result is DENY
DENY=1Â Â  INDETERMINATE=0Â Â Â  PERMIT=0         result is DENY
DENY=1Â Â  INDETERMINATE=0Â Â Â  PERMIT=1         result is DENYÂ  (denial trumps permit)
DENY=0Â Â  INDETERMINATE=0Â Â Â  PERMIT=1         result is <b>PERMIT</b>
DENY=0Â Â  INDETERMINATE=1Â Â Â  PERMIT=1         result is DENYÂ  (indeterminate is treated as denial which trumps permit)
DENY=0Â Â  INDETERMINATE=1Â Â Â  PERMIT=0         result is DENY</pre></div>
</div>
<br />

<div class="Section1">
<h2>&nbsp;</h2>
<p>Put another way... assuming the default policy combining algorithm
for Fedora is &quot;Deny Overrides&quot;, an action is Permitted or
Denied depending on the evaluation of the various policies, as follows:<br>
&nbsp;</p>

<p><b>Permit requires --ALL-- of the following conditions to be TRUE:</b></p>

<ul type="disc">
	<li>at least one policy was evaluated to Permit the action</li>
	<li>NO policy must evaluate to explicitly Deny the action</li>
	<li>NO policy must evaluate as Indeterminate for the action</li>
	<li>NO error or unknown result is returned by the Sun XACML engine</li>
</ul>

<p><b>Deny only requires --ONE-- of the following conditions to be TRUE:</b></p>

<ul type="disc">
	<li>at least one policy was evaluated to explicitly Deny the action</li>
	<li>at least one policy was evaluated to be Indeterminate for the
	action</li>
	<li>the Sun XACML engine returned a unknown result (an error or a
	return value that is not in the XACML specification)</li>
</ul>
</div>
<br />

<div class="Section1">
<h3><a name="IMPL-PDP">3.4&nbsp; PDP Implementation Details</a></h3>

<p>We can understand the results of the PDP's evaluation of a policy
set&nbsp;from three perspectives:&nbsp; (1) the Sun XACML engine, (2)
the Fedora wrapper of Sun XACML, and (3) the bottom line outcome.</p>

<p><b>(1)&nbsp; PDP (Sun XACML&nbsp;engine perspective):&nbsp;&nbsp;</b></p>
<p>The Sun XACML engine, which underlies the Fedora Policy Enforcement
Module,&nbsp; will evaluate a Policy Set and return a
decision.&nbsp;&nbsp; Refer to the <a
	href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">OASIS
XACML Specification</a> and the <a
	href="http://sunxacml.sourceforge.net">Sun XACML documentation</a> for
details.&nbsp;</p>

<p>In making its authorization decision, the Sun XACML engine will
return a single result from its evaluation of a Policy.&nbsp; The result
will be one of the following:</p>

<ul type="disc">
	<li><b>Permit</b> - returned if a policy rule was applicable and thus
	it returned its permit effect.</li>
	<li><b>Deny</b> - returned if a policy rule was applicable and thus
	returned its denial effect.</li>
	<li><b>Indeterminate</b> - returned if an attribute value that was
	needed to evaluate a rule could not be found, or another error
	prevented processing.</li>
	<li><b>NotApplicable</b> - returned if no rule applied and so no effect
	could be returned.</li>
</ul>

<p>Given the default policy combining algorithm of&nbsp; &quot;Ordered
Deny Overrides,&quot; the PDP will make its final decision for a policy
set such that <b>&nbsp;DENY</b> will prevail over PERMIT.&nbsp;&nbsp; If
one or more policies evaluate to Deny, Sun XACML gives a verdict of
DENY.&nbsp; If one or more policies evaluate to Indeterminate, and no
policies evaluate to Deny, the verdict is INDETERMINATE.&nbsp; If one or
more policies evaluate to Permit, and no policies evaluate to either
Deny or Indeterminate, the verdict is PERMIT.&nbsp; If one or more
policies evaluate to NotApplicable, and no policies evaluate to Permit
or Deny or Indeterminate, the verdict is NOTAPPLICABLE.&nbsp;</p>

<p><b>(2)&nbsp; PEP (Fedora wrapper&nbsp;perspective):&nbsp;&nbsp;&nbsp;</b></p>
<p>The Fedora wrapper respects the verdict of the Sun XACML PDP, which
should usually be PERMIT or DENY, given our default set of
policies.&nbsp; But, for safety, the Fedora wrapper code imposes a DENY
result in any of several extraordinary cases:&nbsp; (1) if somehow Sun
XACML returned an unexpected final result of Indeterminate or
NotApplicable, perhaps due to a policy written incorrectly, (2) if Sun
XACML returned no result at all, (3) if Sun XACML returned a result
which is not defined by OASIS XACML or Sun XACML standards (the sunxacml
Java interface uses int to code the results, so sunxacml could return
bad results), or (4) if authorization processing results in a exception
being thrown.</p>

<p><b>3)&nbsp; Combined (Bottom line perspective):&nbsp; </b></p>
<p>As a rule, a policy set evaluates to PERMIT when at least one policy
in the set evaluates to Permit and no policies evaluating to Deny or
Indeterminate.&nbsp; Otherwise, the policy set evaluates to DENY.&nbsp;
</p>

<p>Specifically:</p>
<p>a) DENY occurs when there is at least one policy that evaluates to
Deny or an Indeterminate.</p>
<p>b) DENY occurs if no policy evaluates to Permit.&nbsp; A DENY also
occurs in several exceptional situations:</p>
<p>a) DENY occurs when no policies were found to be applicable (all
evaluate to NotApplicable) or the related case of there being no
policies at all configured with Fedora</p>
<p>b) DENY occurs when errors occurred during authorization processing,
including no or bad results obtained.<br>
&nbsp;</p>
</div>
<br />

<div class="Section1">
<h3><a name="IMPL-PEP">3.5&nbsp; Fedora PEP Implementation Details</a></h3>
<p>Fedora's Policy Enforcement Point (PEP) builds a minimal request for
the Sun XACML engine to evaluate.&nbsp; One job of the Fedora PEP is to
gather up all of the Subject/Resource/Action/Environment attributes that
are relevant for an incoming service requests.&nbsp;&nbsp; The values of
this attributes are the key to determining what policies are in scope
for an incoming service request.&nbsp;&nbsp; To gather up all relevant
attributes,&nbsp; the Fedora PEP has two custom &quot;attribute
finder&quot; modules that interact with the Sun XACML engine.</p>

<ul>
	<li>
	<p>The <b>ContextAttributeFinderModule</b> has the job of obtaining
	attributes that are stored in the enhanced Fedora Context object that
	is associated with an incoming Fedora service
	request.&nbsp;&nbsp;&nbsp; Attributes that originate with an incoming
	service requests can be Subject attributes (i.e., attributes of the
	requesting user/agent), Action attributes (i.e., the identity of the
	Fedora API operation that is the basis of the request), Resource
	attributes (i.e.,&nbsp; attributes that identify specific
	objects/datastreams/disseminations that are being requested, and
	Environment attributes (i.e., attributes that describe the runtime
	environment of the incoming request, like the current date/time or the
	server IP address).&nbsp;&nbsp; It will honor a callback, even for an
	attribute which hasn't been explicitly coded, so can provide arbitrary
	attributes (e.g., from LDAP lookup in a JAAS login module, from
	Shibboleth via a servlet filter).&nbsp; [There are a few attributes
	which it explicitly doesn't serve, to prevent stack overflow on
	improper recursion, or because the attributes are known to be provided
	in the xacml request itself.]</p>
	</li>

	<li>
	<p>The <b>ResourceAttributeFinderModule</b> has the job of obtaining
	all relevant attributes about Fedora resources (i.e., digital objects,
	datastreams, and disseminations) for resources that are in scope for an
	incoming request.&nbsp;&nbsp; While a few attributes of a resource are
	picked up from the incoming request itself (typically, the identity of
	a resource like a PID or a datastream Id), the
	ResourceAttributeFinderModule gets all other attributes about such
	resources by introspecting on actual digital objects in the
	repository.&nbsp;</p>
	</li>

	<li>
	<p>The ContextAttributeFinderModule supplies environment values, named
	into the Fedora XACML URN namespace. An <b>EnvironmentAttributeFinderModule</b>
	may be added for full compliance with XACML requirement that
	environment attributes be serviced which are named into its namespace
	XACML's namespace itself.</p>
	</li>
</ul>
</div>
<br />

<div class="Section1">
<h2>&nbsp;</h2>
<h2><a name="ATTR">4 How to Bind User Attributes into the Fedora Policy
Enforcement Module</a></h2>
<p>&nbsp;The availability of user identity and attributes depends on the
authentication configuration option selected for the
repository.&nbsp;&nbsp; Refer to the <a href="securingrepo.html#AUTHN">Authentication
and User Attributes</a> section of the <a href="securingrepo.html">Securing
Your Repository</a> guide for information on authentication
configuration options.&nbsp;&nbsp;&nbsp;&nbsp; In terms of understanding
what user attributes can be referenced for Subjects in an XACML policy,
you must first know what the sources of authentication information are
for the repository.&nbsp;&nbsp;&nbsp;&nbsp; The Fedora XACML-based
Policy Enforcement module will automatically be able to obtain
attributes from one or more of following authentication sources when
they are configured as described in <a href="securingrepo.html#AUTHN">Authentication
and User Attributes</a>.</p>
</div>
<br />

<div class="Section1">
<h3><a name="">4.1&nbsp; fedora-users attributes</a></h3>
<p>In Fedora, XACML policies can refer to user identity and attribute
information that is specified within the fedora-users.xml
file.&nbsp;&nbsp; This file is one of the Fedora configuration files and
is created initially on running the installer. It contains username and
password information about &quot;authenticated&quot; users. Attributes
can also be assigned to user entries. These attributes are then
available as attributes in related XACML policies.</p>
<p>By default, the fedora-users file contains the following users,
passwords, and attributes:</p>

<div class="code"><pre>&lt;users&gt;
  &lt;user name=&quot;fedoraAdmin&quot; password=&quot;fedoraAdmin&quot; &gt;
    &lt;attribute name=&quot;fedoraRole&quot; &gt;
      &lt;value&gt;administrator&lt;/value&gt;
    &lt;/attribute&gt;
  &lt;/user&gt;
  &lt;user name=&quot;fedoraIntCallUser&quot; password=&quot;changeme&quot; &gt;
    &lt;attribute name=&quot;fedoraRole&quot; &gt;
      &lt;value&gt;fedoraInternalCall-1&lt;/value&gt;
      &lt;value&gt;fedoraInternalCall-2&lt;/value&gt;
    &lt;/attribute&gt;
  &lt;/user&gt;
&lt;/users&gt;</pre></div>

<p>Notice that each attribute has a name and can have multiple values.
The cases of one or two values are shown; not shown here is that an
attribute can have any number of values, including none, depending on
your need. The second of these entries is for Fedora internal use, and
should be left intact as installed. You will probably leave the first
entry in place, also as-is. But if you change the default policies, you
may require additional values of the <em>fedoraRole</em> attribute, or
additional named attributes with their own values. Additional users
(with unique names) can be added with attributes as needed. This is a
convenient place to define repository managers, a small number of users,
or a surrogate user. An example of an additional user follows:
&nbsp;&nbsp;</p>

<div class="code"><pre>&lt;users&gt;
  &lt;user name=&quot;testuser1&quot; password=&quot;testuser1&quot; &gt;
    &lt;attribute name=&quot;<b>someAttribute</b>&quot; &gt;
      &lt;value&gt;<b>xyz</b>&lt;/value&gt;
    &lt;/attribute&gt;
    &lt;attribute name=&quot;<b>fedoraRole</b>&quot; &gt;
      &lt;value&gt;<b>researcher</b>&lt;/value&gt;
    &lt;/attribute&gt;
  &lt;/user&gt;
&lt;/users&gt;</pre></div>

<p>The above example indicates that the user has two attributes (an
attribute named<b> &quot;someAttriibute&quot;</b> whose value is <i>xyz</i>,
and an attribute named<b> &quot;fedoraRole&quot;</b> whose value is <i>researcher</i>).&nbsp;
These attribute names can be used in SubjectAttributeDesignator
specifications in XACML policies and the values can be used in
AttributeValue specifications in policies.&nbsp;&nbsp; Below is a
snippet of an XACML policy that refers to attributes from fedora-users
(refer to the <a href="XACMLPolicyGuide.htm">Fedora XACML Policy Guide</a>
for more info on policy syntax):</p>

<div class="code"><pre>&lt;Subjects&gt;
  &lt;Subject&gt;
    &lt;SubjectMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
      &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>administrator</b>&lt;/AttributeValue&gt;
      &lt;SubjectAttributeDesignator AttributeId=&quot;<b>fedoraRole</b>&quot; MustBePresent=&quot;false&quot; 
          DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
    &lt;/SubjectMatch&gt;
  &lt;/Subject&gt;
&lt;/Subjects&gt;</pre></div>
</div>
<br />

<div class="Section1">
<h3><a name="ATTR2">4.2&nbsp; LDAP attributes</a></h3>
<p>In Fedora, XACML policies can refer to user attribute names and
values that are registered in an LDAP that is configured with Fedora's
Ldap servlet filter.&nbsp;&nbsp; Refer to the <a
	href="securingrepo.html#AUTHN">Authentication and User Attributes</a>
section of the <a href="securingrepo.html">Securing Your Repository</a>
guide for information on servlet filter configuration
options.&nbsp;&nbsp; Given that an LDAP is properly configured with
Fedora, the Fedora XACML-based Policy Enforcement module will be able to
access LDAP user attributes, which means that you can refer to LDAP
attributes in reference to a Subject in a policy, as shown in the
following XACML snippet (refer to the <a href="XACMLPolicyGuide.htm">Fedora
XACML Policy Guide</a> for more info on policy syntax)::</p>

<div class="code"><pre>&lt;Rule RuleId=&quot;1&quot; Effect=&quot;Deny&quot;&gt;
  &lt;Condition FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of&quot;&gt;
    &lt;SubjectAttributeDesignator DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot; AttributeId=&quot;<b>ou</b>&quot;/&gt;
    &lt;Apply FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-bag&quot;&gt;
      &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>Lb-Info Technology</b>&lt;/AttributeValue&gt;
      &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>Lb-Univ Librarian-General</b>&lt;/AttributeValue&gt;
    &lt;/Apply&gt;
  &lt;/Condition&gt;
&lt;/Rule&gt;</pre></div>

<p>In the above example, the SubjectAttributeDesignator refers to an
LDAP attribute name (&quot;ou&quot;), which refers to the university
organizational department that a user belongs to.&nbsp; The policy rule
applies a function to set up the condition that the value of the
&quot;ou&quot; attribute must be one of the listed values (&quot;Lb-Info
Technology&quot; or Lb-Univ Librarian-General&quot;).&nbsp;</p>
</div>
<br />

<div class="Section1">
<h3><a name="ATTR3">4.3&nbsp; Shibboleth attributes via an HTTP Servlet
Filter</a></h3>
<p>There are cases when an application may obtain authenticated user
attributes in an application or service layer outside the context of the
Fedora repository service.&nbsp; Fedora provides a simple means of
getting these attributes into the Fedora repository service so they can
be used by the Fedora XACML policy enforcement module.&nbsp; To support
the ability for upstream applications or services to send these user
attributes into a repository, Fedora will recognize a special HTTP
servlet request attribute named after the value of static final String
constant fedora.server.Context.FEDORA_AUX_SUBJECT_ATTRIBUTES.</p>

<p>The Fedora repository service will automatically look for an HTTP
servlet request attribute named after this constant.&nbsp; The Fedora
code now takes a request attribute found under that name, as a Map
giving name and values of subject attributes. Currently, name must be a
String and this is unlikely to change. Value must be a String, and later
this might be relaxed to include String[], to allow&nbsp; attributes
with multiple values.&nbsp; Other types of value are not serviced. The
effect of having a key =&gt; value pair &quot;a&quot; =&gt;
&quot;b&quot; in the Map&nbsp; is the same as having a Tomcat role
&quot;a=b&quot;, with the exception that the effect of having the same
attribute key redefined both places is right now undefined.&nbsp; So
your servlet filter needs only create the map and populate it, and put
it into an HTTP servlet request as attribute named after
fedora.server.Context.FEDORA_AUX_SUBJECT_ATTRIBUTES.&nbsp; Fedora will
then&nbsp;look for it, and use the attributes in XACML-based
authorization.&nbsp;</p>

<p>This approach was initially developed to support the OhioLink <a
	href="http://drc-dev.ohiolink.edu/browser/fedora-shib-filter/trunk/">Shibboleth
servlet filter </a>that will be available to the Fedora community from
the OhioLink implementation.&nbsp; Although full Shibboleth integration
with Fedora will be in future releases of Fedora, the ability to send
attributes into Fedora via a servlet filter is a way to get started with
using Shibboleth-acquired attributes in Fedora XACML policy
enforcement.&nbsp; It should be noted that this means of getting
attributes into Fedora can be used with any subject attribute source
(i.e., it remains source-neutral and doesn't favor Shibboleth or any
other particular scheme).</p>
</div>
<br />

<div class="Section1">
<h2><a name="DEFAULT">5 Default Repository Policies for Fedora</a></h2>
<h3>5.1 Default Access Control Policies</h3>
<p>out-of-the-box, the Fedora repository will have a default set of
access control policies that provide for a highly restricted management
service (API-M), an open access service&nbsp; (API-A), and an open OAI
provider service.&nbsp;&nbsp; The default access control policies
establish the same level of out-of-the-box security on the repository
that was previously configured for Fedora 2.0 release; however, as of
Fedora 2.1 these basic access controls are now specified as XACML
policies.&nbsp;&nbsp; The default access control policies can be found
within the Fedora software distribution in the following directory:
&nbsp;</p>

<p><b>FEDORA_HOME/data/fedora-xacml-policies/repository-policies/default</b></p>

<p>The first time the Fedora repository server is started, these
policies will be automatically copied into the official <a
	href="#CONFIG-STORE">repository-wide policy storage location </a>that
was specified in the Fedora configuration file (fedora.fcfg).&nbsp; The
policies are activated once they are copied into this location.&nbsp;</p>
</div>
<br />

<div class="Section1">
<table border="1" cellpadding="0" width="100%">
	<tr>
		<td width="41" class="Normal">&nbsp;</td>
		<td width="64" class="Normal">
		<p><b>Service</b></p>
		</td>
		<td width="260" class="Normal">
		<p><b>&nbsp;XACML Policy File</b></p>
		</td>
		<td class="Normal">
		<p><b>&nbsp; Policy Description</b></p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>1</p>
		</td>
		<td width="64" class="Normal">
		<p>any</p>
		</td>
		<td width="260" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/permit-anything-to-administrator.xml">
		permit-anything-to-administrator.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;positive policy&quot; that permits the Fedora
		administrator to have access to any operation on any Fedora repository
		service (API-M, API-A, OAI, RISearch).&nbsp; By default the Fedora
		administrator is configured in the default Tomcat user credentials
		file (tomcat-users.xml).</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>2</p>
		</td>
		<td width="64" class="Normal">
		<p>API-M</p>
		</td>
		<td width="260" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/deny-apim-if-not-localhost.xml">
		deny-apim-if-not-localhost.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;negative policy&quot; that denies access to API-M
		operations that are not made from the IP address of the machine on
		which the Fedora repository is running on.&nbsp;&nbsp; In other words,
		the policy will not allow API-M requests from hosts other than
		&quot;localhost.&quot;</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>3</p>
		</td>
		<td width="64" class="Normal">
		<p>API-A</p>
		</td>
		<td width="260" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/permit-apia-unrestricted.xml">
		permit-apia-unrestricted.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;positive policy&quot; that permits unrestricted
		access to API-A.&nbsp; In other words, API-A operations are completely
		open for use by any user/agent.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4</p>
		</td>
		<td width="59" class="Normal">
		<p>OAI</p>
		</td>
		<td width="423" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/permit-oai-unrestricted.xml">
		permit-oai-unrestricted.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;positive policy&quot; that permits unrestricted
		access to the default OAI provider interface to the Fedora
		repository.&nbsp; In other words, OAI-PMH operations are completely
		open for use by any user/agent.&nbsp; (Note, this does not control
		access to the stand-alone PROAI service that is distributed with
		Fedora 2.1.&nbsp; PROAI is a stand-alone web application that must be
		secured separately.</p>
		</td>
	</tr>
</table>
<br />

<p>A review of how the policy combining algorithm works, will reveal
that access to a service operation cannot occur unless access is <b><i>expressly
permitted.</i></b>&nbsp;&nbsp; The net effect of the default access
control policies is that the administrator is expressly permitted to do
anything (with the restriction of having to make API-M requests from the
same IP address that the server runs on),&nbsp; and all users are
expressly permitted access to API-A and OAI service requests.</p>
</div>
<br />

<div class="Section1">
<h3>5.2&nbsp; Default Utility Policies</h3>
<p>Generally, the default repository utility policies <b><i>should not
be removed</i></b>.&nbsp; They enforce core and crucial protections of
the repository. Considerate understanding of how they work should
proceed any (unlikely) needed editing. For example, consider and edit to
permit other IPs than localhost, as opposed simply to deleting the
policy.</p>

<table border="1" cellpadding="0" width="100%">
	<tr>
		<td width="41" class="Normal">&nbsp;</td>
		<td width="78" class="Normal">
		<p><b>Service</b></p>
		</td>
		<td width="416" class="Normal">
		<p><b>&nbsp; XACML Policy File</b></p>
		</td>
		<td class="Normal">
		<p><b>&nbsp; Policy Description</b></p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>1</p>
		</td>
		<td width="78" class="Normal">
		<p>serverAdmin</p>
		</td>
		<td width="416" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/deny-policy-management-if-not-administrator.xml">
		deny-policy-management-if-not-administrator.xml</a></p>
		</td>
		<td class="Normal">&nbsp;</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>2</p>
		</td>
		<td width="78" class="Normal">
		<p>any</p>
		</td>
		<td width="416" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/deny-inactive-or-deleted-disseminations-if-not-administrator.xml">
		deny-inactive-or-deleted-disseminations-if-not-administrator.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;negative policy&quot; that will deny all access to
		inactive/deleted disseminations if the user/agent is not the Fedora
		administrator.&nbsp;&nbsp; Unlike purged disseminations,
		inactive/deleted disseminations still exist, but they are just marked
		as inactive/deleted.&nbsp;&nbsp; As such they should not be available
		to users.&nbsp; The exception is that the Fedora administrator is
		allowed to access them.&nbsp;</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>3</p>
		</td>
		<td width="78" class="Normal">
		<p>any</p>
		</td>
		<td width="416" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/deny-inactive-or-deleted-objects-or-datastreams-if-not-administrator.xml">
		deny-inactive-or-deleted-objects-or-datastreams-if-not-administrator.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;negative policy&quot; that will deny all access to
		inactive/deleted datastreams if the user/agent is not the Fedora
		administrator.&nbsp;&nbsp; Unlike purged objects/datastreams,
		inactive/deleted objects/datastreams still exist, but they are just
		marked as inactive/deleted.&nbsp;&nbsp; As such they should not be
		available to users.&nbsp; The exception is that the Fedora
		administrator is allowed to access them.&nbsp;</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>4</p>
		</td>
		<td width="78" class="Normal">
		<p>API-M</p>
		</td>
		<td width="416" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/deny-purge-datastream-if-active-or-inactive.xml">
		deny-purge-datastream-if-active-or-inactive.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;negative policy&quot; that will ensure that
		datastreams cannot be purged (permanently removed) unless they are in
		the deleted state.&nbsp; Purging of active or inactive datastreams is
		not allowed.&nbsp;</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>5</p>
		</td>
		<td width="78" class="Normal">
		<p>API-M</p>
		</td>
		<td width="416" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/deny-purge-object-if-active-or-inactive.xml">
		deny-purge-object-if-active-or-inactive.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;negative policy&quot; that will ensure that objects
		cannot be purged (permanently removed) unless they are in the
		&quot;deleted&quot; state.&nbsp; Purging of active or inactive objects
		not allowed.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>6</p>
		</td>
		<td width="78" class="Normal">
		<p>serverAdmin</p>
		</td>
		<td width="416" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/deny-reloadPolicies-if-not-localhost.xml">
		deny-reloadPolicies-if-not-localhost.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;negative policy&quot; that will deny requests to
		reload policies (i.e., policy reactivation) if this requests is not
		initiated from the IP address of the machine on which the repository
		is running (i.e., localhost).</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>7</p>
		</td>
		<td width="78" class="Normal">
		<p>serverAdmin</p>
		</td>
		<td width="416" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/deny-serverShutdown-if-not-localhost.xml">
		deny-serverShutdown-if-not-localhost.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;negative policy&quot; that will deny requests to
		shutdown the Fedora server if this requests is not initiated from the
		IP address of the machine on which the repository is running (i.e.,
		localhost).</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>8</p>
		</td>
		<td width="78" class="Normal">
		<p>serverAdmin</p>
		</td>
		<td width="416" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/permit-adminPing-unrestricted.xml">
		permit-adminPing-unrestricted.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;positive policy&quot; that permits unrestricted
		access for pinging of the Fedora server.</p>
		</td>
	</tr>
	<tr>
		<td width="41" class="Normal">
		<p>9</p>
		</td>
		<td width="78" class="Normal">
		<p>serverAdmin</p>
		</td>
		<td width="416" class="Normal">
		<p><a
			href="xacml-policies/default/repository-wide/permit-serverStatus-unrestricted.xml">
		permit-serverStatus-unrestricted.xml</a></p>
		</td>
		<td class="Normal">
		<p>This is a &quot;positive policy&quot; that permits unrestricted
		access for obtaining the Fedora server status.</p>
		</td>
	</tr>
</table>
<br />
</div>
<br />

<div Class="Section1">
<h2><a name="CUSTOM">6 Sample Policies for Typical Fedora Use</a></h2>
<p>The Fedora Policy Enforcement Module is intended to provide a
flexible means of creating access control for a repository and for
digital objects within a repository.&nbsp;&nbsp; Therefore, it is
expected that each Fedora repository will have XACML policies
appropriate for specific contexts and use cases.&nbsp;&nbsp;&nbsp; All
repositories will start off, out-of-the-box, with the set of default
repository policies.&nbsp;&nbsp; These policies set up a world where (1)
users in the Fedora administrator role are permitted to do anything (see
permit-anything-to-administrator.xml), (2) access to the API-M service
is restricted to localhost (deny-apim-if-not-localhost.xml), and (3) the
Fedora API-A service is totally unrestricted (see
permit-apia-unrestricted.xml).</p>

<p>Given this out-of-the-box starting point, the perspective that can be
taken to easily understand how to write new custom policies is:</p>

<ul type="disc">
	<li>write new policies to <b><i>tighten up </i></b>access controls for
	the API-A service&nbsp; (i.e., start to selectively deny access)</li>
	<li>write new policies to<b><i> loosen up</i></b> access controls for
	the API-M service (i.e., start to selectively permit access)</li>
</ul>

<p>Please consult the <a href="XACMLPolicyGuide.htm">Sample Policy Guide</a>
which describes a reference collection of sample policies that would be
useful for Fedora repositories.&nbsp;&nbsp; The collection contains
examples of repository-wide and object-specific policies for restricting
access to groups of digital objects based on certain attributes of the
objects, for restricting access to certain kinds of datastreams and
disseminations, for selectively permitting access to different API-M
operations, and more.&nbsp;&nbsp; These policies can be found within the
Fedora software distribution in the following
directory:&nbsp;&nbsp;&nbsp; <b>FEDORA_HOME/userdocs/server/security/xacml-policies/examples</b></p>
</div>

</body>
</html>

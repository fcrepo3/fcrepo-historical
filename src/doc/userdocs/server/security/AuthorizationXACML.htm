<html>

<head>
	<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
	<meta name=Generator content="Microsoft Word 10 (filtered)">
	<title>Authorization: XACML Policy Enforcement for Fedora</title>
	<link rel="stylesheet" type="text/css" href="../../docstyle.css">
</head>

<body lang=EN-US link=blue vlink=purple>

<div id="header">
    <a href="../index.html" id="logo"></a>
    <div id="title">
		<h1>Fedora Authorization with&nbsp;XACML Policy Enforcement</h1>
    </div>
    <p><b><span style='font-size:16.0pt'>&nbsp;</span></b></p>
</div>

<div class="toc">
    <h2>Table of Contents</h2>
    <div class="tocbox">
        <ol>
            <li><a href="#INTRO">Introduction</a>
            <li><a href="#POLICY">Encoding Fedora XACML Policies</a></li>
                <ul>
					<li><a href="#POLICY-VOCAB">2.1 The Fedora Policy Vocabulary</a></li>
					<li><a href="#POLICY-BASICS">2.2 Policy Basics:&nbsp; Identifier, Description, and Rule Combining Algorithm</a></li>
					<li><a href="#POLICY-TARGET">2.3 Defining the Policy Target</a></li>
					<li><a href="#POLICY-RULE">2.4 Defining Policy Rules</a></li>
					<li><a href="#POLICY-FUNCTIONS">2.5 XACML Functions</a></li>
					<li><a href="#POLICY-OPT-ATTRS">2.6 Required vs. Optional 
					Attributes in a Policy</a></li>
					<li><a href="#POLICY-BEST">2.7 Recommended Best Practices for Authoring Fedora XACML Policies</a></li>
					<li><a href="#POLICY-GOTCHA">2.8 XACML Gotchas</a></li>
			</ul>

            <li><a href="#CONFIG">Configuring the Fedora Authorization Module (XACML Policy Enforcement)</a></li>
                 <ul>
					<li><a href="#CONFIG-ENABLE">3.1 Enabling/Disabling XACML Policy Enforcement</a></li>
					<li><a href="#CONFIG-STORE">3.2 Configuring the &quot;Active&quot; Policies Storage Location</a></li>
					<li><a href="#CONFIG-ACTIVATE">3.3 How to Activate and Load 
					Policies</a></li>
					<li><a href="#CONFIG-VALIDATE">3.4 Enabling/Disabling Policy Validation</a></li>
					<li><a href="#CONFIG-SURROG">3.5 Configuring “Surrogate” Policies (and what are they?)</a></li>
			</ul>
			<li><a href="#IMPL">Implementation of the Fedora Policy Enforcement Module</a></li>
                <ul>
					<li><a href="#IMPL-PDP-PEP">4.1 Policy Determination Point (PDP) and Policy Enforcement Point (PEP)</a></li>
					<li><a href="#IMPL-ALGORITHM">4.2 Understanding the XACML Policy Combining Algorithm</a></li>
					<li><a href="#IMPL-DECISION">4.3 A Simplified Understanding 
					of the Authorization Decision</a></li>
					<li><a href="#IMPL-PDP">4.4 PDP Implementation Details</a></li>
					<li><a href="#IMPL-PEP">4.5 PEP Implementation Details</a></li>
			</ul></li>
			<li><a href="#ATTR">How to Send User Attributes into the Fedora Policy Enforcement Module</a>
			<ul>
				<li><a href="#ATTR1">5.1  Tomcat-users attributes</a></li>
				<li><a href="#ATTR2">5.2  LDAP attributes</a></li>
				<li><a href="#ATTR3">5.3  Shibboleth attributes via an HTTP Servlet Filter</a></li>
			</ul>
			<li><a href="#DEFAULT">Default Repository Policies for Fedora</a>
			<li><a href="#CUSTOM">Sample Policies for Typical Fedora Use</a>
           </ol>
    </div>
</div>

<div class=Section1>

<h2><a name="INTRO">1 Introduction</a></h2>

<p>&nbsp;</p>
<p>This guide is intended to give a general overview of XACML in the context of 
Fedora repositories.&nbsp;&nbsp; A brief discussion of the major components of 
an XACML policy is provided, as well as the basics necessary to write XACML 
policies for Fedora.&nbsp;&nbsp; This guide also provides Instructions on how to 
configure XACML-based policy authorization in Fedora as well as a discussion of 
how the Fedora Policy Enforcement module works.&nbsp; <i><b>&nbsp; </b></i> </p>
<p>XACML provides a very flexible language for expressing access control 
policies.&nbsp;&nbsp; This document offers guidance on writing a range of useful 
policies for Fedora such as 1) broad repository-wide policies for controlling 
access to Fedora API operations,&nbsp; 2) more detailed repository-wide policies 
for controlling access to groups of digital objects based on various attributes, 
and 3) more fine-grained object-specific policies for controlling access 
individual digital objects.&nbsp;&nbsp;&nbsp; <i><b>It should be noted that to 
help users who do not wish to learn native XACML, a Policy Authoring Client is 
currently under development that will provide an easy graphical user interface 
for creating XACML policies for Fedora.</b></i></p>
<p>This document is not intended to be a comprehensive tutorial on writing XACML 
policies.&nbsp;&nbsp; Anyone intending to author custom XACML policies for 
Fedora is encouraged to read the following documentation provided by OASIS 
Technical Committee that defined the XACML standard, and Sun who is the provider 
of the open source Sun XACML engine that is used in the Fedora implementation.&nbsp;&nbsp;&nbsp; 
It is very important to understanding the basics of XACML to ensure that a suite 
of policies works as intended.&nbsp;&nbsp; One of the most important concepts in 
using XACML is understanding how multiple policies can interact with each other 
(in good ways, or in ways you didn't intend).&nbsp;&nbsp; By following the 
examples in this guide, you should be able to set up many kinds of access 
control policies for your repository.&nbsp;&nbsp; With additional help from the 
following documents, you should be able to do more advanced policies, and change 
some of the XACML settings for how sets of policies are combined.</p>
<p>&nbsp;</p>
<p><b>OASIS&nbsp; (for policy writers)</b></p>
<p><br>
<a href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">
XACML Specification</a>:&nbsp;
this is the official specification and a good reference document. <br>
<br>
<a href="http://www.oasis-open.org/committees/download.php/2713/Brief_Introduction_to_XACML.html">
A Brief Introduction to XACML</a>:&nbsp; this is nice introduction to the XACML 
concepts<br>
<br>
<a href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=xacml">XACML 
Technical Committee</a>:&nbsp;&nbsp; this home page of the technical committee 
provides access to other documents on XACML<br>
<br>
<br>
<b>SUN&nbsp; (for developers)</b></p>
<p><br>
<a href="http://sunxacml.sourceforge.net">Sun XACML Home Page</a>:&nbsp; 
general information on the Sun Java reference implementation of XACML</p>
<p><a href="http://sunxacml.sourceforge.net/guide.html">Sun XACML Programmer 
Guide</a>:&nbsp; technical details of the reference implementation</p>
<p><a href="http://sunxacml.sourceforge.net/javadoc/index.html">Sun XACML 
Javadocs</a>:&nbsp; interface definitions of the reference implementation<br>
<i><br>
&nbsp;</i></p>

<h2><a name="POLICY">2 Encoding Fedora XACML Policies</a></h2>

<p>&nbsp;</p>
<h3><b><a name="POLICY-VOCAB">2.1 The Fedora Policy Vocabulary</a></b></h3>

<p>&nbsp;</p>

<p>A <a href="xacml-policies/vocabulary.txt">Fedora-specific policy vocabulary</a> 
is defined to enable the creation of XACML policies for Fedora repositories and 
digital objects.&nbsp;&nbsp; This vocabulary define a set of URNs that can be 
used to identify specific Fedora API operations, Fedora object attributes, and 
the Fedora environment within an XACML policy.&nbsp;&nbsp; These URNs are used 
as attribute designators in XACML policies, specifically within a SubjectAttributeDesignator, 
ResourceAttributeDesignator, and ActionAttributeDesignator.&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p>&nbsp;</p>
<p>The set of identifiers defined for the Fedora policy vocabulary is 
automatically generated and can be found in the Fedora software distribution at:</p>

<p>
        &nbsp;Under Windows:</p>
      <div class="code">
&nbsp;&nbsp;&nbsp; %FEDORA_HOME%\server\config\xacml-policies\vocabulary.txt</div>
      <p style='text-autospace:none'>&nbsp;</p>

<p>
        &nbsp;Under Unix:</p>
      <div class="code">
&nbsp;&nbsp;&nbsp; $FEDORA_HOME\server\config\xacml-policies\vocabulary.txt</div>
	<p>&nbsp;</p>
	<p>This vocabulary provides a set of identifiers (URNs) that can appear in XACML
policies to refer to Fedora API operations (Actions in XACML), any aspects of a
Fedora digital object (Resources in XACML), and key attributes of the
environment in which Fedora runs in (Environment in XACML). </p>
<p><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<h3><b><a name="POLICY-BASICS">2.2 Policy Basics:&nbsp; Identifier, Description, and Rule Combining
Algorithm</a></b></h3>

<p><b>&nbsp;</b></p>

<p>Every policy has an identifier, a rule combining algorithm,
and a description.  In the root element of an XACML policy there is an attribute 
to provide the policy with a unique identifier.&nbsp;&nbsp; Also, the 
&lt;Description&gt; element provides a place to put a textual description of the 
purpose of the policy.</p>
<p>&nbsp;</p>

      <div class="code">
&lt;Policy
<b>PolicyId=&quot;deny-apia&quot; </b> 

<p>        <b>RuleCombiningAlgId=&quot;urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable&quot;</b>  </p>

<p>        xmlns=&quot;urn:oasis:names:tc:xacml:1.0:policy&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</p>

<p>&nbsp;</p>

<p>    <b>&lt;Description&gt;This policy will DENY access to Dublin
Core datastreams.&lt;/Description&gt;</b></p>

<p>    &lt;Target&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>
<p>&nbsp;&nbsp;&nbsp; &lt;/Target&gt;</p>

<p>    &lt;Rule&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>
<p>&nbsp;&nbsp;&nbsp; &lt;/Rule&gt;</p>

<p>&lt;/Policy&gt;</p>

&nbsp;</div>

<p>&nbsp;</p>

<p>The main body of a policy consists of a <b>Policy Target</b>
and one or more <b>Rules</b> which are described in the next sections.  Note
that in the root element of a policy, the rule combining algorithm (i.e.,
attribute “RuleCombiningAlgID”), specifies how the Fedora Policy Enforcement
Module will deal with multiple Rules in a policy (how those rules are combined
and evaluated together).  <b><i>&lt;bill: check on how this related to policy
combining algorithm at the authorization module level.&gt;</i></b></p>

<p>&nbsp;</p>

<h3><a name="POLICY-TARGET">2.3 Defining the Policy Target</a></h3>

<p>&nbsp;</p>

<p style='text-autospace:none'>A Policy Target is the part of a
policy that specifies matching criteria for figuring out whether a particular
policy is applicable to an incoming service request.   A Target contains three
basic matching components: <b>Subjects</b>, <b>Actions</b>, and <b>Resources</b>, 
and <b>Environments</b>.&nbsp; All of these components must be matched to the context of an incoming
request for the policy to be applicable. &nbsp; These matching specifications 
can be built upon <a href="#POLICY-FUNCTIONS">XACML Functions</a>. </p>
<p>&nbsp;</p>

      <div class="code">
&lt;Policy
PolicyId=&quot;deny-apia&quot; 

<p>        RuleCombiningAlgId=&quot;urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable&quot;  </p>

<p>        xmlns=&quot;urn:oasis:names:tc:xacml:1.0:policy&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</p>

<p>&nbsp;</p>

<p>    &lt;Description&gt;This policy will DENY access to Dublin
Core datastreams.&lt;/Description&gt;</p>

<p><b>    &lt;Target&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Subjects&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>...</p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Subjects&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Resources&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>...</p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Resources&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Actions&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>...</p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Actions&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp; &lt;/Target&gt;</b></p>

<p>    &lt;Rule/&gt;</p>

<p>&lt;/Policy&gt;</p>

&nbsp;</div>

<p>&nbsp;</p>

<p>A Policy Target can be specified for a Policy or PolicySet. 
 A &lt;Target&gt; element is defined at the Policy level (as a child of the
root &lt;Policy&gt; element).  A Policy Target applies to any contained Rules
that are expressed in that policy.  However, a Rule may have its own Target, in
which case the Rule-level Target overrides - for that Rule only – the Policy
level Target.  Typically, a Target defined at the Rule level is used to tighten
or refine a broader match specification at the overall Policy level (described
below).</p>

<p>&nbsp;</p>

<p><b><span style='font-size:10.0pt;font-family:"Courier New";
background:white'>&lt;Subjects&gt;</span></b></p>

<p><b><span style='font-size:10.0pt;font-family:"Courier New";
background:white'>&nbsp;</span></b></p>

<p style='text-autospace:none'><i>The Fedora policy vocabulary
(see: dist/server/config/xacml-policies/vocabulary.txt) defines general-purpose
attributes for use in policies (e.g., login-id).  However, attributes for
subjects will vary depending on what a repository uses as the source of user information
(e.g., tomcat-users.xml, LDAP, Shibboleth).   Fedora XACML policies can make
reference to the identifiers of any subject attribute that can be passed into
Fedora from authenticating sources.  See the section below on “Getting User
Attributes into the Fedora Policy Enforcement Module” for more information on
the sources of subject attributes.</i></p>

<p style='text-autospace:none'>&nbsp;</p>

<p style='text-autospace:none'>The &lt;Subjects&gt; element of
a Policy Target is used to wrap one or more descriptions of users or agents
that this policy should apply to.  At runtime, the Fedora Policy Enforcement
Module will compare attributes of the user/agent making a service request
against the criteria specific in the &lt;Subjects&gt; specification of the
policy Target to determine if the policy is applicable to the incoming request.
  For example, to define a policy that is applicable to any kind user or agent,
the following is specified:</p>

<p>
        &nbsp;</p>
      <div class="code">
&nbsp;&nbsp;&nbsp; &lt;Subjects&gt;<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;AnySubject/&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;/Subjects&gt;</div>
      <p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'>Within a single &lt;Subject&gt; specification,
there may be one or more attributes that together determine whether a policy match
should occur.  Each &lt;SubjectMatch&gt; element is used to specify an name/value
of an attribute of a user/agent.<b> </b> Multiple <b>&lt;SubjectMatch&gt; </b>elements
are used to specify multiple attributes of a subject, and are <b>logically </b><b>AND</b><b>-ed
together</b>.  This means that for a policy to be applicable to an incoming
service request, <b><i>all</i></b> &lt;SubjectMatch&gt; specifications must
match the attributes of the requesting user/agent.  In the example below, there
is only one attribute to match on (i.e., “fedoraRole”).  The AttributeID in the
&lt;SubjectAttributeDesignator&gt; element is used to identify a particular
subject attribute by its local or global identifier.  The snippet says that a policy
match will occur if the incoming request context indicates that the user/agent
has a role attribute with the value of “administrator.”</p>

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
&nbsp;&nbsp;&nbsp; &lt;Subjects&gt;<p>         &lt;Subject&gt;</p>

<p>           &lt;SubjectMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>              &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>administrator</b>&lt;/AttributeValue&gt;</p>

<p>              &lt;SubjectAttributeDesignator
AttributeId=&quot;<b>fedoraRole</b>&quot; MustBePresent=&quot;false&quot; </p>

<p>                   DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;</p>

<p>           &lt;/SubjectMatch&gt;</p>

<p>         &lt;/Subject&gt;</p>

<p>&nbsp;&nbsp;&nbsp; &lt;/Subjects&gt;</p>

      </div>

<p style='text-autospace:none'>&nbsp;</p>

<p style='text-autospace:none'>To create an <b>OR</b> <b>condition</b>
for subject matching, multiple &lt;Subject&gt; elements must be specified.   If
there are multiple <b>&lt;Subject&gt;</b> elements within the &lt;Subjects&gt;
wrapper component, the &lt;Subject&gt; elements are <b>logically OR-ed together</b>. 
This means that a match on only one of the Subject specifications is necessary
for the policy to apply to a service request.  For example, the snippet below
says that a subject match will occur if the requesting user has the role of
either “administrator” or “superuser.”</p>

<p>&nbsp;</p>
      <div class="code">
      &lt;Subjects&gt;<p>         &lt;Subject&gt;</p>

<p>           &lt;SubjectMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>              &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>administrator</b>&lt;/AttributeValue&gt;</p>

<p>              &lt;SubjectAttributeDesignator
AttributeId=&quot;<b>fedoraRole</b>&quot; MustBePresent=&quot;false&quot; </p>

<p>                   DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;</p>

<p>           &lt;/SubjectMatch&gt;</p>

<p>         &lt;/Subject&gt;</p>

<p>         &lt;Subject&gt;</p>

<p>           &lt;SubjectMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>              &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>superuser</b>&lt;/AttributeValue&gt;</p>

<p>              &lt;SubjectAttributeDesignator
AttributeId=&quot;<b>fedoraRole</b>&quot; MustBePresent=&quot;false&quot; </p>

<p>                   DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;</p>

<p>           &lt;/SubjectMatch&gt;</p>

<p>         &lt;/Subject&gt;</p>

<p>&nbsp;&nbsp;&nbsp; &lt;/Subjects&gt;</p>
      </div>

<p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'><b>
<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>&lt;Resources&gt;</span></b></p>

<p style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p style='text-autospace:none'><i>All Fedora resources
(objects, datastreams, disseminations) have attribute identifiers defined in
the Fedora policy vocabulary (see: dist/server/config/xacml-policies/vocabulary.txt). 
</i></p>

<p style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p style='text-autospace:none'>The &lt;Resources&gt; element of
a Policy Target is used to wrap one or more descriptions of the kinds of Fedora
resources (objects, datastreams, disseminations, etc.) that the policy should
apply to.  At runtime, the Policy Enforcement Module will compare attributes of
a requested resource against the criteria in the &lt;Resources&gt; specification
within the policy Target to determine if the policy is applicable to the
incoming request. For example, to define a policy that is applicable to any Fedora
resource, the following is specified:</p>

<p style='text-autospace:none'><span style='font-size:9.0pt;
font-family:"Courier New";background:white'>&nbsp;</span></p>

      <div class="code">
&nbsp;&nbsp;&nbsp; &lt;Resources&gt;<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;AnyResource/&gt;</p>

<p>&nbsp;&nbsp;&nbsp; &lt;/Resources&gt;</p>

      </div>

<p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'>Within a single &lt;Resource&gt;
specification, there may be one or more attributes that together determine
whether a policy match should occur.  Each &lt;ResourceMatch&gt; element is
used to specify the name/value of an attribute of a Fedora resource<b>.  </b> Multiple
<b>&lt;ResourceMatch&gt; </b>elements are used to specify multiple attributes
of a resource, and are <b>logically </b><b>AND</b><b>-ed together</b>.  This
means that for a policy to be applicable to an incoming service request, <b><i>all</i></b>
&lt;ResourceMatch&gt; specifications must match the attributes of the requested
Fedora resource.  The AttributeID in the &lt;ResourceAttributeDesignator&gt;
element is used to identify a particular resource attribute by a URN, as
defined in the Fedora policy vocabulary.  In the example below, there are two attributes
to match on: “urn:…datastream:id” and “urn:…mimeType”.  The snippet says that a
policy match will occur if the incoming request context indicates that the
requested resource has the datastream id of THESIS and the MIME type of
“application/pdf.”</p>

<p style='text-autospace:none'>&nbsp;</p>

      <div class="code">
&nbsp;&nbsp;&nbsp; &lt;Resources&gt;<p>  &nbsp;&nbsp;&nbsp;&nbsp; &lt;Resource&gt;</p>

<p>     &nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>        &nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceAttributeDesignator
AttributeId=&quot;urn:fedora:names:fedora:2.1:resource:<b>datastream:id</b>&quot; </p>

<p>            &nbsp;&nbsp;&nbsp;&nbsp; DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;</p>

<p>        &nbsp;&nbsp;&nbsp;&nbsp; &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>THESIS</b>&lt;/AttributeValue&gt;</p>

<p>     &nbsp;&nbsp;&nbsp;&nbsp; &lt;/ResourceMatch&gt;</p>

<p>     &nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>        &nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceAttributeDesignator
AttributeId=&quot;
urn:fedora:names:fedora:2.1:resource:datastream:<b>mimeType</b>&quot; </p>

<p>            &nbsp;&nbsp;&nbsp;&nbsp; DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;</p>

<p>        &nbsp;&nbsp;&nbsp;&nbsp; &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>application/pdf</b>&lt;/AttributeValue&gt;</p>

<p>     &nbsp;&nbsp;&nbsp;&nbsp; &lt;/ResourceMatch&gt;</p>

<p>  &nbsp;&nbsp;&nbsp;&nbsp; &lt;/Resource&gt;</p>

<p>&nbsp;&nbsp;&nbsp; &lt;/Resources&gt;</p>

      </div>
      <p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'>To create an <b>OR</b> <b>condition</b>
for resource matching, multiple &lt;Resource&gt; elements must be specified.  
If there are multiple <b>&lt;Resource&gt;</b> elements within the
&lt;Resources&gt; wrapper component, the &lt;Resource&gt; elements are <b>logically
OR-ed together</b>.  This means that a match on only one of the Resource
specifications is necessary for the policy to apply to a service request.  For
example, the snippet below says that a resource match will occur if the
incoming request is for a digial object that has the content model type of either
“UVA_STD_IMAGE” or “MRSID.”</p>
<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
&nbsp;&nbsp;&nbsp; &lt;Resources&gt;<p>  &nbsp;&nbsp;&nbsp;&nbsp; &lt;Resource&gt;</p>

<p>     &nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>         &nbsp;&nbsp;&nbsp;&nbsp; &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>UVA_STD_IMAGE</b>&lt;/AttributeValue&gt;</p>

<p>         &nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceAttributeDesignator
AttributeId=&quot;urn:fedora:names:fedora:2.1:resource:<b>object:contentModel</b>&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;</p>

<p>     &nbsp;&nbsp;&nbsp;&nbsp; &lt;/ResourceMatch&gt;</p>

<p>  &nbsp;&nbsp;&nbsp;&nbsp; &lt;/Resource&gt;</p>

<p>  &nbsp;&nbsp;&nbsp;&nbsp; &lt;Resource&gt;</p>

<p>     &nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>         &nbsp;&nbsp;&nbsp;&nbsp; &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>MRSID</b>&lt;/AttributeValue&gt;</p>

<p>         &nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceAttributeDesignator
AttributeId=&quot;urn:fedora:names:fedora:2.1:resource:<b>object:contentModel</b>&quot; </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;</p>

<p>     &nbsp;&nbsp;&nbsp;&nbsp; &lt;/ResourceMatch&gt;</p>

<p>  &nbsp;&nbsp;&nbsp;&nbsp; &lt;/Resource&gt;</p>

<p>&nbsp;&nbsp;&nbsp; &lt;/Resources&gt;</p>

      </div>
      <p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'><b>
<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>&lt;Actions&gt;</span></b></p>

<p style='text-autospace:none'>&nbsp;</p>

<p style='text-autospace:none'><i>All Fedora service operations
have an action identifier in defined by the Fedora policy vocabulary (see:
dist/server/config/xacml-policies/vocabulary.txt).  </i></p>

<p style='text-autospace:none'>&nbsp;</p>

<p style='text-autospace:none'>The &lt;Actions&gt; element of a
Policy Target is used to wrap one or more service operations that this policy
should apply to.  At runtime, the Policy Enforcement Module will compare the
identity of an incoming request against the criteria specific in the &lt;Actions&gt;
of a Target in a policy.  For example, to define a policy that is applicable to
<b><i>any</i></b> Fedora service operation, the following is specified:</p>

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
&nbsp;&nbsp;&nbsp; &lt;Actions&gt;<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;AnyAction/&gt;</p>

<p>&nbsp;&nbsp;&nbsp; &lt;/Actions&gt;</p>

      </div>

<p style='text-autospace:none'>&nbsp;</p>

<p style='text-autospace:none'>From a practical standpoint in
Fedora, there is are only two attributes that pertain to identifying Fedora
API operations:  1) an attribute that indicates what Fedora API is in context,
and 2) an attribute that indicates the specific service operation within that API.  &nbsp; 
To create a policy that is intended for an <i>entire</i> service&nbsp; (e.g., 
ALL operations of API-A) do the following:</p>

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
&lt;Actions&gt;<p>  &nbsp;&lt;Action&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>api-a</b>&lt;/AttributeValue&gt;     
</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionAttributeDesignator
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;    </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:api</b>&quot;/&gt;</p>

<p>     &nbsp;&lt;/ActionMatch&gt;</p>

<p>  &nbsp;&lt;/Action&gt;</p>

<p>&lt;/Actions&gt;</p>

      </div>

<p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'>To create a policy that is about a specific 
operation in a Fedora API do the following:</p>

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
&lt;Actions&gt;<p>  &nbsp;&lt;Action&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>id-getDatastreamDissemination</b>&lt;/AttributeValue&gt; </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionAttributeDesignator
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;                                  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:id</b>&quot;/&gt;</p>

<p>     &nbsp;&lt;/ActionMatch&gt;</p>

<p>  &nbsp;&lt;/Action&gt;</p>

<p>&lt;/Actions&gt;</p>

      </div>

<p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'>The above can be considered a shortcut for fully 
qualifying an service operation within its respective service API.&nbsp;&nbsp; 
An alternative way to specify an Action as a Fedora API operation is to refer to 
the Fedora service API <b>AND</b> the service operation.&nbsp;&nbsp;&nbsp; As with &lt;SubjectMatch&gt; and &lt;ResourceMatch&gt; specifications, multiple
<b>&lt;ActionMatch&gt; </b>elements are <b>logically AND-ed
together</b>. &nbsp;&nbsp;&nbsp; For example the following snippet says that the 
policy will match if the incoming request pertains to the Fedora API-A service 
AND the service request is for the the “getDatastreamDissemination” operation.</p>

<p>&nbsp;</p>
<div class="code">
&lt;Actions&gt;<p>  &nbsp;&lt;Action&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>api-a</b>&lt;/AttributeValue&gt;     
</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionAttributeDesignator
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;    </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:api</b>&quot;/&gt;</p>

<p>     &nbsp;&lt;/ActionMatch&gt;</p>

<p>&nbsp;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>id-getDatastreamDissemination</b>&lt;/AttributeValue&gt; </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionAttributeDesignator
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot; </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:id</b>&quot;/&gt;</p>

<p>     &nbsp;&lt;/ActionMatch&gt;</p>

<p>  &nbsp;&lt;/Action&gt;</p>

<p>&lt;/Actions&gt;</p>

      </div>
      <p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'>To create an <b>OR</b> <b>condition</b>
for resource matching, multiple &lt;Action&gt; elements must be specified.   If
there are multiple <b>&lt;Action&gt;</b> elements within the &lt;Actions&gt;
wrapper component, the &lt;Action&gt; elements are <b>logically OR-ed together</b>. 
This means that a match on only one of the Action specifications is necessary
for the policy to apply to a service request.  For example, the snippet below
says that a resource match will occur if the incoming request is <b><i>either</i></b>
the getDatastreamDissemination operation of API-A or the getDissemination
operation of API-A.&nbsp;&nbsp; </p>
<p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'><i>Note:&nbsp; The &quot;shortcut&quot; method of referring 
to a Fedora API operation is used in the example (i.e., we have an ActionMatch 
for the specific Fedora API of &quot;api-a&quot;) because Fedora actions identifiers are 
unique in themselves.&nbsp; Fedora automatically knows that the 
getDatastreamDissemination operation is part of API-A. </i>&nbsp;</p>
<p style='text-autospace:none'>&nbsp;</p>

<div class="code">
&lt;Actions&gt;<p>  &nbsp;&lt;Action&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>id-getDatastreamDissemination</b>&lt;/AttributeValue&gt; </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionAttributeDesignator
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot; </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:id</b>&quot;/&gt;</p>

<p>     &nbsp;&lt;/ActionMatch&gt;</p>

<p>  &nbsp;&lt;/Action&gt;</p>

<p>  &nbsp;&nbsp;&lt;Action&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>

<p>        &nbsp;&nbsp;&lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;urn:fedora:names:fedora:2.1:action:<b>id-getDissemination</b>&lt;/AttributeValue&gt;</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ActionAttributeDesignator
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;  </p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeId=&quot;urn:fedora:names:fedora:2.1:<b>action:id</b>&quot;/&gt;</p>

<p>     &nbsp;&nbsp;&lt;/ActionMatch&gt;</p>

<p>  &nbsp;&nbsp;&lt;/Action&gt;</p>

<p>&nbsp;&lt;/Actions&gt;</p>

      </div>
      <p><b>&nbsp;</b></p>
<p><b>
<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>&lt;Environments&gt;</span></b></p>
<p>The 
Environments component of a Target is intended to specify aspects of the runtime 
environment that would make the policy match the incoming request.&nbsp;&nbsp;&nbsp; 
Such attributes include the current date, current time, the IP address of the 
client, and the protocol being used for the request.&nbsp;&nbsp; The <b>Environments</b> 
element is discussed in the OASIS XACML specification, but it is <i><b>not yet
implemented by the Sun XACML engine</b></i> that underlies the Fedora Authorization 
module.&nbsp; This prevents the expression of environment matching criteria 
within Targets.&nbsp; </p>
<blockquote>
	<p><i><b>**&nbsp; </b>Therefore, in Fedora 2.1 do not create policies that 
	specify Environment matching criteria in the policy Target.</i>&nbsp; </p>
</blockquote>
<p>Although the Environments element is not currently supported for use within a 
Target, this does not mean that you cannot 
encode matching criteria for environmental attributes within a policy.&nbsp;&nbsp; Within a policy 
Rule, you can specify a Condition that contains matching criteria for 
environmental attributes.&nbsp; Refer to the discussion of policy rules below 
for an example of Environment attribute matching in a Condition.</p>

<h4>&nbsp;</h4>
<h3><b><a name="POLICY-RULE">2.4 Defining Policy Rules</a></b></h3>

<p><b>&nbsp;</b></p>

<p>There must be at least one Rule in a policy that matches
the incoming request for a policy to be deemed applicable to that request.&nbsp;&nbsp;&nbsp; 
The way the PDP determines whether a rule is applicable to an incoming request 
is by evaluating the rule Target and rule Condition (if they exist).&nbsp;&nbsp; 
If there is no rule Target and no rule Condition, the applicability of the rule 
is governed by the policy Target.&nbsp; </p>
<p>&nbsp;</p>

      <div class="code">
&lt;Policy
PolicyId=&quot;deny-apia&quot; 

<p>        RuleCombiningAlgId=&quot;urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable&quot;  </p>

<p>        xmlns=&quot;urn:oasis:names:tc:xacml:1.0:policy&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</p>

<p>&nbsp;</p>

<p>    &lt;Description&gt;This policy will DENY access to Dublin
Core datastreams.&lt;/Description&gt;</p>

<p>    &lt;Target&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>
<p>&nbsp;&nbsp;&nbsp; &lt;/Target&gt;</p>

<p><b>    &lt;Rule RuleId=&quot;1&quot; Effect=&quot;Deny&quot;&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Target&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>&nbsp;...</p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Target&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Condition&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>...</p>
<p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Condition&gt;</b></p>
<p><b>&nbsp;&nbsp;&nbsp; &lt;/Rule&gt;</b></p>

<p>&lt;/Policy&gt;</p>

&nbsp;</div>

<p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'>
<span style="background-color: #FFFFFF; background-position: 0% 0%">
<font size="2"><b><span style="font-family: Courier New">&lt;Rule&gt;</span></b></font></span></p>
<p style='text-autospace:none'>A policy can contain one or more Rules.&nbsp; 
Each rule has a <b>RuleId</b> and and <b>Effect</b>.&nbsp;&nbsp; An Effect is 
the intended consequence of a satisfied rule, which can be either &quot;Deny&quot; or 
&quot;Permit.&quot;&nbsp;&nbsp;&nbsp;&nbsp; This means that if the rule is deemed 
applicable to an incoming service request, and the rule's conditions evaluate to 
TRUE,&nbsp; then the specified effect should be enforced.</p>
<p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'>
<span style="background-color: #FFFFFF; background-position: 0% 0%">
<font size="2"><b><span style="font-family: Courier New">&lt;Target&gt;</span></b></font></span></p>
<p style='text-autospace:none'>
Each Rule in a policy can have its own Rule Target.&nbsp; While a Policy Target 
describes the kinds of requests to which an entire policy applies, a Rule Target 
describes the kinds of request to which a particular rule applies.&nbsp;&nbsp;&nbsp; 
If a Rule Target is not present, the Policy Target is used to determine whether 
the Rule is applicable to an incoming request.&nbsp; When a policy target 
exists, it is applicable to every rule in the policy; however, a rule target can 
be consider a constraint on the policy target, fine tuning to specific 
Subject/Resource/Action match criteria that are in the context of a the 
particular rule.&nbsp; </p>
<p style='text-autospace:none'>
Refer to the documentation above for the <a href="#POLICY-TARGET">Defining a 
Policy Target </a>for the structure of a Target, since rule and policy Targets 
are defined using the same elements.&nbsp;&nbsp;&nbsp; </p>
<p style='text-autospace:none'>
&nbsp;</p>
<p style='text-autospace:none'><b>
<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>&lt;Condition&gt;</span></b></p>

<p style='text-autospace:none'>A Condition is a predicate that must be satisfied 
for a rule to be assigned its effect.&nbsp; <b>&nbsp; </b>These predicates can 
be built upon <a href="#POLICY-FUNCTIONS">XACML Functions</a>. </p>
<p style='text-autospace:none'>While Targets are appealing, frame-like expressions, they
have a constrained logic which isn't always expressive enough to narrow down
whether a policy is applicable to a service request.  Hence, the need for
Condition elements.  &nbsp; If either the policy Target or the rule Target is not able 
to adequately express a constraint, a Condition can be added to a Rule. <b><i>&nbsp; A Condition can appear only within a Rule.</i></b> 
It cannot appear within a Target, nor directly under Policy or PolicySet.&nbsp;&nbsp;&nbsp; If 
a Condition is intended to be applicable to the entire Policy,
the Condition must be repeated in every Rule in that Policy.&nbsp;&nbsp; </p>
<p style='text-autospace:none'>&nbsp;</p>
<h3><b><a name="POLICY-FUNCTIONS">2.5&nbsp; XACML Functions</a></b></h3>

<p style='text-autospace:none'>The XACML specification defines numerous 
functions that can be used in defining attribute match criteria in Targets and 
in defining predicates for Conditions.&nbsp; Consult the
<a href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">
XACML Specification</a> for a complete list of functions with their 
descriptions.&nbsp;&nbsp; For convenience, here is a small sampling of 
convenient&nbsp; functions with their XACML identifiers:</p>
<p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'><b>Equality predicates </b>&nbsp;&nbsp; </p>
<ul>
	<li>
	<p style='text-autospace:none'><b>String Equality </b>-&nbsp; 
	urn:oasis:names:tc:xacml:1.0:function:string-equal</p></li>
	<li>
	<p style='text-autospace:none'><b>Boolean Equality </b>- 
	urn:oasis:names:tc:xacml:1.0:function:boolean-equal</p></li>
	<li>
	<p style='text-autospace:none'><b>Date/Time Equality</b> - 
	urn:oasis:names:tc:xacml:1.0:function:dateTime-equal</p></li>
	<li>
	<p style='text-autospace:none'>others</p></li>
</ul>
<p style='text-autospace:none'><b>Logical functions</b></p>
<ul>
	<li>
	<p style='text-autospace:none'><b>OR</b> - 
	urn:oasis:names:tc:xacml:1.0:function:or</p></li>
	<li>
	<p style='text-autospace:none'><b>AND</b> - 
	urn:oasis:names:tc:xacml:1.0:function:and</p></li>
	<li>
	<p style='text-autospace:none'><b>NOT</b> - 
	urn:oasis:names:tc:xacml:1.0:function:not</p></li>
	<li>
	<p style='text-autospace:none'>others</p></li>
</ul>
<p style='text-autospace:none'><b>Comparison functions</b></p>
<ul>
	<li>
	<p style='text-autospace:none'><b>Greater Than</b> - 
	urn:oasis:names:tc:xacml:1.0:function:integer-greater-than</p></li>
	<li>
	<p style='text-autospace:none'><b>Less Than</b> - 
	urn:oasis:names:tc:xacml:1.0:function:type-bag</p></li>
	<li>
	<p style='text-autospace:none'><b>Greater Than or Equal</b> -&nbsp; 
	urn:oasis:names:tc:xacml:1.0:function:integer-greater-than-or-equal</p></li>
	<li>
	<p style='text-autospace:none'><b>Less Than or Equal</b> - 
	urn:oasis:names:tc:xacml:1.0:function:integer-less-than-or-equal</p></li>
	<li>
	<p style='text-autospace:none'><b>Date/Time Greater Than</b> - 
	urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than</p></li>
	<li>
	<p style='text-autospace:none'>others</p></li>
</ul>
<p style='text-autospace:none'><b>Bag and Set functions</b></p>
<ul>
	<li>
	<p style='text-autospace:none'><b>Bag of Strings</b> - 
	urn:oasis:names:tc:xacml:1.0:function:string-bag</p></li>
	<li>
	<p style='text-autospace:none'><b>Member of Set </b>- 
	urn:oasis:names:tc:xacml:1.0:function:type-at-least-one-member-of</p></li>
	<li>
	<p style='text-autospace:none'>others</p></li>
</ul>
<p style='text-autospace:none'>Below is an example Condition that uses several 
of these functions.&nbsp; This Condition evaluates to TRUE if the client IP address 
(from the environment of the incoming request) is NOT a member of a 
set of privileged IP addresses.&nbsp;&nbsp; The Condition element itself 
contains an outer-most function which is a <i><b>negation</b></i> <i><b>function</b></i>.&nbsp;&nbsp; 
Within the condition, we see the application of the <i><b>set membership function</b></i>, 
which specifies that the environment attribute &quot;clientIpAddress&quot; 
(from the Fedora vocabulary) should be evaluated.&nbsp; Finally, the inner most 
<i><b>bag function</b></i> wraps a set of 
possible values for the clientIPAddress attribute.&nbsp; Again, if the 
clientIpAddress on the incoming request is not one of those in the bag of 
addresses, then the rule's Deny effect should take place.</p>
<p style='text-autospace:none'>&nbsp;</p>

<div class="code">
&lt;Condition FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:not&quot;&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;Apply FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;EnvironmentAttributeDesignator 
AttributeId=&quot;urn:fedora:names:fedora:2.1:environment:httpRequest:clientIpAddress&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Apply FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-bag&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;127.0.0.1&lt;/AttributeValue&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;128.84.103.11&lt;/AttributeValue&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Apply&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/Apply&gt;<br>
&lt;/Condition&gt;</div>
      <p><b>&nbsp;</b></p>
<p style='text-autospace:none'>In summary, each policy must have at least one 
Rule.&nbsp; For a Rule to have an effect, (1) the Rule must match the incoming 
request by virtue of a Target match (either via a policy Target, or a 
constraining rule Target), and (2) if a Condition is specified,&nbsp; the condition 
predicate evaluates to TRUE.&nbsp;&nbsp; An applicable rule will result in a 
Permit or Deny for an incoming request, based on what is specified in the Rule 
Effect.</p>
<p style='text-autospace:none'>
	&nbsp;</p>
<h3><a name="POLICY-OPT-ATTRS">2<b>.6 Required vs. Optional Attributes in a Policy</b></a></h3>
<p>There are times when an attribute that is referred to by a policy target will 
not be available on an incoming service request.&nbsp; By default, when the 
policy matching activity occurs -&nbsp; and an attribute specified in a policy 
is not found in the incoming request context -&nbsp; an Indeterminate result is 
returned and an authorization exception is thrown.&nbsp; Policy authors can avoid unwanted Indeterminate results by 
indicating in the attribute designators of a Target that a particular attribute 
can be considered optional in terms of whether it must existing in the incoming 
request context.&nbsp;&nbsp; This is done by setting &quot;<span
style='font-family:"Courier New"'>MustBePresent=false&quot;</span> on a 
SubjectAttribututeDesignator, ResourceAttributeDesignator, or 
ActionAttributeDesignator element.&nbsp;&nbsp;&nbsp; This will tell the Fedora 
Policy Enforcement module that 
it's ok if the incoming request does not have the specified attribute available 
within it.&nbsp;&nbsp; </p>
<p>Let's take an example to make this clearer.&nbsp;&nbsp; Consider a policy 
where the SubjectMatch specification talks about an attribute &quot;fedoraRole&quot; and 
specifies that the value of this attribute must be &quot;administrator&quot; in order for 
this policy to be considered applicable by the PEP.&nbsp;&nbsp; Now consider an 
incoming service request that has a user login id (e.g.,&nbsp; &quot;wdn5e&quot;) in the 
request context, but this user does not have a &quot;fedoraRole&quot; attribute associated 
with it.&nbsp; So,&nbsp; when the PEP tries to determine whether this policy is 
applicable to the incoming service request, it returns INDETERMINATE because it 
can't figure out whether there is a subject match without the presence of a &quot;fedoraRole&quot; 
attribute.&nbsp;&nbsp; This will cause an authorization exception to be thrown 
for the request because the PDP expects the &quot;fedoraRole&quot; attribute to be present 
in the request context.&nbsp;&nbsp;&nbsp; However, we essentially want to 
somehow indicate that the fedoraRole attribute is considered &quot;optional&quot; on an 
incoming request&nbsp; (i.e., not every incoming request must have this 
particular attribute in context).&nbsp;&nbsp; To do this, you must indicate in 
the policy Target that the attribute does not have to be present (&quot;<span
style='font-family:"Courier New"'>MustBePresent=&quot;false&quot;)</span> in the 
incoming request as follows:&nbsp; </p>
<p>&nbsp;</p>
<div class="code">
	&lt;Subjects&gt;<p>&nbsp;&nbsp;&nbsp; &lt;Subject&gt;</p>
	<p>&nbsp;&nbsp;&nbsp; &lt;SubjectMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;</p>
	<p>&nbsp;&nbsp;&nbsp; &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;administrator&lt;/AttributeValue&gt;</p>
	<p>&nbsp;&nbsp;&nbsp; &lt;SubjectAttributeDesignator AttributeId=&quot;fedoraRole&quot; 
	<b>MustBePresent=&quot;false&quot;</b> DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;</p>
	<p>&nbsp;&nbsp;&nbsp; &lt;/SubjectMatch&gt;</p>
	<p>&nbsp;&nbsp;&nbsp; &lt;/Subject&gt;</p>
	<p>&lt;/Subjects&gt;</p></div>

	<h2>&nbsp;</h2>

<h3><b><a name="POLICY-BEST">2.7 Recommended Best Practices for Authoring Fedora XACML Policies</a></b></h3>
<p style='text-autospace:none'>&nbsp;</p>

<ol style='margin-top:0in' start=1 type=1>
 <li style='text-autospace:none'>Set the PolicyId attribute in
     the XACML policy to match the filename of the policy.
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='margin-left:.5in;text-autospace:none'>
	<span
	style='font-size:9.0pt;font-family:"Courier New";background:white'>&lt;Policy
	PolicyId=&quot;deny-objects-to-students&quot; . . . &gt;&nbsp; </span>
	<font face="Arial">
	<span
	style='font-size:9.0pt;background:white; font-style:italic; font-weight:700'>
	corresponds to filename of 
	&quot;/repository-policies/deny-objects-to-students.xml&quot;</span></font></p>

	<p style='margin-left:.5in;text-autospace:none'><span
	style='font-size:10.0pt;font-family:"Courier New";background:white'>&nbsp;</span></p>
</li>



 <li style='text-autospace:none'>For object-specific policies,
     set the PolicyID in the XACML and the policy filename to match the object
     PID, but with concession to demand of OS filenames (e.g., uses dash instead of colon).
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='margin-left:.5in;text-autospace:none'>
	<span style='font-size:9.0pt;font-family:"Courier New";background:white'>&lt;Policy
	PolicyId=&quot;demo-5&quot; . . . &gt;&nbsp; </span><font face="Arial">
	<span
	style='font-size:9.0pt;background:white; font-style:italic; font-weight:700'>
	corresponds to filename of &quot;/object-policies/demo-5.xml&quot;</span></font></p>

	<p style='margin-left:.5in;text-autospace:none'><span
	style='font-size:10.0pt;font-family:"Courier New";background:white'>&nbsp;</span></p>
 </li>


 <li style='text-autospace:none'>Policies should use simplest
     rule-combining algorithm which gives desired outcome. Avoid a more
     complicated algorithm which happens to work, but which confuses because it
     implies more than what's there.  A simple choice is the “first-applicable”
     rule combining algorithm which give precedence to the first rule in a
     policy to apply to a situation.
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='margin-left:.5in;text-autospace:none'>
	<span
	style='font-size:9.0pt;font-family:"Courier New";background:white'>&lt;Policy PolicyId=&quot;demo-5&quot;
	RuleCombiningAlgId=&quot;urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable&quot;
	. . . &gt;</span></p>

	<p style='margin-left:.5in;text-autospace:none'><span
	style='font-size:10.0pt;font-family:"Courier New";background:white'>&nbsp;</span></p>
 </li>

 <li style='text-autospace:none'>An object-specific policy should be coded so that 
     it applies only to that specific object.
	<p style='text-autospace:none'>&nbsp;</p>
 </li>

 <li style='text-autospace:none'>Try to stick with
     “single-effect” policies, that is a policy should either permit or deny. 
     Things can get confusing if a single policy has some rules that permit and
     some that deny.   If most policies are single-effect, try to have them all
     be single-effect.  You may wind up writing more individual policies, some
     that deny and some that permit, but from a policy management standpoint,
     it is probably easier to have atomic, unambiguous policies.
	<p style='text-autospace:none'>&nbsp;</p>
 </li>

 </ol>

<h3><b><a name="POLICY-GOTCHA">2.8 XACML Gotchas</a></b></h3>

</div>
<ol>
	<li>XACML provides for an AttributeValue in a &lt;Target&gt; evaluation as a 
	single value, but provides for an AttributeValue in a &lt;Condition&gt; evaluation 
	as &quot;bags&quot; (sets), doing so even for either singleton or empty bags.&nbsp; 
	Code policies accordingly.
	<p style='margin-left:.25in;text-autospace:none'>&nbsp;</p>
	</li>
	

		
	<li>MatchId functions (which are used in Targets) are much
restricted in allowed values, compared to the values allowed in the analogous
FunctionIds (which are used in Conditions).  There are no existing functions
which are self-contained boolean combinations, such as not-equal.  Since
attributes are generally not boolean themselves (and so possibly negated), the
not function can't be used as a MatchId, e.g., in a SubjectMatch element. 
Since SubjectMatch, e.g., expresses a single binary operation, there is no
possibility of introducing negative logic into a Target.  [An exception would
be an explicit value returned by an attribute finder, which would signify the
absence of the attribute.]
<p style='margin-left:.25in;text-autospace:none'>&nbsp;</p>
</li>


	<li>Despite statements in Sun XACML documentation that
&lt;Environments&gt; was added to &lt;Target&gt; generally, it doesn't seem to
work currently in sunxacml.
<p style='margin-left:.25in;text-autospace:none'>&nbsp;</p>
</li>


	<li>&nbsp;Another issue is that, with no short-circuiting in
expressions and with no explicit way to test if an attribute is available,
absence of an attribute causing an Indeterminate (error) result is a practical
impediment to writing effective policies.  [Hence, Fedora's attribute finders
(callbacks for the sunxacml engine to use) return a dummy value if the
attribute is not available.]
<p style='margin-left:.25in;text-autospace:none'>&nbsp;</p>
</li>


	<li>&nbsp;sunxacml has a relaxed parsing of policies; e.g., we have
encountered schema violation (e.g., Action omitted between Actions and
ActionMatch) which resulted only in the policy not being evaluated correctly,
as opposed to failing parse.  How widespread this is, we don't know. As a
precaution, policies should be tested for effect.  This is good practice,
anyway, since testing is the only check of the policy-writer's understanding of
xacml and against the inevitable typ0.
<p style='margin-left:.25in;text-autospace:none'>&nbsp;</p>
</li>


	<li>&nbsp;Though sunxacml parsing is relaxed, &lt;Description&gt;
&lt;/Description&gt; apparently requires at least one-character content: 
&lt;Desciption/&gt; doesn't do it.
<p style='margin-left:.25in;text-autospace:none'>&nbsp;</p>
</li>


 <li style='text-autospace:none'>In SubjectMatch, ResourceMatch, and ActionMatch 
	blocks, place AttributeValue elements before AttributeDesignator. The reason for
this is that the Sun XACML engine silently does this reordering, leading to
unexpected results, due to bad coding near the end of its TargetMatch.getInstance()
method.   Also, avoid using two AttributeDesignator elements (without any
AttributeValues), until we clarify with Sun how they'll fix this.

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">


<p style='margin-left:.5in;text-autospace:none'>&lt;ResourceMatch
MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than&quot;&gt;</p>

<p style='margin-left:.5in;text-autospace:none'>   &lt;AttributeValue
DataType=&quot;http://www.w3.org/2001/XMLSchema#dateTime&quot;&gt;2004-12-07T20:22:26.705Z&lt;/AttributeValue&gt;</p>

<p style='margin-left:.5in;text-autospace:none'>   &lt;ResourceAttributeDesignator
AttributeId=&quot;urn:fedora:names:fedora:2.1:resource:object:lastModifiedDate&quot; </p>

<p style='margin-left:.5in;text-autospace:none'>                               
DataType=&quot;http://www.w3.org/2001/XMLSchema#dateTime&quot;/&gt;</p>

<p style='margin-left:.5in;text-autospace:none'>&lt;/ResourceMatch&gt;</p>

      </div>

	<p>&nbsp;</p>

</ol>
<h2>&nbsp;</h2>
<h2><a name="CONFIG"><b><span style='font-size:14.0pt'>3 Configuring the Fedora
Authorization Module (XACML Policy Enforcement)</span></b></a></h2>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>&nbsp;</span></p>
	<p><i>Note that to do identity-based policies (user login id or user 
	attributes), you must have authentication configured.&nbsp;&nbsp;&nbsp; Run 
	fedora-setup to choose which Fedora service interfaces will be configured 
	for authentication.&nbsp;&nbsp; If a policy is written that makes reference 
	to user identity or attributes (Subject attributes in Policy target) and 
	authentication has not been configured, the policy will be evaluated as 
	&quot;indeterminate&quot; and the service request will fail with an authorization 
	exception.&nbsp;&nbsp; Be sure to enable authentication for API-A if you 
	intend to write policies for accessing objects based on user 
	identity/attributes.&nbsp; </i></p>
<p>&nbsp;</p>
<p>By default, Fedora XACML-based authorization is enabled.&nbsp;&nbsp; Configuration of the Fedora XACML-based Policy Enforcement
Module is done in the Fedora server configuration file (fedora.fcfg).  Depicted
below is the section of the configuration file for the Authorization module
that controls XACML-based policy enforcement.</p>

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
	<p style='text-autospace:none'>
	&lt;module
role=&quot;fedora.server.security.Authorization&quot;
class=&quot;fedora.server.security.DefaultAuthorization&quot;&gt;</p>
	<p style='text-autospace:none'>
	    &lt;comment&gt;Builds and
manages Fedora's authorization structure.&lt;/comment&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param name=&quot;ALLOW-SURROGATES&quot;
value=&quot;false&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;REPOSITORY-POLICIES-DIRECTORY&quot;
value=&quot;/fedora-xacml-policies/repository-policies&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;OBJECT-POLICIES-DIRECTORY&quot;
value=&quot;/fedora-xacml-policies/object-policies&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;SURROGATE-POLICIES-DIRECTORY&quot;
value=&quot;/fedora-xacml-policies/surrogate-policies&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;REPOSITORY-POLICY-GUITOOL-POLICIES-DIRECTORY&quot; </p>
	<p style='text-autospace:none'>
	          
value=&quot;/fedora-xacml-policies/repository-policies-generated-by-policyguitool&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;XACML-COMBINING-ALGORITHM&quot;
value=&quot;com.sun.xacml.combine.OrderedDenyOverridesPolicyAlg&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;ENFORCE-MODE&quot; value=&quot;enforce-policies&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;POLICY-SCHEMA-PATH&quot;
value=&quot;xsd/cs-xacml-schema-policy-01.xsd&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;VALIDATE-REPOSITORY-POLICIES&quot; value=&quot;true&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;VALIDATE-OBJECT-POLICIES-FROM-FILE&quot;
value=&quot;false&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;VALIDATE-OBJECT-POLICIES-FROM-DATASTREAM&quot;
value=&quot;false&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;VALIDATE-SURROGATE-POLICIES&quot; value=&quot;false&quot;/&gt;</p>
	<p style='text-autospace:none'>
	&lt;/module&gt;</p>

      </div>

	<p>&nbsp;</p>
<h3><b><a name="CONFIG-ENABLE">3.1 Enabling/Disabling XACML Policy Enforcement</a></b></h3>
	<p>&nbsp;</p>
	<p>To enable/disable XACML policy enforcement in Fedora, use
the Fedora configuration file (fedora.fcfg).  Whether Fedora uses XACML for
authorization decisions is controlled by the “ENFORCE-MODE” parameter in the
Authorization module:</p>

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
	<p style="text-autospace: none">    &lt;param name=&quot;ENFORCE-MODE&quot;
value=&quot;enforce-policies&quot;/&gt;</div>

	<p>&nbsp;</p>
<p>The &quot;ENFORCE-MODE&quot; parameter can contain one of
three values, with the following meanings:</p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'> </span></p>
	<p style='text-indent:.5in;text-autospace:none'>
	<span
style='font-size:10.0pt;font-family:"Courier New";background:white'>enforce-policies
- enable XACML enforcement to determine whether a request is permitted or
denied</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>      permit-all-requests – disable
XACML enforcement; PERMIT every request</span><span style='font-size:10.0pt;
font-family:"Courier New"'> by default</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>      deny-all-requests -  disable XACML
enforcement; DENY every request</span><span style='font-size:10.0pt;font-family:
"Courier New"'> by default</span></p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p>The “enforce-policies” setting is used to enable the
enforcement of XACML policies, and is the default setting for a Fedora
repository.  The “permit-all-requests” setting can facilitate testing code
independent of security.  The “deny-all-requests” setting can be used to
quickly shut down access to the server, but requires a server restart to affect
this.</p>
	<p>&nbsp;</p>
	<p>Tomcat container security is, of course, still a first
barrier to authentication/authorization (i.e., Fedora's Tomcat web.xml
specifies access protection earlier than XACML.  Tomcat container security is
always in place regardless of the setting for parameter ENFORCE-MODE.</p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<h3><b><a name="CONFIG-STORE">3.2 Configuring the Active Policies Storage Location</a></b></h3>
	<p><b>&nbsp;</b></p>
	<p><b><i>a. Repository-wide policies stored in central location</i></b></p>
	<p>&nbsp;</p>
	<p>The storage location for active repository-wide policies can be set
by the repository administrator using the follow parameter in Authorization
module (in fedora.fcfg):   </p>
<p>&nbsp;</p>
<div class="code">
	<p style="text-autospace: none">    &lt;param
name=&quot;REPOSITORY-POLICIES-DIRECTORY&quot;
value=&quot;/fedora-xacml-policies/repository-policies&quot;/&gt;</div>

	<p>&nbsp;</p>
	<p>Repository-wide policies are broad policies that are
intended to be in play for the entire Fedora repository.  By saying that these
policies are “broad,” does not mean they must be course-grained. 
Repository-wide policies can  be fine-grained and they can be written to
control access to any Fedora API operation, to groups of digital objects, or
even to sets of specifically identified digital objects.  Repository-wide
policies are distinguished from object-specific policies (described below) in
that they will be evaluated for their applicability for every Fedora service
request.  In contrast, object-specific policies are only evaluated for service
requests that actually mention a specific object by its PID.   It should be
noted that a repository-wide policy can still be written to address a specific
digital object.  The disadvantage of putting such a policy in the
repository-wide storage location is that it unnecessarily evaluated for
requests that do not pertain to the specific digital object it is about.   As
described below, there are better places to store a policy that pertains to a
single digital object.</p>
	<p>&nbsp;</p>
	<p><b><i>b. Object-specific policies stored in a central location</i></b></p>
	<p><b><i>&nbsp;</i></b></p>
<p>Object-specific policies can be stored in a
centrally configured location, outside of the digital object that the policy is
written for.   The location for active object-specific policies is configured in
the following parameter of the Authorization module (in fedora.fcfg):</p>
	<p>&nbsp;</p>
<div class="code">
	<p style="text-autospace: none">    &lt;param
name=&quot;OBJECT-POLICIES-DIRECTORY&quot;
value=&quot;/fedora-xacml-policies/object-policies&quot;/&gt;</div>

	<p>&nbsp;</p>
<p>An object policy named “demo-5.xml” in this directory will
be included in the evaluation of policies for requests for the Fedora object whose
PID is “demo:5.”   If this policy file is mistakenly put into
repository-policies directory, it has the same effect at the time of policy
evaluation and enforcement.   The configuration of the object-policies
directory really a convenience; it provides a way to easily distinguish between
broader repository policies and policies that are intended to be applicable to
a single digital object (but are not stored inside the “POLICY” datastream of
an object).   </p>
	<p>&nbsp;</p>
	<p>As previously noted, if an object-specific policy mistakenly
gets put into repository-policies directory, it has the same effect at
enforcement time.   It will just be unnecessarily in scope for evaluation for
service requests that it will never be applicable to.</p>
	<p>&nbsp;</p>
	<p><b><i>c. Object-specific policies stored inside digital
objects</i></b></p>
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='text-autospace:none'>An object-specific policy can be
stored inside a digital object within the special reserved datastream whose
datastream ID is &quot;POLICY&quot;.  It is good practice with object policy's
to include a check of the PID in the policy.   One benefit of putting object
specific policies inside digital objects is that the policies become <b><i>portable</i></b>
with the object itself.   Another benefit is that it may provide for easier
distribution of policy management responsibility.  For example, authors or
owners of particular digital objects can be granted the rights to modify the
POLICY datastream of their objects, without having to obtain repository
administrator privileges to modify policies in the configured policy storage
locations for a repository.</p>
	<p><b><i>&nbsp;</i></b></p>
<p style='text-autospace:none'>&nbsp;</p>

<h3><a name="CONFIG-ACTIVATE">3<b>.3 How to Activate and Load Policies</b></a></h3>
	<p>
	&nbsp;</p>
<p>
	Policies are not considered <i><b>active</b></i> unless they are placed in the
	<a href="#CONFIG-ENABLE">active policy storage locations</a> specified for the 
	Authorization module in the Fedora server configuration file (fedora.fcfg).&nbsp;&nbsp; 
	Once policies are stored in the active policy directories, they are able to 
	be <i><b>loaded</b></i> by the Fedora repository server once it is started.&nbsp;&nbsp; 
	To put new custom policies into play, simply add them to one of the active 
	policy directory.&nbsp;&nbsp;&nbsp; To inactive a policy, remove it from the 
	active policy directory.&nbsp; To modify an existing policies, edit the 
	policy in the active policy directories (or preferably, edit in another 
	location and replace the existing policy in the active policy directory).</p>
<p>
	To activate and load policies take the following steps:</p>
<ol>
	<li><b>Validate</b> your policies using the
	<a href="../cmd-line/index.html#validate">validate-policy</a> command line utility&nbsp;
	<i>(optional, but recommended!)</i></li>
	<li><b>Activate</b> your policies by copying them into the one of the active 
	policies storage directories configured in the 
	Authorization module (in fedora.fcfg)</li>
	<li><b>Load</b> your policies by starting the Fedora server (using the
	<a href="../cmd-line/index.html#start">fedora-start</a> command line 
	utility).&nbsp; If the server is already started run the
	<a href="../cmd-line/index.html#reload">fedora-reload-policies</a> command 
	line utility.&nbsp; </li>
</ol>
<p>
	It should be noted that only repository-wide policies are pre-loaded into 
	the Fedora server.&nbsp; For performance reasons, object-specific policies are not 
	pre-loaded; instead they are loaded on an as-needed basis (i.e., when a 
	request for that object is made).&nbsp; </p>
<p>
	<br>
	It should also be noted that the <i><b>first time </b></i>the Fedora server 
	is started, the <i><b>default out-of-the-box policies</b></i> will be copied 
	into a subdirectory named &quot;default&quot; under the appropriate active policy storage location 
	(configured for the Authorization module in fedora.fcfg).&nbsp;&nbsp; These 
	default policies are copied <b><i>from</i></b> the Fedora distribution 
	directory $FEDORA_HOME/dist/server/config/xacml-policies/default.&nbsp;&nbsp; 
	In Fedora 2.0 there are only <a href="#DEFAULT">default repository-wide 
	policies,</a> but no default object policies or surrogate policies.&nbsp; 
	The default out-of-box policies will be <i><b>copied only once</b></i>.&nbsp; 
	This is to prevent subsequent server restarts from clobbering any 
	customizations that may have been made to the default policies by a 
	repository administrator.</p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<h3><b><a name="CONFIG-VALIDATE">3.4 Enabling/Disabling Policy Validation</a></b></h3>
	<p style='text-autospace:none'><b>&nbsp;</b></p>
	<p style='text-autospace:none'>There are several parameters in
the Authorization module configuration that control whether Fedora will attempt
to validate policies against the XML schema for XACML.    </p>
	<p>&nbsp;</p>
<div class="code">
	<p style='text-autospace:none'>&nbsp;   &lt;param
name=&quot;POLICY-SCHEMA-PATH&quot;
value=&quot;xsd/cs-xacml-schema-policy-01.xsd&quot;/&gt;    </p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;VALIDATE-REPOSITORY-POLICIES&quot; value=&quot;true&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;VALIDATE-OBJECT-POLICIES-FROM-FILE&quot;
value=&quot;false&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param name=&quot;VALIDATE-OBJECT-POLICIES-FROM-DATASTREAM&quot;
value=&quot;false&quot;/&gt;</p>
	<p style='text-autospace:none'>
	    &lt;param
name=&quot;VALIDATE-SURROGATE-POLICIES&quot; value=&quot;false&quot;/&gt;</p>

      </div>

	<p>&nbsp;</p>
	<p style='text-autospace:none'>By default all repository-wide
policies will be validated.  It is up to the repository administrator to enable
policy validation for object-specific and surrogate policies.   <b><i>&lt;</i></b><b><i>BILL</i></b><b><i>: 
what happens if invalid policy is in play?  Exception?  Also who are
object-specific policies set to false?&gt;</i></b></p>
	<p style='text-autospace:none'><b><i>&nbsp;</i></b></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>&lt;For now, there is no
Fedora-based xacml schema checking of policies.  Some policies fail sunxacml
parse</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>with console errors; with
repository-policies, this would be at server startup, with object-policies, 
	</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>only on access to that specific
object.  on schema validation:
http://sunxacml.sourceforge.net/guide.html#using-validating</span><span
style='font-size:10.0pt;font-family:"Courier New"'>&gt;</span></p>
	<p style='text-autospace:none'><b><i>&nbsp;</i></b></p>

<h3><b><a name="CONFIG-SURROG">3.5 Configuring “Surrogate” Policies (and what are they?)</a></b></h3>
<p style='text-autospace:none'>&nbsp;</p>
	<p style='text-autospace:none'>
	Web front ends or services can authenticate to Fedora as a &quot;surrogate 
	representing an end-user.&quot;&nbsp; The surrogate user can provide Fedora with 
	the identity of the end-user it is representing within the HTTP request 
	header.  If Fedora
authenticates the front-end &quot;surrogate&quot; users - and there are policies allowing the front end to
	<b>actAsSurrogateFor</b> the
<b>subjectRepresented -</b> then the incoming service request is treated as if the end-user had been authenticated by
	Fedora.   From that point, the actual end user identity is subject to 
	authorization decisions based on the repository-wide and object-specific 
	policies configured for the repository.<i><b> &lt;bill:&nbsp; this needs better 
	explanation&gt;</b></i></p>
	<p style='text-autospace:none'><b>&nbsp;</b></p>

<h2><a name="IMPL"><b>4 Implementation of the Fedora Policy Enforcement Module</b></a></h2>
<h4>&nbsp;</h4>
<h3><b><a name="IMPL-PDP-PEP">4.1  Policy Determination Point (PDP) and Policy Enforcement Point (PEP)</a></b></h3>
	<p style='text-autospace:none'><b>&nbsp;</b></p>
	<p style='text-autospace:none'>According to the OASIS XACML
specification, “an application functions in the role of the Policy Enforcement
Point (PEP) if it guards access to a set of resources and asks the Policy
Determination Point (PDP) for an authorization decision.  The PEP MUST abide by
the authorization decision in the following way:  A PEP SHALL allow access to
the resource only if a valid XACML response of “Permit” is returned by the
PDP.  The PEP SHALL deny access to the resource in all other cases.  An XACML
response of “Permit” SHALL be considered valid only if the PEP understands all
of the obligations contained in the response.”   </p>
	<p style='text-autospace:none'>&nbsp;</p>
<p style='text-autospace:none'>The Fedora Policy Enforcement
Module fulfills the responsibilities of both the PDP and the PEP.&nbsp; The 
Fedora module wraps the Sun XACML implementation of the PDP.&nbsp;&nbsp; Fedora 
module also implements custom attribute finders and a custom PEP.</p>
<p style='text-autospace:none'>&nbsp;</p>
<p>The PDP determines the set of policies that are
applicable to any given Fedora service request.  Remember the PDP determines
whether a policy is applicable by comparing the Subject/Resource/Action attribute
designations in a Policy Target to the context of an incoming Fedora service
request (i.e., attributes that describe the Fedora service request, the
user/subject, the desired object/datastream/dissemination, and the runtime
environment).    Repository-wide policies are always in play and will be
evaluated by the PDP to determine whether they are applicable to the particular
incoming Fedora service request.  Object-specific policies if the incoming
request refers to an object by its PID and there exists an object-specific
policy mentioning that PID.  <i><b>PDP makes the 
decision of deny/permit/indeterminate, and then the PEP makes sure to enforce 
this decision for on the incoming Fedora API request.</b></i></p>
<p>&nbsp;</p>

<h3><a name="IMPL-ALGORITHM">4<b>.2&nbsp; Understanding the XACML Policy Combining Algorithm</b></a></h3>
	<p>&nbsp;</p>
	<p>Policy writers must understand the interaction effect of
multiple XACML policies that are in scope for any particular action.  The
Fedora configuration file (fedora.fcfg) sets the policy combining algorithm
that will be used by the Policy Enforcement Module in evaluating sets of policies.  In the 
	the Fedora server configuration file (fedora.fcdg) not the following 
	parameter in the section
for the Authorization module::</p>
	<p>&nbsp;</p>
<div class="code">
	&lt;param name=&quot;XACML-COMBINING-ALGORITHM&quot;
value=&quot;com.sun.xacml.combine.OrderedDenyOverridesPolicyAlg&quot;/&gt;</div>

	<p>&nbsp;</p>
<p>This parameter sets the XACML policy combining algorithm
that controls how the Fedora Policy Enforcement Module will deal with multiple
policies that may be applicable to a Fedora service request.   The default
value in Fedora is the “Ordered Deny Overrides” policy combining algorithm.  It
allows a single evaluation of <b><i>deny</i></b> <b><i>to take precedence</i></b>
over any number of permit, not applicable or indeterminate results.  Note that
this uses the regular Deny Overrides implementation since it is also ordered.  
Consult the OASIS and Sun XACML documentation for a description of alternative
combining algorithms.  </p>
	<p>In the PDP, policies are matched based on their applicability to an 
	incoming service request.&nbsp;&nbsp; All policies that are applicable are combined programmatically and dynamically
per request into a PolicySet.  To estimate the number of policies that may be
in the PolicySet for a given service request, consider N to be the number of
policies configured in Fedora’s  repository-wide policy storage location.  Then
we have the following possible number of policies in a PolicySet for the PDP to
consider:</p>
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='text-autospace:none'>N :      # of policies if a
service request <b><i>does not refer to a particular digital object</i></b></p>
	<p style='text-autospace:none'>N :      # of policies if a
service request <b><i>refers to an</i></b> <b><i>object,</i></b> <b><i>but
there is no object-specific policy for that object</i></b></p>
	<p style='text-autospace:none'>N+1:   # of policies if a
service request <b><i>refers to an</i></b> <b><i>object that has an object-specific
policy datastream</i></b></p>
	<p style='text-autospace:none'>N+1:   # of policies if a
service request <b><i>refers to an</i></b> <b><i>object that has an
object-specific policy in the object policies directory</i></b></p>
	<p style='text-autospace:none'>N+2:   # of policies if a
service request<b><i> refers to an</i></b> <b><i>object that has an 
	object-specific policy datastream and a policy in the object-policies directory</i></b></p>
	<p>&nbsp;</p>

<h3><a name="IMPL-DECISION">4<b>.3 A Simplified Understanding of the Authorization Decision</b></a></h3>
<p>&nbsp;</p>
<p><i><b>For an incoming service request to succeed, there must be an explicit permit 
in the absence of a deny;&nbsp; 
the absence of a deny is not enough to permit an action</b> </i>&nbsp; By default, if any of the 
applicable policies in a Policy Set yield a deny, the requesting subject will be 
denied access, even if some other policy permitted the action.&nbsp; In other 
words, deny will prevail over permit.&nbsp;&nbsp; Also, if there is a policy in 
the set that is evaluated as &quot;Indeterminate,&quot; then the result of that policy 
evaluation will be considered a deny.&nbsp; A policy can be evaluated as 
Indeterminate if there was an error during policy evaluation.&nbsp; Also, a 
policy can be evaluated as Indeterminate if there is a required attribute 
specified in the policy that did not exist in the context of the incoming 
requests.&nbsp;&nbsp; See the section of <a href="#POLICY-OPT-ATTRS">Required 
vs. Optional Attributes</a> for more details.&nbsp; </p>
<p>For the purposes of a simple understanding of the Fedora
Policy Enforcement module, things work like this:</p>
<p>&nbsp;</p>
<div class="code">
	<i>&nbsp;NOTE:&nbsp; </i>=0&nbsp; <i>means NO policy in a policy set 
	evaluated to that result; </i>
	<p><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </i>=1&nbsp; <i>means one 
	or more policies in a policy set evaluated to that result</i></p>
	<p>&nbsp;</p>
	<p>========= POLICY SET RESULTS =======&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	=== FINAL DECISION ===</p>
	<p>&nbsp;</p>
	<p>DENY=0   INDETERMINATE=0    PERMIT=0   
	<span
style='font-family:Wingdings'>è</span>&nbsp;&nbsp;&nbsp;&nbsp; result is DENY</p>
	<p>DENY=1   INDETERMINATE=0    PERMIT=0   
	<span
style='font-family:Wingdings'>è</span>&nbsp;&nbsp;&nbsp;&nbsp; result is DENY</p>
	<p>DENY=1   INDETERMINATE=0    PERMIT=1   
	<span
style='font-family:Wingdings'>è</span>&nbsp;&nbsp;&nbsp;&nbsp; result is DENY&nbsp; (note denial
trumps permit)</p>
	<p>DENY=0   INDETERMINATE=0    PERMIT=1   
	<span
style='font-family:Wingdings'>è</span>&nbsp;&nbsp;&nbsp;&nbsp; result is <b>PERMIT</b></p>
	<p>DENY=0   INDETERMINATE=1    PERMIT=1   
	<span
style='font-family:Wingdings'>è</span>&nbsp;&nbsp;&nbsp;&nbsp; result is DENY&nbsp; 
	(note indeterminate is treated as denial which trumps permit)</p>
	<p>DENY=0   INDETERMINATE=1    PERMIT=0   
	<span
style='font-family:Wingdings'>è</span>&nbsp;&nbsp;&nbsp;&nbsp; result is DENY</p>

      </div>

	<h2>&nbsp;</h2>
<p>Put another way... assuming the default policy combining algorithm for Fedora 
is &quot;Deny Overrides&quot;, an action is Permitted or Denied depending on the 
evaluation of the various policies, as follows:<br>
&nbsp;</p>
<p><b>Permit requires --ALL-- of the following conditions to be TRUE:</b></p>
<ul>
	<li>at least one policy was evaluated to Permit the action</li>
	<li>NO policy must evaluate to explicitly Deny the action</li>
	<li>NO policy must evaluate as Indeterminate for the action</li>
	<li>NO error or unknown result is returned by the Sun XACML engine</li>
</ul>
<p><b>Deny only requires --ONE-- of the following conditions to be TRUE:</b></p>
<ul>
	<li>at least one policy was evaluated to explicitly Deny the action</li>
	<li>at least one policy was evaluated to be Indeterminate for the action</li>
	<li>the Sun XACML engine returned a unknown result (an error or a return 
	value that is not in the XACML specification)</li>
</ul>
<p>&nbsp;</p>

<h3><a name="IMPL-PDP">4<b>.4&nbsp; PDP Implementation Details</b></a></h3>
<p>&nbsp;</p>
<div dir="ltr" align="left">
	We can understand the results of the PDP's evaluation of a policy set&nbsp;from 
	three perspectives:&nbsp; (1) the Sun XACML engine, (2) the Fedora wrapper 
	of Sun XACML, and (3) the bottom line outcome.</div>
<div dir="ltr" align="left">
	<span class="892423617-14102005"></span>&nbsp;</div>
<div dir="ltr" align="left">
	<b>(1)&nbsp; PDP (Sun XACML&nbsp;engine perspective):&nbsp;&nbsp;</b><p>&nbsp;</p>
<p>The Sun XACML engine, which underlies the Fedora Policy Enforcement Module,&nbsp; 
will evaluate a Policy Set and return a decision.&nbsp;&nbsp; Refer to the
<a href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">
OASIS XACML Specification</a> and the <a href="http://sunxacml.sourceforge.net">
Sun XACML documentation</a> for details.&nbsp; In making its authorization decision, the Sun XACML engine will return a single result from its evaluation of 
a Policy.&nbsp; The result will be one of the following:</p>
<ul>
	<li><b>Permit</b> - returned if a policy rule was applicable and thus it 
	returned its permit effect.</li>
	<li><b>Deny</b> - returned if a policy rule was applicable and thus returned 
	its denial effect.</li>
	<li><b>Indeterminate</b> - returned if an attribute value that was needed to
evaluate a rule could not be found, or another error prevented processing.</li>
	<li><b>NotApplicable</b> - returned if no rule applied and so no effect 
	could be returned.</li>
</ul>
</div>
<div dir="ltr" align="left">
	Given the default policy combining algorithm of&nbsp; &quot;Ordered Deny 
	Overrides,&quot; the PDP will make its final decision for a policy set such that
	<b>&nbsp;DENY</b> will prevail over PERMIT.&nbsp;&nbsp; If one or more 
	policies evaluate to Deny, Sun XACML gives a verdict of DENY.&nbsp; If one or 
	more policies evaluate to Indeterminate, and no policies evaluate to Deny, 
	the verdict is INDETERMINATE.&nbsp; If one or more policies evaluate to Permit, 
	and no policies evaluate to either Deny or Indeterminate, the verdict is 
	PERMIT.&nbsp; If one or more policies evaluate to NotApplicable, and no policies 
	evaluate to Permit or Deny or Indeterminate, the verdict is NOTAPPLICABLE.&nbsp;</div>
<div dir="ltr" align="left">
	<span class="892423617-14102005"></span>&nbsp;</div>
<div dir="ltr" align="left">
	<b>(2)&nbsp; PDP (Fedora wrapper&nbsp;perspective):&nbsp;&nbsp;&nbsp;</b></div>
<div dir="ltr" align="left">
&nbsp;<p>The Fedora wrapper respects the verdict of the Sun XACML PDP, which 
	should usually be PERMIT or DENY, given our default set of policies.&nbsp; But, 
	for safety, the Fedora wrapper code imposes a DENY result in any of several 
	extraordinary cases:&nbsp; (1) if somehow Sun XACML returned a final result 
	of Indeterminate or NotApplicable, (2) if Sun XACML returned no result at 
	all, (3) if Sun XACML returned a result which is not defined by OASIS XACML 
	or Sun XACML standards (the sunxacml Java interface uses int to code the 
	results, so sunxacml could return bad results), or (4) if authorization 
	processing results in a exception being thrown.</div>
<div dir="ltr" align="left">
	<span class="892423617-14102005"></span>&nbsp;</div>
<div dir="ltr" align="left">
	<b>3)&nbsp; PDP (Bottom line perspective):&nbsp; </b>
	<p>&nbsp;</p>
	<p>As a rule, a policy set evaluates to PERMIT when at least one policy in 
	the set evaluates to Permit and no policies evaluating to Deny or 
	Indeterminate.&nbsp; Otherwise, the policy set evaluates to DENY.&nbsp; </p>
	<p>Specifically:</p>
	<p>a) DENY occurs when there is at least one policy that evaluates to Deny 
	or an Indeterminate.</p>
	<p>b) DENY occurs if no policy evaluates to Permit.&nbsp; A DENY also occurs 
	in several exceptional situations:</p>
	<p>a) DENY occurs when no policies were found to be applicable (all evaluate 
	to NotApplicable) or the related case of there being no policies at all 
	configured with Fedora</p>
	<p>b) DENY occurs errors occurred during authorization processing, including 
	no or bad results obtained.<br>
	<span class="892423617-14102005"></span>&nbsp;</p>
	<p>&nbsp;</div>
<h3><a name="IMPL-PEP">4<b>.4&nbsp; Fedora PEP Implementation Details</b></a></h3>
	<p style='text-autospace:none'>Fedora's Policy Enforcement Point (PEP) builds a
minimal request for the Sun XACML engine to evaluate.&nbsp; One job of the 
	Fedora PEP is to gather up all of the Subject/Resource/Action/Environment 
	attributes that are relevant for an incoming service requests.&nbsp;&nbsp; 
	The values of this attributes are the key to determining what policies are 
	in scope for an incoming service request.&nbsp;&nbsp; To gather up all 
	relevant attributes,&nbsp; the Fedora PEP has two custom &quot;attribute finder&quot; modules 
	that interact with the Sun XACML engine. </p>
<ul>
	<li>
	<p style='text-autospace:none'>The <b>ContextAttributeFinderModule</b> has 
	the job of obtaining attributes that are stored in the enhanced Fedora 
	Context object that is associated with an incoming Fedora service request.&nbsp;&nbsp;&nbsp; 
	Attributes that originate with an incoming service requests can be Subject 
	attributes (i.e., attributes of the requesting user/agent), Action 
	attributes (i.e., the identity of the Fedora API operation that is the basis 
	of the request), Resource attributes (i.e.,&nbsp; attributes that identify 
	specific objects/datastreams/disseminations that are being requested, and 
	Environment attributes (i.e., attributes that describe the runtime 
	environment of the incoming request, like the current date/time or the 
	server IP address).&nbsp;&nbsp; It will honor a callback, even for an attribute which hasn't been explicitly coded, so
can provide arbitrary attributes (e.g., from LDAP lookup in a JAAS login module, 
	from Shibboleth via a servlet filter).  [There are a few
attributes which it explicitly doesn't serve, to prevent stack overflow on improper recursion, or because
the attributes are known to be provided in the xacml request itself.]</p></li>
	<li>
	<p style='text-autospace:none'>The <b>ResourceAttributeFinderModule</b> has 
	the job of obtaining all relevant attributes about Fedora resources (i.e., 
	digital objects, datastreams, and disseminations) for resources that are in 
	scope for an incoming request.&nbsp;&nbsp; While a few attributes of a 
	resource are picked up from the incoming request itself (typically, the 
	identity of a resource like a PID or a datastream Id), the 
	ResourceAttributeFinderModule gets all other attributes about such resources 
	by introspecting on actual digital objects in the repository.  </p></li>
</ul>
<p><b>&lt;TODO:&nbsp; Bill what else do we want here?&gt;</b></p>
<h2>&nbsp;</h2>
<h2><a name="ATTR"><b>5 How to Send User Attributes into the Fedora Policy 
Enforcement Module</b></a></h2>
	<p><b>&nbsp;</b></p>
	<h3><a name="ATTR1"><b>5.1  Tomcat-users attributes</b></a></h3>
	<p><b><i>&nbsp;&lt;TODO&gt;</i></b></p>
	<h3><a name="ATTR2"><b>5.2  LDAP attributes</b></a></h3>
	<p><b>&nbsp;<i>&lt;TODO&gt;</i></b></p>
<p>&nbsp;</p>
	<h3><a name="ATTR3"><b>5.3  Shibboleth attributes via an HTTP Servlet Filter</b></a></h3>
	<p><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>
	<p style='text-autospace:none'>There are cases when an
application may obtain authenticated user attributes in an application or
service layer outside the context of the Fedora repository service.  Fedora
provides a simple means of getting these attributes into the Fedora repository
service so they can be used by the Fedora XACML policy enforcement module.  To
support the ability for upstream applications or services to send these user
attributes into a repository, Fedora will recognize a special HTTP servlet
request attribute named fedora.server.Context.FEDORA_AUX_SUBJECT_ATTRIBUTES.</p>
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='text-autospace:none'>The Fedora repository service
will automatically look for an HTTP servlet request attribute named after this
constant.  The Fedora code now takes a request attribute found under that name,
as a Map giving name and values of subject attributes. Currently, name must
be a String and this is unlikely to change. Value must be a String, and later
this might be relaxed to include String[], to allow  attributes with multiple
values.  Other types of value are not serviced. The effect of having a key
=&gt; value pair &quot;a&quot; =&gt; &quot;b&quot; in the Map  is the same as
having a Tomcat role &quot;a=b&quot;, with the exception that the effect of
having the same attribute key redefined both places is right now undefined.  So
your servlet filter needs only create the map and populate it, and put it into an
HTTP servlet request as attribute named fedora.server.Context.FEDORA_AUX_SUBJECT_ATTRIBUTES. 
Fedora will then  ook for it, and use the attributes in XACML-based
authorization.  </p>
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='text-autospace:none'>This approach was initially
developed to support a Shibboleth servlet filter that is offered to the Fedora
community by OhioLink.  Although full Shibboleth integration with Fedora will
be pursued for future releases of Fedora, the ability to send attributes into
Fedora via a servlet filter is a way to get started with using
Shibboleth-acquired attributes in Fedora XACML policy enforcement.  It should
be noted that this means of getting attributes into Fedora can be used with any
subject attribute source (i.e., it remains source-neutral and doesn't favor
Shibboleth or any other particular scheme). </p>
	<p><b><span style='font-size:14.0pt'>&nbsp;</span></b></p>

<h2><a name="DEFAULT"><b>6 Default Repository Policies for Fedora</b></a></h2>
	<p>&nbsp;</p>
<h3><b>6.1 Default Access Control Policies</b></h3>
<p>Out of the box, the Fedora repository will have a default set of access 
control policies that provide for a highly restricted management service 
(API-M), an open access service&nbsp; (API-A), and an open OAI provider service.&nbsp;&nbsp; 
The default access control policies establish the same level of security on the 
repository that were previously configured for Fedora 2.0 release; however, as 
of Fedora 2.1 these basic access controls are now specified as XACML policies.&nbsp;&nbsp; 
The default access control policies can be found within the Fedora software 
distribution in the following directory: <span style="font-family: Courier New">&nbsp;</span></p>
<p><span style="font-family: Courier New"><b>dist\server\config\xacml-policies\default\default-repository-policies-approximating-2.0</b></span></p>
<p><i>The first time the Fedora repository server is started, these policies 
will be automatically copied into the official <a href="#CONFIG-STORE">
repository-wide policy storage location </a>that was specified in the Fedora 
configuration file (fedora.fcfg).&nbsp; The policies are activated once they are 
copied into this location. </i>&nbsp;</p>
<p>&nbsp;</p>

<table border="1" width="100%">
	<tr>
		<td width="41">&nbsp;</td>
		<td width="64"><b>Service</b></td>
		<td width="260"><b>&nbsp;XACML Policy File</b></td>
		<td><b>&nbsp; Policy Description</b></td>
	</tr>
	<tr>
		<td width="41">1</td>
		<td width="64"><font size="2">any</font></td>
		<td width="260"><font size="2">
		<a href="xacml-policies/default/repository-wide/permit-anything-to-administrator.xml">permit-anything-to-administrator.xml</a></font></td>
		<td><font size="2">This is a &quot;positive policy&quot; that permits the Fedora 
		administrator to have access to any operation on any Fedora repository 
		service (API-M, API-A, OAI, RISearch).&nbsp; By default the Fedora 
		administrator is configured in the default Tomcat user credentials file 
		(tomcat-users.xml).</font></td>
	</tr>
	<tr>
		<td width="41">2</td>
		<td width="64"><font size="2">API-M</font></td>
		<td width="260"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-apim-if-not-localhost.xml">deny-apim-if-not-localhost.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that denies access to 
		API-M operations that are not made from the IP address of the machine on 
		which the Fedora repository is running on.&nbsp;&nbsp; In other words, 
		the policy will not allow API-M requests from hosts other than 
		&quot;localhost.&quot;</font></td>
	</tr>
	<tr>
		<td width="41">3</td>
		<td width="64"><font size="2">API-A</font></td>
		<td width="260"><font size="2">
		<a href="xacml-policies/default/repository-wide/permit-apia-unrestricted.xml">permit-apia-unrestricted.xml</a></font></td>
		<td><font size="2">This is a &quot;positive policy&quot; that permits unrestricted 
		access to API-A.&nbsp; In other words, API-A operations are completely 
		open for use by any user/agent.</font></td>
	</tr>
	<tr>
		<td width="41">4</td>
		<td width="59"><font size="2">OAI</font></td>
		<td width="423"><font size="2">
		<a href="xacml-policies/default/repository-wide/permit-oai-unrestricted.xml">permit-oai-unrestricted.xml</a></font></td>
		<td><font size="2">This is a &quot;positive policy&quot; that permits unrestricted 
		access to the default OAI provider interface to the Fedora repository.&nbsp; 
		In other words, OAI-PMH operations are completely open for use by any 
		user/agent.&nbsp; (Note, this does not control access to the stand-alone 
		PROAI service that is distributed with Fedora 2.1.&nbsp; PROAI is a 
		stand-alone web application that must be secured separately.</font></td>
	</tr>
</table>
<p>&nbsp;</p>
<p>A review of how the policy combining algorithm works, will reveal that access 
to a service operation cannot occur unless access is <i><b>expressly permitted.</b></i>&nbsp;&nbsp; 
The net effect of the default access control policies is that the administrator 
is expressly permitted to do anything (with the restriction of having to make 
API-M requests from the same IP address that the server runs on),&nbsp; and all 
users are expressly permitted access to API-A and OAI service requests.</p>
<p>&nbsp;</p>
<h3><b>6.2&nbsp; Default Utility Policies</b></h3>
	<p>Generally, the default repository utility policies <i><b>should not
be removed</b></i>.  <i>&lt;Discuss more.&gt;</i></p>
<p>&nbsp;</p>
<table border="1" width="100%">
	<tr>
		<td width="41">&nbsp;</td>
		<td width="78"><b>Service</b></td>
		<td width="416"><b>&nbsp; XACML Policy File</b></td>
		<td><b>&nbsp; Policy Description</b></td>
	</tr>
	<tr>
		<td width="41">1</td>
		<td width="78"><font size="2">serverAdmin</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-policy-management-if-not-administrator.xml">deny-policy-management-if-not-administrator.xml</a></font></td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td width="41">2</td>
		<td width="78"><font size="2">any</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-inactive-or-deleted-disseminations-if-not-administrator.xml">deny-inactive-or-deleted-disseminations-if-not-administrator.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will deny all access 
		to inactive/deleted disseminations if the user/agent is not the Fedora 
		administrator.&nbsp;&nbsp; Unlike purged disseminations, 
		inactive/deleted disseminations still exist, but they are just marked as 
		inactive/deleted.&nbsp;&nbsp; As such they should not be available to 
		users.&nbsp; The exception is that the Fedora administrator is allowed 
		to access them.&nbsp; </font></td>
	</tr>
	<tr>
		<td width="41">3</td>
		<td width="78"><font size="2">any</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-inactive-or-deleted-objects-or-datastreams-if-not-administrator.xml">deny-inactive-or-deleted-objects-or-datastreams-if-not-administrator.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will deny all access 
		to inactive/deleted datastreams if the user/agent is not the Fedora 
		administrator.&nbsp;&nbsp; Unlike purged datastreams, inactive/deleted 
		datastreams still exist, but they are just marked as inactive/deleted.&nbsp;&nbsp; 
		As such they should not be available to users.&nbsp; The exception is 
		that the Fedora administrator is allowed to access them.&nbsp; </font>
		</td>
	</tr>
	<tr>
		<td width="41">4</td>
		<td width="78"><font size="2">API-M</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-purge-datastream-if-active-or-inactive.xml">deny-purge-datastream-if-active-or-inactive.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will ensure that 
		datastreams cannot be purged (permanently removed) unless they are in 
		the deleted state.&nbsp; Purging of active or inactive datastreams is 
		not allowed.&nbsp; </font></td>
	</tr>
	<tr>
		<td width="41">5</td>
		<td width="78"><font size="2">API-M</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-purge-object-if-active-or-inactive.xml">deny-purge-object-if-active-or-inactive.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will ensure that 
		objects cannot be purged (permanently removed) unless they are in the 
		&quot;deleted&quot; state.&nbsp; Purging of active or inactive objects not 
		allowed. </font></td>
	</tr>
	<tr>
		<td width="41">6</td>
		<td width="78"><font size="2">serverAdmin</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-reloadPolicies-if-not-localhost.xml">deny-reloadPolicies-if-not-localhost.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will deny requests 
		to reload policies (i.e., policy reactivation) if this requests is not 
		initiated from the IP address of the machine on which the repository is 
		running (i.e., localhost).</font></td>
	</tr>
	<tr>
		<td width="41">7</td>
		<td width="78"><font size="2">serverAdmin</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-serverShutdown-if-not-localhost.xml">deny-serverShutdown-if-not-localhost.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will deny requests 
		to shutdown the Fedora server if this requests is not initiated from the 
		IP address of the machine on which the repository is running (i.e., 
		localhost).</font></td>
	</tr>
	<tr>
		<td width="41">8</td>
		<td width="78"><font size="2">serverAdmin</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/permit-adminPing-unrestricted.xml">permit-adminPing-unrestricted.xml</a></font></td>
		<td><font size="2">This is a &quot;positive policy&quot; that permits unrestricted 
		access for pinging of the Fedora server.</font></td>
	</tr>
	<tr>
		<td width="41">9</td>
		<td width="78"><font size="2">serverAdmin</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/permit-serverStatus-unrestricted.xml">permit-serverStatus-unrestricted.xml</a></font></td>
		<td><font size="2">This is a &quot;positive policy&quot; that permits unrestricted 
		access for obtaining the Fedora server status.</font></td>
	</tr>
</table>
	<p>&nbsp;</p>
<p><b><span style='font-size:14.0pt'>&nbsp;</span></b></p>
	
<h2><a name="CUSTOM"><b>7 Sample Policies for Typical Fedora Use</b></a></h2>
	<p><b><span style='font-size:14.0pt'>&nbsp;</span></b></p>
<p>The Fedora Policy Enforcement Module is intended to provide a flexible means 
of creating access control for a repository and for digital objects within a 
repository.&nbsp;&nbsp; Therefore, it is expected that each Fedora repository 
will have XACML policies appropriate for specific contexts and use cases.&nbsp;&nbsp;&nbsp; 
All repositories will start off, out of the box, with the set of default 
repository policies.&nbsp;&nbsp; These policies set up a world where (1) users 
in the Fedora administrator role are permitted to do
anything (see permit-anything-to-administrator.xml), (2) access to the API-M 
service is restricted to localhost (<font size="2">deny-apim-if-not-localhost.xml)</font>, 
and (3) the Fedora API-A service is totally
unrestricted (see permit-apia-unrestricted.xml).</p>
<p>Given this out-of-the-box starting point, the perspective that can be taken 
to easily understand how to write new custom policies is:</p>
<ul>
	<li>write new policies to <b><i>tighten up </i></b>access controls for the API-A 
	service&nbsp; (i.e., start to selectively deny access)</li>
	<li>write new policies to<b><i> loosen up</i></b> access controls for the 
	API-M service (i.e., start to selectively permit access)</li>
</ul>
<p>Please consult the <a href="SamplePolicyGuide.htm">Sample Policy Guide</a> 
which describes a reference collection of sample policies that would be useful 
for Fedora repositories.&nbsp;&nbsp; The collection contains examples of 
repository-wide and object-specific policies for restricting access to groups of 
digital objects based on certain attributes of the objects, for restricting 
access to certain kinds of datastreams and disseminations, for selectively 
permitting access to different API-M operations, and more.&nbsp;&nbsp; These 
policies can be found within the Fedora software distribution in the following 
directories:&nbsp;&nbsp;&nbsp;
<span style="font-family: Courier New; font-weight: 700">dist\server\config\xacml-policies\examples</span></p>
<p>
	&nbsp;</p>
	<p>=================================================================</p>
<p>REMAINING SOURCE NOTES TO INTEGRATE:</p>
<p>&nbsp;</p>
	<p><b><i>&lt;Bill – what is relationship of configured policy
combining algorithm  to the rule combining algorithm in the policy?&gt;</i></b><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>to do:  should one object policy
override the other?  if so, what order of preference?</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>to do:  should there be a way for
an object policy to override repository policies?  e.g., </span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>we could have 2 named policy
datastreams COOPERATING-POLICY (like now) and OVERRIDING-POLICY</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>(which would cause the software to
ignore a COOPERATING-POLICY datastream -and- all of</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>the repository policies.  This
would be easy to do in the software.  This is solely a </span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>question of how we want this to
work.</span></p>
<p style='text-autospace:none'>
	&nbsp;</p>
<p style='text-autospace:none'>
<i>To quiet sunxacml INFO messages, a logging.properties file is included with the 
Fedora distribution,<br>
edited to print only SEVERE messages to the console. Fedora then starts Java 
using that logging.properties file.<br>
The original file, as distributed with JDK 1.4.2.8, prints INFO (and more 
severe) messages, making the console a bit<br>
chatty. To revert to the original logging behavior, edit fedora-start.bat 
(Windows) or fedora.sh (Unix), and remove</i></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>
	<p>&nbsp;</p>
	<p><b><span style='font-size:14.0pt'>&nbsp;</span></b></p>
	<p>&nbsp;</p></li>
</ol>

</body>

</html>
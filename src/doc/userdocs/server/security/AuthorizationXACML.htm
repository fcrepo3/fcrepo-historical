<html>

<head>
	<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
	<meta name=Generator content="Microsoft Word 10 (filtered)">
	<title>Authorization: XACML Policy Enforcement for Fedora</title>
	<link rel="stylesheet" type="text/css" href="../../docstyle.css">
</head>

<body lang=EN-US link=blue vlink=purple>

<div id="header">
    <a href="../index.html" id="logo"></a>
    <div id="title">
		<h1>Fedora Authorization with&nbsp;XACML Policy Enforcement</h1>
    </div>
    <p><b><span style='font-size:16.0pt'>&nbsp;</span></b></p>
</div>

<div class="toc">
    <h2>Table of Contents</h2>
    <div class="tocbox">
        <ol>
            <li><a href="#INTRO">Introduction</a>
            
            <li><a href="#CONFIG">Configuring the XACML Authorization Module</a></li>
                 <ul>
					<li><a href="#CONFIG-ENABLE">2.1 Enabling/Disabling XACML Policy Enforcement</a></li>
					<li><a href="#CONFIG-STORE">2.2 Configuring the &quot;Active&quot; Policies Storage Location</a></li>
					<li><a href="#CONFIG-ACTIVATE">2.3 How to Activate and Load 
					Policies</a></li>
					<li><a href="#CONFIG-VALIDATE">2.4 Enabling/Disabling Policy Validation</a></li>
					<li><a href="#CONFIG-SURROG">2.5 Configuring “Surrogate” Policies (and what are they?)</a></li>
			</ul>
			<li><a href="#IMPL">Implementation of the Fedora Policy Enforcement Module</a></li>
                <ul>
					<li><a href="#IMPL-PDP-PEP">3.1 Policy Determination Point (PDP) and Policy Enforcement Point (PEP)</a></li>
					<li><a href="#IMPL-ALGORITHM">3.2 Understanding the XACML Policy Combining Algorithm</a></li>
					<li><a href="#IMPL-DECISION">3.3 A Simplified Understanding 
					of the Authorization Decision</a></li>
					<li><a href="#IMPL-PDP">3.4 PDP Implementation Details</a></li>
					<li><a href="#IMPL-PEP">3.5 PEP Implementation Details</a></li>
			</ul></li>
			<li><a href="#ATTR">How to Bind User Attributes into the Fedora Policy Enforcement Module</a>
			<ul>
				<li><a href="#ATTR1">4.1  Tomcat-users attributes</a></li>
				<li><a href="#ATTR2">4.2  LDAP attributes</a></li>
				<li><a href="#ATTR3">4.3  Shibboleth attributes via an HTTP Servlet Filter</a></li>
			</ul>
			<li><a href="#DEFAULT">Default Repository Policies for Fedora</a>
			<li><a href="#CUSTOM">Sample Policies for Typical Fedora Use</a>
           </ol>
    </div>
</div>

<div class=Section1>

<h2><a name="INTRO">1 Introduction</a></h2>
<p>&nbsp;</p>

<p><font face="Arial" style="font-size: 9pt">A major feature of the new Fedora 
security architecture is the introduction of the
<a href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">
eXtensible Access Control Markup Language</a> (XACML) and an XACML-based policy 
enforcement module.&nbsp;&nbsp;&nbsp; Developed by the OASIS Consortium, XACML 
is an XML-based markup language to encode access control policies.&nbsp; The 
policy language is flexible and enables the specification of fine-grained, 
machine-readable policies that can be used to control access to Fedora web 
services, Fedora digital objects, datastreams, disseminations, and more.&nbsp;&nbsp;&nbsp; 
Since a policy is only worth its salt if it can be enforced, Fedora 2.1b 
introduces a new Authorization module implemented as part of the core Fedora 
repository service.&nbsp;&nbsp;&nbsp; The Authorization module is built upon the
<a href="http://sunxacml.sourceforge.net">Sun XACML engine</a>.&nbsp; Each XACML 
policy defines: (1) a &quot;target&quot; describes what the policy applies to (by 
referring to attributes of users, operations, objects, datastreams, dates, and 
more), and (2) one or more &quot;rules&quot; to permit or deny access.&nbsp; There is a
<a href="XACMLPolicyGuide.htm#POLICY-VOCAB">Fedora-specific policy vocabulary</a> 
for referring Fedora operations and Fedora-specific entities within XACML 
policies.&nbsp;&nbsp;&nbsp; Regarding policies, Fedora supports both 
repository-wide policies (that specify broad access controls that apply to the 
entire repository), and object-specific policies (that specify rules for a 
single object, and can even be stored within the object in a special 
datastream).&nbsp; Fedora 2.1b comes out-of-the-box with a set of
<a href="#DEFAULT">default repository-wide policies</a> that establish baseline 
access controls that are equivalent to what was provided in Fedora 2.0.&nbsp;&nbsp; 
These default policies restrict access to the Fedora management web service 
(API-M) to only the Fedora administrator, permit open access to the Fedora 
access web service (API-A), and establish some other basic controls (e.g., allow 
access to API-M only from localhost; restrict policy management to 
administrator).&nbsp;&nbsp; In addition to the default policies (which can be 
modified), any number of custom XACML policies can be written and loaded into 
Fedora.&nbsp;&nbsp; For assistance in creating new policies for your repository 
and for your objects, see the <a href="XACMLPolicyGuide.htm">Fedora XACML Policy 
Writing Guide</a>. </font> </p>
<p>This guide is intended to give a general overview of XACML-based Policy 
Enforcement Module to support authorization in 
Fedora repositories.&nbsp;&nbsp;&nbsp; This guide provides Instructions on how to 
configure XACML-based policy authorization in Fedora as well as a discussion of 
how the Fedora Policy Enforcement module works.&nbsp; <b> <i>&nbsp;</i></b> For 
more information consult the following sources:</p>
<p>&nbsp;</p>
<p><b>Fedora Security Architecture:</b></p>
<p><a href="securingrepo.html">Securing Your Repository</a> 
: 
documentation on security options and configuring configuring user 
authentication sources for Fedora repositories</p>
<p><a href="AuthorizationXACML.htm">Fedora XACML Policy Writering Guide</a> : 
documentation for details on writing XACML policies for Fedora repositories</p>
<p>&nbsp;</p>
<p><b>OASIS&nbsp; (for policy writers)</b></p>
<p><br>
<a href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">
OASIS XACML Specification</a>:&nbsp;
this is the official specification and a good reference document. <br>
<br>
<a href="http://www.oasis-open.org/committees/download.php/2713/Brief_Introduction_to_XACML.html">
A Brief Introduction to XACML</a>:&nbsp; this is nice introduction to the XACML 
concepts<br>
<br>
<a href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=xacml">XACML 
Technical Committee</a>:&nbsp;&nbsp; this home page of the technical committee 
provides access to other documents on XACML<br>
<br>
<br>
<b>SUN&nbsp; (for developers)</b></p>
<p><br>
<a href="http://sunxacml.sourceforge.net">Sun XACML Home Page</a>:&nbsp; 
general information on the Sun Java reference implementation of XACML</p>
<p><a href="http://sunxacml.sourceforge.net/guide.html">Sun XACML Programmer 
Guide</a>:&nbsp; technical details of the reference implementation</p>
<p><a href="http://sunxacml.sourceforge.net/javadoc/index.html">Sun XACML 
Javadocs</a>:&nbsp; interface definitions of the reference implementation<br>
<i><br>
&nbsp;</i></p>

</div>
<h2><a name="CONFIG"><span style="font-size: 14pt">2</span><b><span style='font-size:14.0pt'> Configuring the XACML Authorization Module</span></b></a></h2>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>&nbsp;</span></p>
	<p><i>Note that to do identity-based policies (user login id or user 
	attributes), you must have authentication configured.&nbsp;&nbsp;&nbsp; Run 
	fedora-setup to choose which Fedora service interfaces will be configured 
	for authentication.&nbsp;&nbsp; If a policy is written that makes reference 
	to required (MustBePresent="true", either explicitly or by default) user identity or attributes (Subject attributes in Policy target) and 
	authentication has not been configured, the policy will be evaluated as 
	&quot;indeterminate&quot; and the service request will fail with an authorization 
	exception.&nbsp;&nbsp; Be sure to enable authentication for API-A if you 
	intend to write policies for accessing objects based on user 
	identity/attributes.&nbsp; </i></p>
<p>&nbsp;</p>
<p>By default, Fedora XACML-based authorization is enabled.&nbsp;&nbsp; Configuration of the Fedora XACML-based Policy Enforcement
Module is done in the Fedora server configuration file (fedora.fcfg).  Depicted
below is the section of the configuration file for the Authorization module
that controls XACML-based policy enforcement.</p>

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
	<pre style="text-autospace:none">&lt;module role=&quot;fedora.server.security.Authorization&quot; class=&quot;fedora.server.security.DefaultAuthorization&quot;&gt;</pre>
	<pre style="text-autospace:none">    &lt;comment&gt;Builds and manages Fedora's authorization structure.&lt;/comment&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;ALLOW-SURROGATES&quot; value=&quot;false&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;REPOSITORY-POLICIES-DIRECTORY&quot; value=&quot;/fedora-xacml-policies/repository-policies&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;OBJECT-POLICIES-DIRECTORY&quot; value=&quot;/fedora-xacml-policies/object-policies&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;SURROGATE-POLICIES-DIRECTORY&quot; value=&quot;/fedora-xacml-policies/surrogate-policies&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;XACML-COMBINING-ALGORITHM&quot; value=&quot;com.sun.xacml.combine.OrderedDenyOverridesPolicyAlg&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;ENFORCE-MODE&quot; value=&quot;enforce-policies&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;POLICY-SCHEMA-PATH&quot; value=&quot;xsd/cs-xacml-schema-policy-01.xsd&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;VALIDATE-REPOSITORY-POLICIES&quot; value=&quot;true&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;VALIDATE-OBJECT-POLICIES-FROM-FILE&quot; value=&quot;false&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;VALIDATE-OBJECT-POLICIES-FROM-DATASTREAM&quot; value=&quot;false&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;VALIDATE-SURROGATE-POLICIES&quot; value=&quot;false&quot;/&gt;</pre>
	<pre style="text-autospace:none">&lt;/module&gt;</pre>

      </div>

	<p>&nbsp;</p>
<h3><a name="CONFIG-ENABLE">2</a><b><a name="CONFIG-ENABLE">.1 Enabling/Disabling XACML Policy Enforcement</a></b></h3>
	<p>&nbsp;</p>
	<p>To enable/disable XACML policy enforcement in Fedora, use
the Fedora configuration file (fedora.fcfg).  Whether Fedora uses XACML for
authorization decisions is controlled by the “ENFORCE-MODE” parameter in the
Authorization module:</p>

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
	<pre style="text-autospace: none">    &lt;param name=&quot;ENFORCE-MODE&quot; value=&quot;enforce-policies&quot;/&gt;</pre>
</div>

	<p>&nbsp;</p>
<p>The &quot;ENFORCE-MODE&quot; parameter can contain one of
three values, with the following meanings:</p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'> </span></p>
	<p style='text-indent:.5in;text-autospace:none'>
	<span
style='font-size:10.0pt;font-family:"Courier New";background:white'>enforce-policies
- enable XACML enforcement to determine whether a request is permitted or
denied</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>      permit-all-requests – disable
XACML enforcement; PERMIT every request</span><span style='font-size:10.0pt;
font-family:"Courier New"'> by default</span></p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New";background:white'>      deny-all-requests -  disable XACML
enforcement; DENY every request</span><span style='font-size:10.0pt;font-family:
"Courier New"'> by default</span></p>
	<p>&nbsp;</p>
	<p>&nbsp;</p>
	<p>The “enforce-policies” setting is used to enable the
enforcement of XACML policies, and is the default setting for a Fedora
repository.  The “permit-all-requests” setting can facilitate testing code
independent of security.  The “deny-all-requests” setting can be used to
quickly shut down access to the server, but requires a server restart to affect
this.</p>
	<p>&nbsp;</p>
	<p>Tomcat container security is, of course, still a first
barrier to authentication/authorization (i.e., Fedora's Tomcat web.xml
specifies access protection earlier than XACML.  Tomcat container security is
always in place regardless of the setting for parameter ENFORCE-MODE.</p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<h3><a name="CONFIG-STORE">2</a><b><a name="CONFIG-STORE">.2 Configuring the Active Policies Storage Location</a></b></h3>
	<p>&nbsp;</p>
<p>Active policies are those policies that are &quot;in play&quot; for the repository.&nbsp;&nbsp;&nbsp; 
In the Authorization module section of the Fedora server configuration file 
(fedora.fcfg),&nbsp; there are parameters to set the storage location for active 
policies.&nbsp;&nbsp; <i><b>The Fedora repository will only know about policies 
that are stored in the configured policy directories.&nbsp; Policies stored in 
any other location will be invisible to the repository.&nbsp;&nbsp;&nbsp;&nbsp;
</b></i></p>
<p>The configuration parameters in the Authorization module provide the 
repository administrator with a choice as to where XACML policy files are 
stored.&nbsp;&nbsp; You can keep the default values, which will designate a 
directory path at the root of the disk where the repository server is running.&nbsp;&nbsp; 
The policy storage locations work just like the digital object and datastream 
storage locations that are configured for the server (also in fedora.fcfg).&nbsp;&nbsp; 
It is expected that repository administrators appropriately protect these 
directories so that they cannot be tampered with.</p>
<p>It should be noted that Fedora comes out-of-the-box with a set of default 
repository-wide policies.&nbsp; The default policies are automatically copied 
into the active policies storage location the first time the Fedora repository 
server is started (i.e., copied into a subdirectory named &quot;/default&quot;).&nbsp;&nbsp;
<b><i>Any changes to the default policies should be made in this active policy 
directory .&nbsp; The policies located in the Fedora software distribution 
directory ($FEDORA_HOME/dist/server/config/xacml-policies) are NOT active and 
are not loaded by the repository!&nbsp;&nbsp; </i></b>It is recommended that 
changes to the default repository-wide policies are made with extreme care.&nbsp;&nbsp; 
These policies establish the baseline authorization rules for Fedora.&nbsp; 
Refer to the documentation below&nbsp; on <a href="#DEFAULT">default repository 
policies </a>for a description of what each policy does.&nbsp; </p>
<p>In addition to the default policies,&nbsp; it is possible to create any 
number of custom XACML policies for a repository and for specific digital 
objects.&nbsp;&nbsp; Consult the Fedora <a href="XACMLPolicyGuide.htm">XACML 
Policy Writing Guide </a>for instructions on authoring new policies and a set of 
sample policies for Fedora. </p>
<p>&nbsp;</p>
	<p><b><i><a name="STORE-REPO-WIDE"></a>a. </i></b>&nbsp;<b><i>Repository-wide policies stored in central location</i></b></p>
	<p>&nbsp;</p>
	<p>The storage location for active repository-wide policies can be set
by the repository administrator using the follow parameter in Authorization
module (in fedora.fcfg):   </p>
<p>&nbsp;</p>
<div class="code">
	<pre style="text-autospace: none">    &lt;param name=&quot;REPOSITORY-POLICIES-DIRECTORY&quot; value=&quot;/fedora-xacml-policies/repository-policies&quot;/&gt;</pre>
</div>

	<p>&nbsp;</p>
	<p>Repository-wide policies are broad policies that are
intended to be in play for the entire Fedora repository.  By saying that these
policies are “broad,” does not mean they must be course-grained. 
Repository-wide policies can  be fine-grained and they can be written to
control access to any Fedora API operation, to groups of digital objects, or
even to sets of specifically identified digital objects.  Repository-wide
policies are distinguished from object-specific policies (described below) in
that they will be evaluated for their applicability for every Fedora service
request.  In contrast, object-specific policies are only evaluated for service
requests that actually mention a specific object by its PID.   It should be
noted that a repository-wide policy can still be written to address a specific
digital object.  The disadvantage of putting such a policy in the
repository-wide storage location is that it unnecessarily evaluated for
requests that do not pertain to the specific digital object it is about.   As
described below, there are better places to store a policy that pertains to a
single digital object.</p>
	<p>&nbsp;</p>
	<p><b><i><a name="STORE-OBJ-SPECIFIC"></a>b. Object-specific policies stored in a central location</i></b></p>
	<p><b><i>&nbsp;</i></b></p>
<p>Object-specific policies can be stored in a
centrally configured location, outside of the digital object that the policy is
written for.   The location for active object-specific policies is configured in
the following parameter of the Authorization module (in fedora.fcfg):</p>
	<p>&nbsp;</p>
<div class="code">
	<pre style="text-autospace: none">    &lt;param name=&quot;OBJECT-POLICIES-DIRECTORY&quot; value=&quot;/fedora-xacml-policies/object-policies&quot;/&gt;</pre>
</div>

	<p>&nbsp;</p>
<p>An object policy named “demo-5.xml” in this directory will
be included only in the evaluation of policies for requests for the Fedora object whose
PID is “demo:5.”   If this policy file is mistakenly put into
repository-policies directory, it has the same effect at the time of policy
evaluation and enforcement, if the best practice is followed of coding the policy to restrict 
its application to that single object.   The configuration of the object-policies
directory is not just a convenient way to easily distinguish between
broader repository policies and policies that are intended to be applicable to
a single digital object (but which are not stored inside the “POLICY” datastream of
an object).  Only a single file in that directory is included in policy evaluation, whose filename
matches the object PID.   </p>
	<p>&nbsp;</p>
	<p>As previously noted, if an object-specific policy mistakenly
gets put into repository-policies directory, it has the same effect at
enforcement time (again, if best practice is followed).   It will just be unnecessarily in scope for evaluation for
service requests that it will never be applicable to.</p>
<p>Object-specific policies stored as operating system files exist as a testing convenience, or
for repositories with small numbers of objects.  
Intended use is for an object to have at most one object-specific policy.
If an object has two object-specific policies, 
one as an operating system file and another in the object itself as a datastream (see following),
they could easily subvert the intended authorization effect.
If required, that single object-specific policy could be in fact an XACML policy set consisting
of multiple XACML policies.  The point is that this would still reside in one location only.
</p>

	<p>&nbsp;</p>
	<p><b><i>c. Object-specific policies stored inside digital
objects</i></b></p>
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='text-autospace:none'>An object-specific policy can be
stored inside a digital object within the special reserved datastream whose
datastream ID is &quot;POLICY&quot;.  It is good practice with object policy's
to include a check of the PID in the policy.   One benefit of putting object
specific policies inside digital objects is that the policies become <b><i>portable</i></b>
with the object itself.   Another benefit is that it may provide for easier
distribution of policy management responsibility.  For example, authors or
owners of particular digital objects can be granted the rights to modify the
POLICY datastream of their objects, without having to obtain repository
administrator privileges to modify policies in the configured policy storage
locations for a repository.</p>
	<p><b><i>&nbsp;</i></b></p>
<p style='text-autospace:none'>&nbsp;</p>

<h3><a name="CONFIG-ACTIVATE">2<b>.3 How to Activate and Load Policies</b></a></h3>
	<p>
	&nbsp;</p>
<p>
	Policies are not considered <i><b>active</b></i> unless they are placed in the
	<a href="#CONFIG-ENABLE">active policy storage locations</a> specified in the 
	Authorization module configuration (see fedora.fcfg).&nbsp;&nbsp; 
	Once policies are placed in an active policy storage location, they are able to 
	be <i><b>loaded</b></i> by the Fedora repository server.&nbsp;&nbsp; 
	To put new custom policies into play, simply add them to an active policies 
	directory.&nbsp;&nbsp;&nbsp; To inactivate a policy, remove it from the 
	active policy directory.&nbsp; To modify an existing policies, edit the 
	policy in the active policy directories (or preferably, edit in another 
	location and replace the existing policy in the active policy directory).</p>
<p>
	To activate and load policies take the following steps:</p>
<ol>
	<li><b>Validate</b> your policies using the
	<a href="../cmd-line/index.html#validate">validate-policy</a> command line utility&nbsp;
	<i>(optional, but recommended!)</i></li>
	<li><b>Activate</b> your policies by copying them into the active policy 
	storage location configured in the 
	Authorization module (in fedora.fcfg).&nbsp; There are two active policy 
	directories:<p>&nbsp;<ul>
		<li><a href="#STORE-REPO-WIDE">REPOSITORY-POLICIES-DIRECTORY </a>&nbsp; 
		- put your custom repository-wide policies in any sub-directory under 
		this configured directory</li>
		<li><a href="#STORE-OBJ-SPECIFIC">OBJECT-POLICIES-DIRECTORY</a>&nbsp; -&nbsp; 
		put your custom object-specific policies in this configured directory, 
		with each policy named to match its object PID (e.g., demo-11.xml)</li>
	</ul>
	<p>&nbsp;</li>
	<li><b>Load</b> your policies by starting the Fedora server (using the
	<a href="../cmd-line/index.html#start">fedora-start</a> command line 
	utility).&nbsp; If the server is already started, run the
	<a href="../cmd-line/index.html#reload">fedora-reload-policies</a> command 
	line utility.&nbsp; </li>
</ol>
<p>
	It should be noted that all repository-wide policies are pre-loaded into 
	Fedora server memory every time the server is started.&nbsp; For performance reasons, object-specific policies are not 
	pre-loaded; instead they are loaded on an as-needed basis (i.e., when a 
	request for that object is made).&nbsp; </p>
<p>
	<br>
	It should also be noted that the <i><b>first time </b></i>the Fedora server 
	is started, the <i><b>default out-of-the-box policies</b></i> will be copied 
	into a subdirectory named &quot;/default&quot; under the appropriate active policy storage location 
	(configured for the Authorization module in fedora.fcfg).&nbsp;&nbsp; These 
	default policies are copied <b><i>from</i></b> the Fedora distribution 
	directory $FEDORA_HOME/dist/server/config/xacml-policies/default.&nbsp;&nbsp; 
	In Fedora 2.1b there are only <a href="#DEFAULT">default repository-wide 
	policies,</a> but no default object policies or surrogate policies.&nbsp; 
	The default out-of-box policies will be <i><b>copied only once</b></i>.&nbsp; 
	This is to prevent subsequent server restarts from clobbering any 
	customizations that may have been made to the default policies by a 
	repository administrator.</p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<h3><a name="CONFIG-VALIDATE">2</a><b><a name="CONFIG-VALIDATE">.4 Enabling/Disabling Policy Validation</a></b></h3>
	<p style='text-autospace:none'><b>&nbsp;</b></p>
	<p style='text-autospace:none'>There are several parameters in
the Authorization module configuration that control whether Fedora will attempt
to validate policies against the XML schema for XACML.    </p>
	<p>&nbsp;</p>
<div class="code">
	<pre style="text-autospace:none">&nbsp;&nbsp;&nbsp;&nbsp;&lt;param name=&quot;POLICY-SCHEMA-PATH&quot; value=&quot;xsd/cs-xacml-schema-policy-01.xsd&quot;/&gt;    </pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;VALIDATE-REPOSITORY-POLICIES&quot; value=&quot;true&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;VALIDATE-OBJECT-POLICIES-FROM-FILE&quot; value=&quot;false&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;VALIDATE-OBJECT-POLICIES-FROM-DATASTREAM&quot; value=&quot;false&quot;/&gt;</pre>
	<pre style="text-autospace:none">    &lt;param name=&quot;VALIDATE-SURROGATE-POLICIES&quot; value=&quot;false&quot;/&gt;</pre>

      </div>

	<p>&nbsp;</p>
	<p style='text-autospace:none'>By default all repository-wide
policies will be validated by the repository when they are loaded.  It is up to the repository administrator to 
	pre-validate for object-specific and surrogate policies before placing them 
	in the active policy storage location.    In general it is recommended that 
	all new policies are validated before they are put into the active policy 
	location.&nbsp; Use the
	<a href="../cmd-line/index.html#validate">validate-policy</a> command line 
	utility to validate an XACML policy file.  A policy failing validation would result in the following
	situation, according to the stated case.
	<ul>
	<li>repository policy:  authorization module failure at server startup time, server not properly started</li>
	<li>object policy:  authorization enforcement failure at request time, authorization denied</li>
	<li>surrogate policy:  authorization enforcement failure at request time, authorization denied</li>
	</ul>
	</p>
	
<p style='text-autospace:none'>
Object policies are not set to validate by default because they are loaded dynamically at each use,
and neither testing to prove adequate performance nor caching to ensure it has been done.
Surrogate policies are not set to validate by default because surrogate support is not by default turned on.
Either of these policy validation checks can be enabled by the appropriate fedora.fcfg setting. 
</p>
	<p style='text-autospace:none'><b><i>&nbsp;&nbsp;</i></b></p>

<h3><a name="CONFIG-SURROG">2</a><b><a name="CONFIG-SURROG">.5 Configuring “Surrogate” Policies (and what are they?)</a></b></h3>
<p style='text-autospace:none'>&nbsp;</p>
	<p style='text-autospace:none'>
	Web front ends or services can authenticate to Fedora as a surrogate 
	representing an end-user.&nbsp; The surrogate user must provide Fedora with 
	the identity of the end-user it is representing in the HTTP request 
	header, From:.  If Fedora
authenticates the front-end surrogate user - and there are policies allowing the front end to
	<b>actAsSurrogateFor</b> the <b>subjectRepresented -</b> then the incoming service request 
	is treated as if the end-user had been authenticated by
	Fedora.   
	The surrogate policies refer necessarily to the action <b>actAsSurrogateFor</b> and
	optionally to the subject attribute <b>subjectRepresented</b> to determine whether the automatic authentication is permitted.
	These two attributes are defined in the Fedora XACML vocabulary.   
	From that point, i.e., if permitted, the actual end user identity is subject to 
	authorization decisions based on the repository-wide and object-specific 
	policies configured for the repository, but as if the end user represented were directly in play.<i>
	User attributes are possible with properly configured JAAS login modules or using custom servlet filters.
	</i>  
	 </p>
<p style='text-autospace:none'>
	&nbsp;</p>
<p style='text-autospace:none'>
	&nbsp;</p>
<h2 style='text-autospace:none'>
	<a name="IMPL">3<b> Implementation of the Fedora Policy Enforcement Module</b></a></h2>
<h2 style='text-autospace:none'>
	&nbsp;</h2>
<h3 style='text-autospace:none'>
	<a name="IMPL-PDP-PEP">3</a><b><a name="IMPL-PDP-PEP">.1  Policy Determination Point (PDP) and Policy Enforcement Point (PEP)</a></b></h3>
<p style='text-autospace:none'>
	&nbsp;</p>
	<p style='text-autospace:none'>According to the OASIS XACML
specification, “an application functions in the role of the Policy Enforcement
Point (PEP) if it guards access to a set of resources and asks the Policy
Determination Point (PDP) for an authorization decision.  The PEP MUST abide by
the authorization decision in the following way:  A PEP SHALL allow access to
the resource only if a valid XACML response of “Permit” is returned by the
PDP.  The PEP SHALL deny access to the resource in all other cases.  An XACML
response of “Permit” SHALL be considered valid only if the PEP understands all
of the obligations contained in the response.”   </p>
	<p style='text-autospace:none'>The Fedora Policy Enforcement
Module fulfills the responsibilities of both the PDP and the PEP.&nbsp; The 
Fedora module wraps the Sun XACML implementation of the PDP.&nbsp;&nbsp; Fedora 
module also implements custom attribute finders and a custom PEP.</p>
<p>The PDP determines the set of policies that are
applicable to any given Fedora service request.  Remember the PDP determines
whether a policy is applicable by comparing the Subject/Resource/Action attribute
designations in a Policy Target to the context of an incoming Fedora service
request (i.e., attributes that describe the Fedora service request, the
user/subject, the desired object/datastream/dissemination, and the runtime
environment).    Repository-wide policies are always in play and will be
evaluated by the PDP to determine whether they are applicable to the particular
incoming Fedora service request.  Object-specific policies if the incoming
request refers to an object by its PID and there exists an object-specific
policy mentioning that PID.  <i><b>PDP makes the 
decision of deny/permit/indeterminate, and then the PEP makes sure to enforce 
this decision for on the incoming Fedora API request.</b></i></p>
<p>&nbsp;</p>
<p><i>NOTE:&nbsp; <font face="Arial" style="font-size: 9pt">To quiet 
		the Sun XACML engine's INFO messages, a logging.properties file is included with the 
		Fedora distribution, &nbsp;edited to print only SEVERE messages to the 
		console. Fedora then starts Java using that logging.properties file. 
		&nbsp;The original file, as distributed with JDK 1.4.2.8, prints INFO (and 
		more severe) messages, making the console a bit &nbsp;chatty.&nbsp; To revert to 
		the original logging behavior, edit fedora-start.bat (Windows) or 
		fedora.sh (Unix), and remove the logging.properties from the java vm 
arguments (see -D flags).</font></i></p>
<p>&nbsp;</p>

<h3><a name="IMPL-ALGORITHM">3<b>.2&nbsp; Understanding the XACML Policy Combining Algorithm</b></a></h3>
	<p>&nbsp;</p>
	<p>Policy writers must understand the interaction effect of
multiple XACML policies that are in scope for any particular action.  The
Fedora configuration file (fedora.fcfg) sets the policy combining algorithm
that will be used by the Policy Enforcement Module in evaluating sets of policies.  In the 
	the Fedora server configuration file (fedora.fcfg) note the following 
	parameter in the section
for the Authorization module::</p>
	<p>&nbsp;</p>
<div class="code">
	<pre>&lt;param name=&quot;XACML-COMBINING-ALGORITHM&quot; value=&quot;com.sun.xacml.combine.OrderedDenyOverridesPolicyAlg&quot;/&gt;</pre>
</div>

	<p>&nbsp;</p>
<p>This parameter sets the XACML policy combining algorithm
that controls how the Fedora Policy Enforcement Module will deal with multiple
policies that may be applicable to a Fedora service request.   The default
value in Fedora is the “Ordered Deny Overrides” policy combining algorithm.  It
allows a single evaluation of <b><i>deny</i></b> <b><i>to take precedence</i></b>
over any number of permit, not applicable or indeterminate results.  Note that
this uses the regular Deny Overrides implementation since it is also ordered.  
Consult the OASIS and Sun XACML documentation for a description of alternative
combining algorithms.  Note that the default policies assume and require this algorithm.
Generally policies are developed with an algorithm in mind.
</p>
	<p>In the PDP, policies are matched based on their applicability to an 
	incoming service request.&nbsp;&nbsp; All policies that are applicable are combined programmatically and dynamically
per request into a PolicySet.  To estimate the number of policies that may be
in the PolicySet for a given service request, consider N to be the number of
policies configured in Fedora’s  repository-wide policy storage location.  Then
we have the following possible number of policies in a PolicySet for the PDP to
consider:</p>
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='text-autospace:none'>N :      # of policies if a
service request <b><i>does not refer to a particular digital object</i></b></p>
	<p style='text-autospace:none'>N :      # of policies if a
service request <b><i>refers to an</i></b> <b><i>object,</i></b> <b><i>but
there is no object-specific policy for that object</i></b></p>
	<p style='text-autospace:none'>N+1:   # of policies if a
service request <b><i>refers to an</i></b> <b><i>object that has an object-specific
policy datastream, but has no object-specific policy in the object policies directory</i></b></p>
	<p style='text-autospace:none'>N+1:   # of policies if a
service request <b><i>refers to an</i></b> <b><i>object that has an
object-specific policy in the object policies directory, but has no object-specific
policy datastream</i></b></p>
	<p style='text-autospace:none'>N+2:   # of policies if a
service request<b><i> refers to an</i></b> <b><i>object that has an 
	object-specific policy datastream and a policy in the object-policies directory</i></b></p>
	<p>&nbsp;</p>

<h3><a name="IMPL-DECISION">3<b>.3 A Simplified Understanding of the Authorization Decision</b></a></h3>
<p>&nbsp;</p>
<p><i><b>For an incoming service request to succeed, there must be an explicit permit 
and the absence of a deny;&nbsp; 
the absence of a deny is not enough to permit an action</b> </i>&nbsp; By default, if any of the 
applicable policies in a Policy Set yield a deny, the requesting subject will be 
denied access, even if some other policy permitted the action.&nbsp; In other 
words, deny will prevail over permit.&nbsp;&nbsp; Also, if there is a policy in 
the set that is evaluated as &quot;Indeterminate,&quot; then the result of that policy 
evaluation will be considered a deny.&nbsp; A policy can be evaluated as 
Indeterminate if there was an error during policy evaluation.&nbsp; Also, a 
policy can be evaluated as Indeterminate if there is a required attribute 
specified in the policy that did not exist in the context of the incoming 
requests.&nbsp;&nbsp; See the section of <a href="#POLICY-OPT-ATTRS">Required 
vs. Optional Attributes</a> for more details.&nbsp; </p>
<p>For the purposes of a simple understanding of the Fedora
Policy Enforcement module, things work like this:</p>
<p>&nbsp;</p>
<div class="code">
	<pre><i>&nbsp;NOTE:  </i>=0  <i>means NO policy in a policy set evaluated to that result; 
        </i>=1  <i>means one or more policies in a policy set evaluated to that result</i></pre>
	<pre>========= POLICY SET RESULTS =======        === FINAL DECISION ===

DENY=0   INDETERMINATE=0    PERMIT=0   <span style="font-family:Wingdings">è</span>     result is DENY
DENY=1   INDETERMINATE=0    PERMIT=0   <span style="font-family:Wingdings">è</span>     result is DENY
DENY=1   INDETERMINATE=0    PERMIT=1   <span style="font-family:Wingdings">è</span>     result is DENY  (denial trumps permit)
DENY=0   INDETERMINATE=0    PERMIT=1   <span style="font-family:Wingdings">è</span>     result is <b>PERMIT
</b>DENY=0   INDETERMINATE=1    PERMIT=1   <span style="font-family:Wingdings">è</span>     result is DENY  (indeterminate is treated as denial which trumps permit)
DENY=0   INDETERMINATE=1    PERMIT=0   <span style="font-family:Wingdings">è</span>     result is DENY</pre>

      </div>

	<h2>&nbsp;</h2>
<p>Put another way... assuming the default policy combining algorithm for Fedora 
is &quot;Deny Overrides&quot;, an action is Permitted or Denied depending on the 
evaluation of the various policies, as follows:<br>
&nbsp;</p>
<p><b>Permit requires --ALL-- of the following conditions to be TRUE:</b></p>
<ul>
	<li>at least one policy was evaluated to Permit the action</li>
	<li>NO policy must evaluate to explicitly Deny the action</li>
	<li>NO policy must evaluate as Indeterminate for the action</li>
	<li>NO error or unknown result is returned by the Sun XACML engine</li>
</ul>
<p><b>Deny only requires --ONE-- of the following conditions to be TRUE:</b></p>
<ul>
	<li>at least one policy was evaluated to explicitly Deny the action</li>
	<li>at least one policy was evaluated to be Indeterminate for the action</li>
	<li>the Sun XACML engine returned a unknown result (an error or a return 
	value that is not in the XACML specification)</li>
</ul>
<p>&nbsp;</p>

<h3><a name="IMPL-PDP">3<b>.4&nbsp; PDP Implementation Details</b></a></h3>
<p>&nbsp;</p>
<div dir="ltr" align="left">
	We can understand the results of the PDP's evaluation of a policy set&nbsp;from 
	three perspectives:&nbsp; (1) the Sun XACML engine, (2) the Fedora wrapper 
	of Sun XACML, and (3) the bottom line outcome.</div>
<div dir="ltr" align="left">
	<span class="892423617-14102005"></span>&nbsp;</div>
<div dir="ltr" align="left">
	<b>(1)&nbsp; PDP (Sun XACML&nbsp;engine perspective):&nbsp;&nbsp;</b><p>&nbsp;</p>
<p>The Sun XACML engine, which underlies the Fedora Policy Enforcement Module,&nbsp; 
will evaluate a Policy Set and return a decision.&nbsp;&nbsp; Refer to the
<a href="http://docs.oasis-open.org/xacml/access_control-xacml-2_0-core-spec-cd-04.pdf">
OASIS XACML Specification</a> and the <a href="http://sunxacml.sourceforge.net">
Sun XACML documentation</a> for details.&nbsp; </p>
	<p>In making its authorization decision, the Sun XACML engine will return a single result from its evaluation of 
a Policy.&nbsp; The result will be one of the following:</p>
<ul>
	<li><b>Permit</b> - returned if a policy rule was applicable and thus it 
	returned its permit effect.</li>
	<li><b>Deny</b> - returned if a policy rule was applicable and thus returned 
	its denial effect.</li>
	<li><b>Indeterminate</b> - returned if an attribute value that was needed to
evaluate a rule could not be found, or another error prevented processing.</li>
	<li><b>NotApplicable</b> - returned if no rule applied and so no effect 
	could be returned.</li>
</ul>
</div>
<div dir="ltr" align="left">
	Given the default policy combining algorithm of&nbsp; &quot;Ordered Deny 
	Overrides,&quot; the PDP will make its final decision for a policy set such that
	<b>&nbsp;DENY</b> will prevail over PERMIT.&nbsp;&nbsp; If one or more 
	policies evaluate to Deny, Sun XACML gives a verdict of DENY.&nbsp; If one or 
	more policies evaluate to Indeterminate, and no policies evaluate to Deny, 
	the verdict is INDETERMINATE.&nbsp; If one or more policies evaluate to Permit, 
	and no policies evaluate to either Deny or Indeterminate, the verdict is 
	PERMIT.&nbsp; If one or more policies evaluate to NotApplicable, and no policies 
	evaluate to Permit or Deny or Indeterminate, the verdict is NOTAPPLICABLE.&nbsp;</div>
<div dir="ltr" align="left">
	<span class="892423617-14102005"></span>&nbsp;</div>
<div dir="ltr" align="left">
	<b>(2)&nbsp; PDP (Fedora wrapper&nbsp;perspective):&nbsp;&nbsp;&nbsp;</b></div>
<div dir="ltr" align="left">
&nbsp;<p>The Fedora wrapper respects the verdict of the Sun XACML PDP, which 
	should usually be PERMIT or DENY, given our default set of policies.&nbsp; But, 
	for safety, the Fedora wrapper code imposes a DENY result in any of several 
	extraordinary cases:&nbsp; (1) if somehow Sun XACML returned a final result 
	of Indeterminate or NotApplicable, (2) if Sun XACML returned no result at 
	all, (3) if Sun XACML returned a result which is not defined by OASIS XACML 
	or Sun XACML standards (the sunxacml Java interface uses int to code the 
	results, so sunxacml could return bad results), or (4) if authorization 
	processing results in a exception being thrown.</div>
<div dir="ltr" align="left">
	<span class="892423617-14102005"></span>&nbsp;</div>
<div dir="ltr" align="left">
	<b>3)&nbsp; PDP (Bottom line perspective):&nbsp; </b>
	<p>&nbsp;</p>
	<p>As a rule, a policy set evaluates to PERMIT when at least one policy in 
	the set evaluates to Permit and no policies evaluating to Deny or 
	Indeterminate.&nbsp; Otherwise, the policy set evaluates to DENY.&nbsp; </p>
	<p>Specifically:</p>
	<p>a) DENY occurs when there is at least one policy that evaluates to Deny 
	or an Indeterminate.</p>
	<p>b) DENY occurs if no policy evaluates to Permit.&nbsp; A DENY also occurs 
	in several exceptional situations:</p>
	<p>a) DENY occurs when no policies were found to be applicable (all evaluate 
	to NotApplicable) or the related case of there being no policies at all 
	configured with Fedora</p>
	<p>b) DENY occurs errors occurred during authorization processing, including 
	no or bad results obtained.<br>
	<span class="892423617-14102005"></span>&nbsp;</p>
	<p>&nbsp;</div>
<h3><a name="IMPL-PEP">3<b>.5&nbsp; Fedora PEP Implementation Details</b></a></h3>
	<p style='text-autospace:none'>Fedora's Policy Enforcement Point (PEP) builds a
minimal request for the Sun XACML engine to evaluate.&nbsp; One job of the 
	Fedora PEP is to gather up all of the Subject/Resource/Action/Environment 
	attributes that are relevant for an incoming service requests.&nbsp;&nbsp; 
	The values of this attributes are the key to determining what policies are 
	in scope for an incoming service request.&nbsp;&nbsp; To gather up all 
	relevant attributes,&nbsp; the Fedora PEP has two custom &quot;attribute finder&quot; modules 
	that interact with the Sun XACML engine. </p>
<ul>
	<li>
	<p style='text-autospace:none'>The <b>ContextAttributeFinderModule</b> has 
	the job of obtaining attributes that are stored in the enhanced Fedora 
	Context object that is associated with an incoming Fedora service request.&nbsp;&nbsp;&nbsp; 
	Attributes that originate with an incoming service requests can be Subject 
	attributes (i.e., attributes of the requesting user/agent), Action 
	attributes (i.e., the identity of the Fedora API operation that is the basis 
	of the request), Resource attributes (i.e.,&nbsp; attributes that identify 
	specific objects/datastreams/disseminations that are being requested, and 
	Environment attributes (i.e., attributes that describe the runtime 
	environment of the incoming request, like the current date/time or the 
	server IP address).&nbsp;&nbsp; It will honor a callback, even for an attribute which hasn't been explicitly coded, so
can provide arbitrary attributes (e.g., from LDAP lookup in a JAAS login module, 
	from Shibboleth via a servlet filter).  [There are a few
attributes which it explicitly doesn't serve, to prevent stack overflow on improper recursion, or because
the attributes are known to be provided in the xacml request itself.]</p></li>
	<li>
	<p style='text-autospace:none'>The <b>ResourceAttributeFinderModule</b> has 
	the job of obtaining all relevant attributes about Fedora resources (i.e., 
	digital objects, datastreams, and disseminations) for resources that are in 
	scope for an incoming request.&nbsp;&nbsp; While a few attributes of a 
	resource are picked up from the incoming request itself (typically, the 
	identity of a resource like a PID or a datastream Id), the 
	ResourceAttributeFinderModule gets all other attributes about such resources 
	by introspecting on actual digital objects in the repository.  </p></li>
	<li>
	<p style='text-autospace:none'>The ContextAttributeFinderModule supplies 
	environment values, named into the Fedora XACML URN namespace. 
	An <b>EnvironmentAttributeFinderModule</b> may be added for full
	compliance with XACML requirement that environment attributes be serviced
	which are named into its namespace XACML's namespace itself.
</p></li>	
</ul>
<h2>&nbsp;</h2>
<h2><a name="ATTR">4<b> How to Bind User Attributes into the Fedora Policy 
Enforcement Module</b></a></h2>
	<p><b>&nbsp;</b>The availability of user identity and attributes depends on 
	the authentication configuration option selected for the repository.&nbsp;&nbsp; 
	Refer to the <a href="securingrepo.html#AUTHN">Authentication and User 
	Attributes</a> section of the <a href="securingrepo.html">Securing Your 
	Repository</a> guide for information on authentication configuration 
	options.&nbsp;&nbsp;&nbsp;&nbsp; In terms of understanding what user 
	attributes can be referenced for Subjects in an XACML policy, you must first 
	know what the sources of authentication information are for the repository.&nbsp;&nbsp;&nbsp;&nbsp; 
	The Fedora XACML-based Policy Enforcement module will automatically be able 
	to obtain attributes from one or more of following authentication sources 
	when they are configured as described in <a href="securingrepo.html#AUTHN">
	Authentication and User Attributes</a>.</p>
	<h3><a name="ATTR1">4<b>.1  Tomcat-users attributes</b></a></h3>
	<p>In Fedora, XACML policies can refer to user identity and role information 
	that is specified within the Tomcat-users file.&nbsp;&nbsp; This file is part of the Tomcat configuration files and is auto-generated from the tomcat-user_fedoraTemplate.xml file. It contains username and password information about "authenticated" users. Roles can also be assigned to user entries.  These 
	roles can then be used as attributes in related XACML policies.</p>
<p>By default, the template contains the following users, passwords, and roles:</p>

	<div class="code"><pre>
  &lt;tomcat-users&gt;
      &lt;user name=&quot;#1&quot; password=&quot;#2&quot; roles=&quot;fedoraRole=administrator&quot;/&gt;
      &lt;user name=&quot;fedoraIntCallUser&quot; password=&quot;changeme&quot; roles=&quot;fedoraRole=fedoraInternalCall-1&quot;/&gt;
      &lt;user name=&quot;surrogate64&quot; password=&quot;surrogate64&quot; roles=&quot;webfrontend&quot;/&gt;
      &lt;user name=&quot;testuser1&quot; password=&quot;testuser1&quot; roles=&quot;fedoraRole=professor&quot;/&gt;
      &lt;user name=&quot;testuser2&quot; password=&quot;testuser2&quot; roles=&quot;fedoraRole=researcher&quot;/&gt;
      &lt;user name=&quot;testuser3&quot; password=&quot;testuser3&quot; roles=&quot;fedoraRole=student&quot;/&gt;
      &lt;user name=&quot;testuser4&quot; password=&quot;testuser4&quot; roles=&quot;fedoraRole=visitor&quot;/&gt;
      &lt;user name=&quot;guest&quot; password=&quot;&quot; roles=&quot;&quot;/&gt;
  &lt;/tomcat-users&gt;</pre></div>
  
<p>&nbsp;</p>
	
  <p>Two aspects of tomcat-users use need pointing out.&nbsp; User roles are 
	normally defined in Tomcat-users as &lt;user ..... 
	roles=&quot;value1,value2,value3&quot;/&gt;,&nbsp; where a user can have multiple roles, 
	and each role name is separated by a comma.&nbsp;&nbsp;  
	<p>&nbsp;<div class="code">
	<pre>
  &lt;user name=&quot;testuser2&quot; password=&quot;testuser2&quot; <b>roles=&quot;someRole,someOtherRole&quot;</b>/&gt;</pre>
	</div>

<p>&nbsp;</p>
<p>Fedora allows an enhancement of this specification of roles which allows each 
role <b><i>value</i></b> to itself be a name-value pair - essentially making 
each role value an attribute/value string.&nbsp; This is a simple concept that 
does not break the normal workings of Tomcat, but conveniently permits more 
meaning user attribute information to be recorded.&nbsp; The reason for doing 
this is to allow user attributes (attributeName=attributeValue) to be recorded 
in Tomcat-users in such a way that such attributes can be later used inside 
XACML policies.&nbsp;&nbsp; The basic idea is that each Tomcat role <b><i>value</i></b> 
is just a string, and as such, there is no reason we can't embed an equal sign 
within such a string.&nbsp;&nbsp; Thus, within the the &quot;roles=&quot; part of the user 
element in Tomcat-users, we can put a series of inner name/value pairs as in the 
following example:&nbsp;
</p>
<div class="code">
	<pre>
  &lt;user name=&quot;testuser2&quot; password=&quot;testuser2&quot; roles=&quot;<b>someAttribute=xyz</b>,<b>fedoraRole=researcher</b>&quot;/&gt;</pre>
	</div>

<p>The above example indicates that the user has two attributes (an attribute 
named<b> &quot;someAttriibute&quot;</b> whose value is <i>xyz</i>, and an attribute named<b> 
&quot;fedoraRole&quot;</b> whose value is <i>researcher</i>).&nbsp; These attribute names 
can be used in SubjectAttributeDesignator specifications in XACML policies and 
the values can be used in AttributeValue specifications in policies.&nbsp;&nbsp; 
Below is a snippet of an XACML policy that refers to attributes from 
Tomcat-users (refer to the <a href="XACMLPolicyGuide.htm">Fedora XACML Policy 
Guide</a> for more info on policy syntax):</p>

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
<pre>  &lt;Subjects&gt;
    &lt;Subject&gt;
      &lt;SubjectMatch MatchId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-equal&quot;&gt;
        &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>administrator</b>&lt;/AttributeValue&gt;
        &lt;SubjectAttributeDesignator AttributeId=&quot;<b>fedoraRole</b>&quot; MustBePresent=&quot;false&quot; 
              DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;/&gt;
      &lt;/SubjectMatch&gt;
    &lt;/Subject&gt;
  &lt;/Subjects&gt;</pre>

      </div>

<p style='text-autospace:none'>&nbsp;</p>

	<h3><a name="ATTR2">4<b>.2  LDAP attributes</b></a></h3>
	<p>In Fedora, XACML policies can refer to user attribute names and values 
	that are registered in an LDAP that is configured with Fedora's Tomcat.&nbsp;&nbsp; 
	Refer to the <a href="securingrepo.html#AUTHN">Authentication and User 
	Attributes</a> section of the <a href="securingrepo.html">Securing Your 
	Repository</a> guide for information on authentication configuration 
	options.&nbsp;&nbsp; Given that an LDAP is properly configured with Fedora, 
	the Fedora XACML-based Policy Enforcement module will be able to access LDAP 
	user attributes, which means that you can refer to LDAP attributes in 
	reference to a Subject in a policy, as shown in the following XACML snippet 
	(refer to the <a href="XACMLPolicyGuide.htm">Fedora XACML Policy Guide</a> 
	for more info on policy syntax)::</p>

<p style='text-autospace:none'>&nbsp;</p>
<div class="code">
<pre>  &lt;Rule RuleId=&quot;1&quot; Effect=&quot;Deny&quot;&gt;
    &lt;Condition FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of&quot;&gt;
       &lt;SubjectAttributeDesignator DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot; AttributeId=&quot;<b>ou</b>&quot;/&gt;
       &lt;Apply FunctionId=&quot;urn:oasis:names:tc:xacml:1.0:function:string-bag&quot;&gt;
          &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>Lb-Info Technology</b>&lt;/AttributeValue&gt;
          &lt;AttributeValue DataType=&quot;http://www.w3.org/2001/XMLSchema#string&quot;&gt;<b>Lb-Univ Librarian-General</b>&lt;/AttributeValue&gt;
       &lt;/Apply&gt;
    &lt;/Condition&gt;
  &lt;/Rule&gt;</pre>

      </div>

<p style='text-autospace:none'>In the above example, the 
SubjectAttributeDesignator refers to an LDAP attribute name (&quot;ou&quot;), which refers 
to the university organizational department that a user belongs to.&nbsp; The 
policy rule applies a function to set up the condition that the value of the &quot;ou&quot; 
attribute must be one of the listed values (&quot;Lb-Info Technology&quot; or Lb-Univ 
Librarian-General&quot;).&nbsp; </p>
<p>&nbsp;</p>
	<h3><a name="ATTR3">4<b>.3  Shibboleth attributes via an HTTP Servlet Filter</b></a></h3>
	<p><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p>
	<p style='text-autospace:none'>There are cases when an
application may obtain authenticated user attributes in an application or
service layer outside the context of the Fedora repository service.  Fedora
provides a simple means of getting these attributes into the Fedora repository
service so they can be used by the Fedora XACML policy enforcement module.  To
support the ability for upstream applications or services to send these user
attributes into a repository, Fedora will recognize a special HTTP servlet
request attribute named fedora.server.Context.FEDORA_AUX_SUBJECT_ATTRIBUTES.</p>
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='text-autospace:none'>The Fedora repository service
will automatically look for an HTTP servlet request attribute named after this
constant.  The Fedora code now takes a request attribute found under that name,
as a Map giving name and values of subject attributes. Currently, name must
be a String and this is unlikely to change. Value must be a String, and later
this might be relaxed to include String[], to allow  attributes with multiple
values.  Other types of value are not serviced. The effect of having a key
=&gt; value pair &quot;a&quot; =&gt; &quot;b&quot; in the Map  is the same as
having a Tomcat role &quot;a=b&quot;, with the exception that the effect of
having the same attribute key redefined both places is right now undefined.  So
your servlet filter needs only create the map and populate it, and put it into an
HTTP servlet request as attribute named fedora.server.Context.FEDORA_AUX_SUBJECT_ATTRIBUTES. 
Fedora will then  ook for it, and use the attributes in XACML-based
authorization.  </p>
	<p style='text-autospace:none'>&nbsp;</p>
	<p style='text-autospace:none'>This approach was initially developed to 
	support the OhioLink
	<a href="http://drc-dev.ohiolink.edu/browser/fedora-shib-filter/trunk/">Shibboleth servlet filter 
	</a>that will be available to the Fedora community from the OhioLink 
	implementation.&nbsp; Although full Shibboleth integration with Fedora will 
	be in future releases of Fedora, the ability to send attributes into
Fedora via a servlet filter is a way to get started with using
Shibboleth-acquired attributes in Fedora XACML policy enforcement.  It should
be noted that this means of getting attributes into Fedora can be used with any
subject attribute source (i.e., it remains source-neutral and doesn't favor
Shibboleth or any other particular scheme). </p>
	<p><b><span style='font-size:14.0pt'>&nbsp;</span></b></p>

<h2><a name="DEFAULT">5<b> Default Repository Policies for Fedora</b></a></h2>
	<p>&nbsp;</p>
<h3>5<b>.1 Default Access Control Policies</b></h3>
<p>out-of-the-box, the Fedora repository will have a default set of access 
control policies that provide for a highly restricted management service 
(API-M), an open access service&nbsp; (API-A), and an open OAI provider service.&nbsp;&nbsp; 
The default access control policies establish the same level of out-of-the-box security on the 
repository that was previously configured for Fedora 2.0 release; however, as 
of Fedora 2.1b these basic access controls are now specified as XACML policies.&nbsp;&nbsp; 
The default access control policies can be found within the Fedora software 
distribution in the following directory: <span style="font-family: Courier New">&nbsp;</span></p>
<p><span style="font-family: Courier New"><b>dist\server\config\xacml-policies\default\default-repository-policies-approximating-2.0</b></span></p>
<p><i>The first time the Fedora repository server is started, these policies 
will be automatically copied into the official <a href="#CONFIG-STORE">
repository-wide policy storage location </a>that was specified in the Fedora 
configuration file (fedora.fcfg).&nbsp; The policies are activated once they are 
copied into this location. </i>&nbsp;</p>
<p>&nbsp;</p>

<table border="1" width="100%">
	<tr>
		<td width="41">&nbsp;</td>
		<td width="64"><b>Service</b></td>
		<td width="260"><b>&nbsp;XACML Policy File</b></td>
		<td><b>&nbsp; Policy Description</b></td>
	</tr>
	<tr>
		<td width="41">1</td>
		<td width="64"><font size="2">any</font></td>
		<td width="260"><font size="2">
		<a href="xacml-policies/default/repository-wide/permit-anything-to-administrator.xml">permit-anything-to-administrator.xml</a></font></td>
		<td><font size="2">This is a &quot;positive policy&quot; that permits the Fedora 
		administrator to have access to any operation on any Fedora repository 
		service (API-M, API-A, OAI, RISearch).&nbsp; By default the Fedora 
		administrator is configured in the default Tomcat user credentials file 
		(tomcat-users.xml).</font></td>
	</tr>
	<tr>
		<td width="41">2</td>
		<td width="64"><font size="2">API-M</font></td>
		<td width="260"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-apim-if-not-localhost.xml">deny-apim-if-not-localhost.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that denies access to 
		API-M operations that are not made from the IP address of the machine on 
		which the Fedora repository is running on.&nbsp;&nbsp; In other words, 
		the policy will not allow API-M requests from hosts other than 
		&quot;localhost.&quot;</font></td>
	</tr>
	<tr>
		<td width="41">3</td>
		<td width="64"><font size="2">API-A</font></td>
		<td width="260"><font size="2">
		<a href="xacml-policies/default/repository-wide/permit-apia-unrestricted.xml">permit-apia-unrestricted.xml</a></font></td>
		<td><font size="2">This is a &quot;positive policy&quot; that permits unrestricted 
		access to API-A.&nbsp; In other words, API-A operations are completely 
		open for use by any user/agent.</font></td>
	</tr>
	<tr>
		<td width="41">4</td>
		<td width="59"><font size="2">OAI</font></td>
		<td width="423"><font size="2">
		<a href="xacml-policies/default/repository-wide/permit-oai-unrestricted.xml">permit-oai-unrestricted.xml</a></font></td>
		<td><font size="2">This is a &quot;positive policy&quot; that permits unrestricted 
		access to the default OAI provider interface to the Fedora repository.&nbsp; 
		In other words, OAI-PMH operations are completely open for use by any 
		user/agent.&nbsp; (Note, this does not control access to the stand-alone 
		PROAI service that is distributed with Fedora 2.1b.&nbsp; PROAI is a 
		stand-alone web application that must be secured separately.</font></td>
	</tr>
</table>
<p>&nbsp;</p>
<p>A review of how the policy combining algorithm works, will reveal that access 
to a service operation cannot occur unless access is <i><b>expressly permitted.</b></i>&nbsp;&nbsp; 
The net effect of the default access control policies is that the administrator 
is expressly permitted to do anything (with the restriction of having to make 
API-M requests from the same IP address that the server runs on),&nbsp; and all 
users are expressly permitted access to API-A and OAI service requests.</p>
<p>&nbsp;</p>
<h3>5<b>.2&nbsp; Default Utility Policies</b></h3>
	<p>Generally, the default repository utility policies <i><b>should not
be removed</b></i>.  <i>&lt;Discuss more.&gt;</i></p>
<p>&nbsp;</p>
<table border="1" width="100%">
	<tr>
		<td width="41">&nbsp;</td>
		<td width="78"><b>Service</b></td>
		<td width="416"><b>&nbsp; XACML Policy File</b></td>
		<td><b>&nbsp; Policy Description</b></td>
	</tr>
	<tr>
		<td width="41">1</td>
		<td width="78"><font size="2">serverAdmin</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-policy-management-if-not-administrator.xml">deny-policy-management-if-not-administrator.xml</a></font></td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td width="41">2</td>
		<td width="78"><font size="2">any</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-inactive-or-deleted-disseminations-if-not-administrator.xml">deny-inactive-or-deleted-disseminations-if-not-administrator.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will deny all access 
		to inactive/deleted disseminations if the user/agent is not the Fedora 
		administrator.&nbsp;&nbsp; Unlike purged disseminations, 
		inactive/deleted disseminations still exist, but they are just marked as 
		inactive/deleted.&nbsp;&nbsp; As such they should not be available to 
		users.&nbsp; The exception is that the Fedora administrator is allowed 
		to access them.&nbsp; </font></td>
	</tr>
	<tr>
		<td width="41">3</td>
		<td width="78"><font size="2">any</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-inactive-or-deleted-objects-or-datastreams-if-not-administrator.xml">deny-inactive-or-deleted-objects-or-datastreams-if-not-administrator.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will deny all access 
		to inactive/deleted datastreams if the user/agent is not the Fedora 
		administrator.&nbsp;&nbsp; Unlike purged datastreams, inactive/deleted 
		datastreams still exist, but they are just marked as inactive/deleted.&nbsp;&nbsp; 
		As such they should not be available to users.&nbsp; The exception is 
		that the Fedora administrator is allowed to access them.&nbsp; </font>
		</td>
	</tr>
	<tr>
		<td width="41">4</td>
		<td width="78"><font size="2">API-M</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-purge-datastream-if-active-or-inactive.xml">deny-purge-datastream-if-active-or-inactive.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will ensure that 
		datastreams cannot be purged (permanently removed) unless they are in 
		the deleted state.&nbsp; Purging of active or inactive datastreams is 
		not allowed.&nbsp; </font></td>
	</tr>
	<tr>
		<td width="41">5</td>
		<td width="78"><font size="2">API-M</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-purge-object-if-active-or-inactive.xml">deny-purge-object-if-active-or-inactive.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will ensure that 
		objects cannot be purged (permanently removed) unless they are in the 
		&quot;deleted&quot; state.&nbsp; Purging of active or inactive objects not 
		allowed. </font></td>
	</tr>
	<tr>
		<td width="41">6</td>
		<td width="78"><font size="2">serverAdmin</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-reloadPolicies-if-not-localhost.xml">deny-reloadPolicies-if-not-localhost.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will deny requests 
		to reload policies (i.e., policy reactivation) if this requests is not 
		initiated from the IP address of the machine on which the repository is 
		running (i.e., localhost).</font></td>
	</tr>
	<tr>
		<td width="41">7</td>
		<td width="78"><font size="2">serverAdmin</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/deny-serverShutdown-if-not-localhost.xml">deny-serverShutdown-if-not-localhost.xml</a></font></td>
		<td><font size="2">This is a &quot;negative policy&quot; that will deny requests 
		to shutdown the Fedora server if this requests is not initiated from the 
		IP address of the machine on which the repository is running (i.e., 
		localhost).</font></td>
	</tr>
	<tr>
		<td width="41">8</td>
		<td width="78"><font size="2">serverAdmin</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/permit-adminPing-unrestricted.xml">permit-adminPing-unrestricted.xml</a></font></td>
		<td><font size="2">This is a &quot;positive policy&quot; that permits unrestricted 
		access for pinging of the Fedora server.</font></td>
	</tr>
	<tr>
		<td width="41">9</td>
		<td width="78"><font size="2">serverAdmin</font></td>
		<td width="416"><font size="2">
		<a href="xacml-policies/default/repository-wide/permit-serverStatus-unrestricted.xml">permit-serverStatus-unrestricted.xml</a></font></td>
		<td><font size="2">This is a &quot;positive policy&quot; that permits unrestricted 
		access for obtaining the Fedora server status.</font></td>
	</tr>
</table>
	<p>&nbsp;</p>
<p><b><span style='font-size:14.0pt'>&nbsp;</span></b></p>
	
<h2><a name="CUSTOM">6<b> Sample Policies for Typical Fedora Use</b></a></h2>
	<p><b><span style='font-size:14.0pt'>&nbsp;</span></b></p>
<p>The Fedora Policy Enforcement Module is intended to provide a flexible means 
of creating access control for a repository and for digital objects within a 
repository.&nbsp;&nbsp; Therefore, it is expected that each Fedora repository 
will have XACML policies appropriate for specific contexts and use cases.&nbsp;&nbsp;&nbsp; 
All repositories will start off, out-of-the-box, with the set of default 
repository policies.&nbsp;&nbsp; These policies set up a world where (1) users 
in the Fedora administrator role are permitted to do
anything (see permit-anything-to-administrator.xml), (2) access to the API-M 
service is restricted to localhost (<font size="2">deny-apim-if-not-localhost.xml)</font>, 
and (3) the Fedora API-A service is totally
unrestricted (see permit-apia-unrestricted.xml).</p>
<p>Given this out-of-the-box starting point, the perspective that can be taken 
to easily understand how to write new custom policies is:</p>
<ul>
	<li>write new policies to <b><i>tighten up </i></b>access controls for the API-A 
	service&nbsp; (i.e., start to selectively deny access)</li>
	<li>write new policies to<b><i> loosen up</i></b> access controls for the 
	API-M service (i.e., start to selectively permit access)</li>
</ul>
<p>Please consult the <a href="SamplePolicyGuide.htm">Sample Policy Guide</a> 
which describes a reference collection of sample policies that would be useful 
for Fedora repositories.&nbsp;&nbsp; The collection contains examples of 
repository-wide and object-specific policies for restricting access to groups of 
digital objects based on certain attributes of the objects, for restricting 
access to certain kinds of datastreams and disseminations, for selectively 
permitting access to different API-M operations, and more.&nbsp;&nbsp; These 
policies can be found within the Fedora software distribution in the following 
directory:&nbsp;&nbsp;&nbsp;
<span style="font-family: Courier New; font-weight: 700">dist\server\config\xacml-policies\examples</span></p>
<p style='text-autospace:none'>
	&nbsp;</p>
<p style='text-autospace:none'>
&nbsp;</p>
	<p style='text-autospace:none'>
	<span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>
	<p>&nbsp;</p>
	<p><b><span style='font-size:14.0pt'>&nbsp;</span></b></p>
	<p>&nbsp;</p></li>
</ol>

</body>

</html>
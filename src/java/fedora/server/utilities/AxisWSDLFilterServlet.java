package fedora.server.utilities;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import java.util.regex.Pattern;

import fedora.common.http.HttpInputStream;
import fedora.common.http.WebClient;
import fedora.server.Server;
import fedora.server.errors.GeneralException;
import fedora.server.errors.InitializationException;
import fedora.server.errors.servletExceptionExtensions.InternalError500Exception;

/**
 * <p><b>Title: </b>AxisWSDLFilterServlet.java</p>
 * <p><b>Description: </b>Implements a simple string substitution filter that is a temporary
 * workaround for a problem with Apache Axis 1.3 where WSDL generated by Axis transforms the
 * namespace of xsd:string into soapenc:string which causes problems downstream with applications
 * attempted to use the generated WSDL. This filter performs a simple string replace and
 * transforms namespaces of the form soapenc:string back into their original values of
 * xsd:string. This servlet also allows access to the filtered WSDL to be a unrestricted operation
 * regardless of the HTTP restriction imposed on API-A or API-M since this servlet target in
 * web.xml is left unrrestricted. It uses the adminUsername and adminPassword stored in fedora.fcfg 
 * to authenticate when necessary with Axis for API-A or API-M.
 * <ol>
 *
 * @author rlw@virginia.edu
 * @version $Id$
 */
public class AxisWSDLFilterServlet extends HttpServlet
{
	
	  private static Server s_server = null;
	  private static String fedoraServerHost = null;
	  private static String fedoraServerPort = null;
	  private static String fedoraRedirectPort = null;  
	  private static String fedoraAdminUsername = null;
	  private static String fedoraAdminPassword = null;

  /**
   * <p>Process Fedora Access Request. Parse and validate the servlet input
   * parameters and then execute the specified request.</p>
   *
   * @param request  The servlet request.
   * @param response servlet The servlet response.
   * @throws ServletException If an error occurs that effects the servlet's
   *         basic operation.
   * @throws IOException If an error occurrs with an input or output operation.
   */
  public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException
  {
	  String axisWSDLURL = null;
	  String requestURL = request.getRequestURL().toString();
	  String port = null;
	  String protocol = null;
	  
	  try {
		  // Fedora uses the protocol and port to determine which wsdl:port(ssl or non-ssl) 
		  // to use in the wsdl. The protocol used in subsequent calls to Axis will determine
		  // whether the wsdl Axis generates gives the HTTP or HTTPS endpoint for the fedora server.
		  // If access to the wsdl is to always remain unauthenticated and never over ssl, 
		  // this next section of code will need to change and the desired protocol will need
		  // to be determined via some other means. Passing it as a parameter is probably the
		  // easiest option.
		  if(requestURL.startsWith("https")) {
			  protocol = "https://";
			  port = fedoraRedirectPort;
		  } else {
			  protocol = "http://";
			  port = fedoraServerPort;
		  }
		  if (requestURL.indexOf("fedora/access/wsdl") != -1) {
			  axisWSDLURL = protocol + fedoraServerHost + ":" + port + "/fedora/services/access?wsdl";
		  } else if (requestURL.indexOf("fedora/management/wsdl") != -1) {
			  axisWSDLURL = protocol + fedoraServerHost + ":" + port + "/fedora/services/management?wsdl";
		  }
		  
		  String filteredWSDL = get(axisWSDLURL); 
		  System.out.println("*** Internal Axis URL being used: "+axisWSDLURL);
		  Pattern badNamespace = Pattern.compile("soapenc:string");
		  filteredWSDL = badNamespace.matcher(filteredWSDL).replaceAll("xsd:string");
		  response.setContentType("text/xml; charset=\"UTF-8\"");
	      OutputStreamWriter out = new OutputStreamWriter(response.getOutputStream(),"UTF-8");
	      out.write(filteredWSDL);
	      out.flush();   		
	    } catch (Throwable th) {
	    	th.printStackTrace();
	    	throw new InternalError500Exception("", th, request, th.getMessage(), "", new String[0]);
	    }
	  
  }

  /**
   * <p>Get the contents of the specified URL</p>
   * 
   * @param url The URL string.
   * @return The contents of the URL.
   * @throws GeneralException If unable to retrieve the contents of the URL.
   */
  private String get(String url) throws GeneralException {
	  
	  try {
		  WebClient client = new WebClient();
		  HttpInputStream response = client.get(url, true, fedoraAdminUsername, fedoraAdminPassword);
		  
          BufferedInputStream bis = new BufferedInputStream(response); 
          ByteArrayOutputStream baos = new ByteArrayOutputStream();
          int len=0;
          while ( (len = bis.read()) != -1) {
              baos.write(len);
          }
          return baos.toString();
          
	  } catch (Exception e) {
		  System.out.println("*** Unable to retrieve contents of URL: "+url+" Reason: "+e.getMessage());
		  throw new GeneralException("Unable to retrieve contents of URL:  " + url, e);
	  }
}
  
  /**
   * <p>treat a HTTP POST request just like a GET request.</p>
   *
   * @param request The servet request.
   * @param response The servlet response.
   * @throws ServletException If thrown by <code>doGet</code>.
   * @throws IOException If thrown by <code>doGet</code>.
   */
  public void doPost(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException
  {
    doGet(request, response);
  }

  /**
   * <p>Initialize servlet.</p>
   *
   * @throws ServletException If the servet cannot be initialized.
   */
  public void init() throws ServletException
  {
      try
      {
          s_server=Server.getInstance(new File(System.getProperty("fedora.home")), false);
          fedoraServerHost = s_server.getParameter("fedoraServerHost");
          fedoraServerPort = s_server.getParameter("fedoraServerPort");
          fedoraRedirectPort = s_server.getParameter("fedoraRedirectPort");
          fedoraAdminUsername = s_server.getParameter("adminUsername");
          fedoraAdminPassword = s_server.getParameter("adminPassword");
          } catch (InitializationException ie)
          {
              throw new ServletException("Unable to get Fedora Server instance."
                  + ie.getMessage());
          }

  }

  /**
   * <p>Cleans up servlet resources.</p>
   */
  public void destroy()
  {}

  
}


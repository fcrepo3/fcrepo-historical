/* The contents of this file are subject to the license and copyright terms
 * detailed in the license directory at the root of the source tree (also 
 * available online at http://www.fedora.info/license/).
 */

package fedora.client.utility.validate.remote;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import fedora.server.search.Condition;
import fedora.server.search.FieldSearchQuery;
import fedora.server.search.FieldSearchResult;
import fedora.server.search.ObjectFields;
import fedora.server.storage.types.DatastreamDef;
import fedora.server.storage.types.RelationshipTuple;
import fedora.server.types.gen.ComparisonOperator;
import fedora.server.types.gen.ListSession;
import fedora.server.utilities.DateUtility;

/**
 * A collection of utility methods for converting between local objects and
 * those that are generated by the WSDL-based API-M and API-A clients.
 * 
 * @author Jim Blake
 */
public class TypeUtility {

    /**
     * Convert a local {@link FieldSearchQuery} into a WSDL-style
     * {@link fedora.server.types.gen.FieldSearchQuery FieldSearchQuery}.
     */
    public static fedora.server.types.gen.FieldSearchQuery convertFieldSearchQueryToGenFieldSearchQuery(FieldSearchQuery fsq) {
        fedora.server.types.gen.Condition[] genConditions =
                fsq.getConditions() == null ? null
                        : convertConditionsListToGenConditionsArray(fsq
                                .getConditions());
        return new fedora.server.types.gen.FieldSearchQuery(genConditions, fsq
                .getTerms());
    }

    /**
     * Convert a {@link List} of local {@link Condition}s into an array of
     * WSDL-style {@link fedora.server.types.gen.Condition Condition}s.
     */
    public static fedora.server.types.gen.Condition[] convertConditionsListToGenConditionsArray(List<Condition> conditions) {
        List<fedora.server.types.gen.Condition> genConditions =
                new ArrayList<fedora.server.types.gen.Condition>();

        for (Condition condition : conditions) {
            genConditions.add(convertConditionToGenCondition(condition));
        }

        return genConditions.toArray(new fedora.server.types.gen.Condition[0]);
    }

    /**
     * Convert a local {@link Condition} into a WSDL-style
     * {@link fedora.server.types.gen.Condition Condition}.
     */
    public static fedora.server.types.gen.Condition convertConditionToGenCondition(Condition condition) {
        String opAbbr = condition.getOperator().getAbbreviation();

        ComparisonOperator compOperator;
        try {
            compOperator = ComparisonOperator.fromString(opAbbr);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("unrecognized comparison operator string: '"
                    + opAbbr + "'");
        }

        return new fedora.server.types.gen.Condition(condition.getProperty(),
                                                     compOperator,
                                                     condition.getValue());
    }

    /**
     * Convert a WSDL-style
     * {@link fedora.server.types.gen.FieldSearchResult FieldSearchResult} to a
     * local {@link FieldSearchResult}.
     */
    public static FieldSearchResult convertGenFieldSearchResultToFieldSearchResult(fedora.server.types.gen.FieldSearchResult fsr) {
        long completeListSize = 0;
        long cursor = 0;
        Date expirationDate = new Date(0);
        String token = null;

        ListSession listSession = fsr.getListSession();
        if (listSession != null) {
            completeListSize = listSession.getCompleteListSize().longValue();
            cursor = listSession.getCursor().longValue();
            expirationDate =
                    DateUtility.convertStringToDate(listSession
                            .getExpirationDate());
            token = listSession.getToken();
        }

        List<fedora.server.search.ObjectFields> objectFields =
                convertGenObjectFieldsArrayToObjectFieldsList(fsr
                        .getResultList());
        return new BasicFieldSearchResult(completeListSize,
                                          cursor,
                                          expirationDate,
                                          token,
                                          objectFields);
    }

    /**
     * Convert an array of WSDL-style
     * {@link fedora.server.types.gen.ObjectFields ObjectFields} objects to a
     * {@link List} of local {@link ObjectFields} objects.
     */
    public static List<ObjectFields> convertGenObjectFieldsArrayToObjectFieldsList(fedora.server.types.gen.ObjectFields[] objectFields) {
        List<ObjectFields> result = new ArrayList<ObjectFields>();
        for (fedora.server.types.gen.ObjectFields objectField : objectFields) {
            result.add(convertGenObjectFieldsToObjectFields(objectField));
        }
        return result;
    }

    /**
     * Convert a WSDL-style
     * {@link fedora.server.types.gen.ObjectFields ObjectFields} object to a
     * local {@link ObjectFields} object.
     */
    public static ObjectFields convertGenObjectFieldsToObjectFields(fedora.server.types.gen.ObjectFields source) {
        ObjectFields result = new ObjectFields();
        result.setPid(source.getPid());
        result.setLabel(source.getLabel());
        result.setState(source.getState());
        result.setOwnerId(source.getOwnerId());
        result.setCDate(DateUtility.convertStringToDate(source.getCDate()));
        result.setMDate(DateUtility.convertStringToDate(source.getMDate()));
        result.setDCMDate(DateUtility.convertStringToDate(source.getDcmDate()));
        result.titles().addAll(convertStringArray(source.getTitle()));
        result.subjects().addAll(convertStringArray(source.getSubject()));
        result.descriptions()
                .addAll(convertStringArray(source.getDescription()));
        result.publishers().addAll(convertStringArray(source.getPublisher()));
        result.contributors()
                .addAll(convertStringArray(source.getContributor()));
        result.dates().addAll(convertStringArray(source.getDate()));
        result.types().addAll(convertStringArray(source.getType()));
        result.formats().addAll(convertStringArray(source.getFormat()));
        result.identifiers().addAll(convertStringArray(source.getIdentifier()));
        result.sources().addAll(convertStringArray(source.getSource()));
        result.languages().addAll(convertStringArray(source.getLanguage()));
        result.relations().addAll(convertStringArray(source.getRelation()));
        result.coverages().addAll(convertStringArray(source.getCoverage()));
        result.rights().addAll(convertStringArray(source.getRights()));
        return result;
    }

    private static List<String> convertStringArray(String[] strings) {
        if (strings == null) {
            return Collections.emptyList();
        } else {
            return Arrays.asList(strings);
        }
    }

    /**
     * Convert an array of WSDL-style
     * {@link fedora.server.types.gen.RelationshipTuple RelationshipTuple}s
     * into a list of local {@link RelationshipTuple}s.
     */
    public static List<RelationshipTuple> convertGenRelsTupleArrayToRelsTupleList(fedora.server.types.gen.RelationshipTuple[] array) {
        if (array == null) {
            return Collections.emptyList();
        }

        List<RelationshipTuple> list =
                new ArrayList<RelationshipTuple>(array.length);
        for (fedora.server.types.gen.RelationshipTuple genTuple : array) {
            list.add(convertGenRelsTupleToRelsTuple(genTuple));
        }
        return list;
    }

    /**
     * Convert a WSDL-style
     * {@link fedora.server.types.gen.RelationshipTuple RelationshipTyple} into
     * a local {@link RelationshipTuple}.
     */
    public static RelationshipTuple convertGenRelsTupleToRelsTuple(fedora.server.types.gen.RelationshipTuple genTuple) {
        return new RelationshipTuple(genTuple.getSubject(),
                                     genTuple.getPredicate(),
                                     genTuple.getObject(),
                                     genTuple.isIsLiteral(),
                                     genTuple.getDatatype());
    }

    /**
     * Convert an array of WSDL-style
     * {@link fedora.server.types.gen.DatastreamDef DatastreamDef}s into a list
     * of local {@link DatastreamDef}s.
     */
    public static List<DatastreamDef> convertGenDatastreamDefArrayToDatastreamDefList(fedora.server.types.gen.DatastreamDef[] genDefs) {
        List<DatastreamDef> list = new ArrayList<DatastreamDef>(genDefs.length);
        for (fedora.server.types.gen.DatastreamDef def : genDefs) {
            list.add(convertGenDatastreamDefToDatastreamDef(def));
        }
        return list;
    }

    /**
     * Convert a WSDL-style
     * {@link fedora.server.types.gen.DatastreamDef DatastreamDef} into a local
     * {@link DatastreamDef}.
     */
    public static DatastreamDef convertGenDatastreamDefToDatastreamDef(fedora.server.types.gen.DatastreamDef genDef) {
        return new DatastreamDef(genDef.getID(), genDef.getLabel(), genDef
                .getMIMEType());
    }

    /**
     * No need to instantiate since all methods are static.
     */
    private TypeUtility() {
        // Nothing to instantiate.
    }
}

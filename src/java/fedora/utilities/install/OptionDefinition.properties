fedora.home.label = Fedora home directory
fedora.home.description = Base directory for Fedora scripts, configuration files, etc.\n\
if it already exists, the directory must be empty and writable\n\
by the installing user.  If it doesn't exist, it must be possible\n\
to create it.
    /**
     * Base directory for Fedora scripts, config files, etc..
     *
     * Required.  If it already exists, the directory must be empty and 
     * writable by the installing user.  If it doesn't exist, it must be 
     * possible for the installing user to create it.
     */
    public static final String FEDORA_HOME = "fedora.home";

apia.auth.required.label = Authentication requirement for API-A
    /**
     * Whether Fedora's API-A interface should require user authentication.
     *
     * Optional; default is false.
     */
    public static final String APIA_AUTH_REQUIRED = "apia.auth.required";

ssl.available.label = SSL availability
    /**
     * Whether Fedora will be available via SSL.
     *
     * Optional; default is true.
     * Note: this does not preclude regular HTTP access; it just indicates
     * that it should be possible for Fedora to be accessed over SSL.
     */
    public static final String SSL_AVAILABLE = "ssl.available";

apia.ssl.required.label = SSL required for API-A
    /**
     * If SSL_AVAILABLE, whether API-A should be accessible exclusively via SSL.
     *
     * Optional; default is false.
     * If true, requests to access API-A URLs will be automatically redirected
     * to the secure port.
     */
    public static final String APIA_SSL_REQUIRED = "apia.ssl.required";

apim.ssl.required.label = SSL required for API-M
    /**
     * If SSL_AVAILABLE, whether API-M should be accessible exclusively via SSL.
     *
     * Optional; default is false.
     * If true, requests to access API-M URLs will be automatically redirected
     * to the secure port.
     */
    public static final String APIM_SSL_REQUIRED = "apim.ssl.required";

servlet.engine.label = Servlet engine
    /**
     * Which servlet engine the Fedora server will run in.
     *
     * Required.  Valid values: (BUNDLED_TOMCAT, EXISTING_TOMCAT, OTHER)
     * Note: BUNDLED_TOMCAT is only a valid option for the "bundled"
     * distribution of Fedora.
     */
    public static final String SERVLET_ENGINE = "servlet.engine";

tomcat.home.label = Tomcat home directory
    /**
     * Tomcat's base directory.
     *
     * Required if SERVLET_ENGINE is BUNDLED_TOMCAT or EXISTING_TOMCAT.
     * If BUNDLED_TOMCAT and this directory already exists, it must
     * be empty and writable by the installing user.
     * If BUNDLED_TOMCAT and the directory does not exist, it must be
     * possible for the installing user to create it.
     * If EXISTING_TOMCAT, this directory must already exist and must
     * contain a directory named "webapps", which can be written by the
     * installing user.
     */
    public static final String TOMCAT_HOME = "tomcat.home";

fedora.admin.pass.label = Initial password for fedoraAdmin
    /**
     * Password for the special "fedoraAdmin" user.
     *
     * Required (non-empty) if SERVLET_ENGINE is "bundledTomcat", so
     * that tomcat-users.xml can be automatically populated.
     */
    public static final String FEDORA_ADMIN_PASS = "fedora.admin.pass";

tomcat.shutdown.port.label = Tomcat shutdown port
    /**
     * Tomcat shutdown port (if SERVLET_ENGINE is "bundledTomcat").
     *
     * Optional; default is 8005, valid range is 1..65535.
     * Used to automatically populate Tomcat's server.xml file.
     */
    public static final String TOMCAT_SHUTDOWN_PORT = "tomcat.shutdown.port";

tomcat.http.port.label = Tomcat HTTP port
    /**
     * Tomcat HTTP port (if SERVLET_ENGINE is "bundledTomcat").
     *
     * Optional; default is 8080, valid range is 1..65535.
     * Used to automatically populate Tomcat's server.xml file.
     */
    public static final String TOMCAT_HTTP_PORT = "tomcat.http.port";

tomcat.http.port.label = Tomcat SSL port
    /**
     * Tomcat SSL port (if SERVLET_ENGINE is "bundledTomcat" and SSL_AVAILABLE).
     *
     * Optional; default is 8043, valid range is 1..65535.
     * Used to automatically populate Tomcat's server.xml file.
     */
    public static final String TOMCAT_SSL_PORT = "tomcat.ssl.port";

keystore.file.label = Keystore file
    /**
     * Keystore file (if SERVLET_ENGINE is "bundledTomcat" and SSL_AVAILABLE).
     *
     * Optional; "default" (included) keystore is used if not provided.
     * If provided, keystore must be readable so it can be copied.
     */
    public static final String KEYSTORE_FILE = "keystore.file";

jdbc.jar.file.label = JDBC jar file
    /**
     * JDBC jar file.
     *
     * Required; if "bundledMcKoi" or "bundledMySQL", the appropriate
     * included JAR from the distribution will be used.  Any other value
     * is assumed to be a path to the specific JAR to use, and must be
     * readable so it can be copied.
     */
    public static final String JDBC_JAR_FILE = "jdbc.jar.file";

xacml.enabled.label = Policy enforcement enabled
    /**
     * Whether to enable XACML policy enforcement (if SERVLET_ENGINE is "bundledTomcat"
     * or "existingTomcat").
     *
     * Optional; default is true.
     * This signals that policy enforcement will be initially enabled in fedora.fcfg,
     * and server.xml will use JAASMemoryRealm instead of the default, MemoryRealm.
     */
    public static final String XACML_ENABLED = "xacml.enabled";

deploy.local.services.label = Deploy local services
    /**
     * Whether local service wars should be deployed (if SERVLET_ENGINE is "bundledTomcat"
     * or "existingTomcat").
     *
     * Optional; default is true.
     * If false, they will be put in FEDORA_HOME/install/ for manual deployment.
     */
    public static final String DEPLOY_LOCAL_SERVICES = "deploy.local.services";
